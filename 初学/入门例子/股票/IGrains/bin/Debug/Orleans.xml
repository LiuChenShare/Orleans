<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orleans</name>
    </assembly>
    <members>
        <member name="T:Orleans.Runtime.TypeMetadataCache">
            <summary>
            Cache of type metadata.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.TypeMetadataCache.grainToInvokerMapping">
            <summary>
            The mapping between grain types and the corresponding type for the <see cref="T:Orleans.CodeGeneration.IGrainMethodInvoker"/> implementation.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.TypeMetadataCache.grainToReferenceMapping">
            <summary>
            The mapping between grain types and the corresponding type for the <see cref="T:Orleans.Runtime.GrainReference"/> implementation.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.AssemblyProcessor">
            <summary>
            The assembly processor.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.AssemblyProcessor.processedAssemblies">
            <summary>
            The collection of assemblies which have already been processed.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.AssemblyProcessor.logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.AssemblyProcessor.initializationLock">
            <summary>
            The initialization lock.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.AssemblyProcessor.typeCache">
            <summary>
            The type metadata cache.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.AssemblyProcessor.initialized">
            <summary>
            Whether or not this class has been initialized.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.AssemblyProcessor.#ctor(Orleans.Runtime.TypeMetadataCache,Orleans.Serialization.SerializationManager,Orleans.CodeGeneration.CodeGeneratorManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.AssemblyProcessor"/> class.
            </summary>
            <param name="typeCache">
            The type cache.
            </param>
            <param name="serializationManager">
            The serialization manager.
            </param>
            <param name="codeGeneratorManager">
            The code generator.
            </param>
        </member>
        <member name="M:Orleans.Runtime.AssemblyProcessor.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.AssemblyProcessor.OnAssemblyLoad(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            Handles <see cref="E:System.AppDomain.AssemblyLoad"/> events.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Orleans.Runtime.AssemblyProcessor.ProcessAssembly(System.Reflection.Assembly)">
            <summary>
            Processes the provided assembly.
            </summary>
            <param name="assembly">The assembly to process.</param>
        </member>
        <member name="M:Orleans.Runtime.AssemblyProcessor.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IPipeline">
            <summary>
            A utility interface that allows to control the rate of generation of asynchronous activities.
            </summary>
            <seealso cref="T:Orleans.Runtime.AsyncPipeline"/>   
        </member>
        <member name="M:Orleans.Runtime.IPipeline.Add(System.Threading.Tasks.Task)">
            <summary>Adds a new task to the pipeline</summary>
            <param name="task">The task to add</param>
        </member>
        <member name="M:Orleans.Runtime.IPipeline.Wait">
            <summary>Waits until all currently queued asynchronous operations are done. Blocks the calling thread.</summary>
        </member>
        <member name="P:Orleans.Runtime.IPipeline.Count">
            <summary>The number of items currently enqueued into this pipeline.</summary>
        </member>
        <member name="T:Orleans.Runtime.AsyncPipeline">
            <summary>
            A helper utility class that allows to control the rate of generation of asynchronous activities.
            Maintains a pipeline of asynchronous operations up to a given maximal capacity and blocks the calling thread if the pipeline 
            gets too deep before enqueued operations are not finished.
            Effectively adds a back-pressure to the caller.
            This is mainly usefull for stress-testing grains under controlled load and should never be used from within a grain code! 
            </summary>
        </member>
        <member name="F:Orleans.Runtime.AsyncPipeline.DEFAULT_CAPACITY">
            <summary>
            The Default Capacity of this AsyncPipeline. Equals to 10.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.AsyncPipeline.Capacity">
            <summary>
            The maximal number of async in-flight operations that can be enqueued into this async pipeline.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.AsyncPipeline.Count">
            <summary>
            The number of items currently enqueued into this async pipeline.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.AsyncPipeline.#ctor">
            <summary>
            Constructs an empty AsyncPipeline with capacity equal to the DefaultCapacity.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.AsyncPipeline.#ctor(System.Int32)">
            <summary>
            Constructs an empty AsyncPipeline with a given capacity.
            </summary>
            <param name="capacity">The maximal capacity of this AsyncPipeline.</param>
        </member>
        <member name="M:Orleans.Runtime.AsyncPipeline.Add(System.Threading.Tasks.Task)">
            <summary>
            Adds a new task to this AsyncPipeline.
            </summary>
            <param name="task">A task to add to this AsyncPipeline.</param>
        </member>
        <member name="M:Orleans.Runtime.AsyncPipeline.AddRange(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Adds a collection of tasks to this AsyncPipeline.
            </summary>
            <param name="tasks">A collection of tasks to add to this AsyncPipeline.</param>
        </member>
        <member name="M:Orleans.Runtime.AsyncPipeline.AddRange``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Adds a collection of tasks to this AsyncPipeline.
            </summary>
            <param name="tasks">A collection of tasks to add to this AsyncPipeline.</param>
        </member>
        <member name="M:Orleans.Runtime.AsyncPipeline.Wait">
            <summary>
            Waits until all currently queued asynchronous operations are done.
            Blocks the calling thread.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ConfigurationExtensions">
            <summary>
            Extension methods for configuration classes specific to Orleans.dll 
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ConfigurationExtensions.AddSimpleMessageStreamProvider(Orleans.Runtime.Configuration.ClusterConfiguration,System.String,System.Boolean,System.Boolean,Orleans.Streams.StreamPubSubType)">
            <summary>
            Adds a stream provider of type <see cref="T:Orleans.Providers.Streams.SimpleMessageStream.SimpleMessageStreamProvider"/>
            </summary>
            <param name="config">The cluster configuration object to add provider to.</param>
            <param name="providerName">The provider name.</param>
            <param name="fireAndForgetDelivery">Specifies whether the producer waits for the consumer to process the event before continuing. Setting this to false is useful for troubleshooting serialization issues.</param>
            <param name="optimizeForImmutableData">If set to true items transfered via the stream are always wrapped in Immutable for delivery.</param>
            <param name="pubSubType">Specifies how can grains subscribe to this stream.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ConfigurationExtensions.AddSimpleMessageStreamProvider(Orleans.Runtime.Configuration.ClientConfiguration,System.String,System.Boolean,System.Boolean,Orleans.Streams.StreamPubSubType)">
            <summary>
            Adds a stream provider of type <see cref="T:Orleans.Providers.Streams.SimpleMessageStream.SimpleMessageStreamProvider"/>
            </summary>
            <param name="config">The cluster configuration object to add provider to.</param>
            <param name="providerName">The provider name.</param>
            <param name="fireAndForgetDelivery">Specifies whether the producer waits for the consumer to process the event before continuing. Setting this to false is useful for troubleshooting serialization issues.</param>
            <param name="optimizeForImmutableData">If set to true items transfered via the stream are always wrapped in Immutable for delivery.</param>>
            <param name="pubSubType">Specifies how can grains subscribe to this stream.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ConfigurationExtensions.UseStartupType``1(Orleans.Runtime.Configuration.ClusterConfiguration)">
            <summary>
            Configures all cluster nodes to use the specified startup class for dependency injection.
            </summary>
            <typeparam name="TStartup">Startup type</typeparam>
        </member>
        <member name="T:Orleans.Runtime.Configuration.LimitNames">
            <summary>
            Class containing key names for the configurable LimitValues used by Orleans runtime.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.LimitValue">
            <summary>
            Data class encapsulating details of a particular system limit.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.LimitValue.Name">
            <summary>
            Name of this Limit value
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.LimitValue.SoftLimitThreshold">
            <summary>
            'Soft" limit threshold value for this Limit, after which Warnings will start to be generated
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.LimitValue.HardLimitThreshold">
            <summary>
            'Hard' limit threshold value, after which Errors will start to be generated and action take (for example, rejecting new request messages, etc) 
            to actively reduce the limit value back to within thresholds.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.IMessagingConfiguration">
            <summary>
            Specifies global messaging configuration that are common to client and silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.OpenConnectionTimeout">
            <summary>
            The OpenConnectionTimeout attribute specifies the timeout before a connection open is assumed to have failed
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.ResponseTimeout">
            <summary>
            The ResponseTimeout attribute specifies the default timeout before a request is assumed to have failed.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.MaxResendCount">
            <summary>
            The MaxResendCount attribute specifies the maximal number of resends of the same message.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.ResendOnTimeout">
            <summary>
            The ResendOnTimeout attribute specifies whether the message should be automaticaly resend by the runtime when it times out on the sender.
            Default is false.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.MaxSocketAge">
            <summary>
            The MaxSocketAge attribute specifies how long to keep an open socket before it is closed.
            Default is TimeSpan.MaxValue (never close sockets automatically, unles they were broken).
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.DropExpiredMessages">
            <summary>
            The DropExpiredMessages attribute specifies whether the message should be dropped if it has expired, that is if it was not delivered 
            to the destination before it has timed out on the sender.
            Default is true.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.SiloSenderQueues">
            <summary>
            The SiloSenderQueues attribute specifies the number of parallel queues and attendant threads used by the silo to send outbound
            messages (requests, responses, and notifications) to other silos.
            If this attribute is not specified, then System.Environment.ProcessorCount is used.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.GatewaySenderQueues">
            <summary>
            The GatewaySenderQueues attribute specifies the number of parallel queues and attendant threads used by the silo Gateway to send outbound
             messages (requests, responses, and notifications) to clients that are connected to it.
             If this attribute is not specified, then System.Environment.ProcessorCount is used.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.ClientSenderBuckets">
            <summary>
             The ClientSenderBuckets attribute specifies the total number of grain buckets used by the client in client-to-gateway communication
             protocol. In this protocol, grains are mapped to buckets and buckets are mapped to gateway connections, in order to enable stickiness
             of grain to gateway (messages to the same grain go to the same gateway, while evenly spreading grains across gateways).
             This number should be about 10 to 100 times larger than the expected number of gateway connections.
             If this attribute is not specified, then Math.Pow(2, 13) is used.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.ClientDropTimeout">
            <summary>
             This is the period of time a gateway will wait before dropping a disconnected client.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.BufferPoolBufferSize">
            <summary>
            The size of a buffer in the messaging buffer pool.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.BufferPoolMaxSize">
            <summary>
            The maximum size of the messaging buffer pool.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.BufferPoolPreallocationSize">
            <summary>
            The initial size of the messaging buffer pool that is pre-allocated.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.SerializationProviders">
            <summary>
            The list of serialization providers
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.FallbackSerializationProvider">
            <summary>
            Gets the fallback serializer, used as a last resort when no other serializer is able to serialize an object.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.MessagingConfiguration">
            <summary>
            Messaging configuration that are common to client and silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.MessagingConfiguration.MaxForwardCount">
            <summary>
            The MaxForwardCount attribute specifies the maximal number of times a message is being forwared from one silo to another.
            Forwarding is used internally by the tuntime as a recovery mechanism when silos fail and the membership is unstable.
            In such times the messages might not be routed correctly to destination, and runtime attempts to forward such messages a number of times before rejecting them.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ProviderConfiguration">
            <summary>
            Configuration for a particular provider instance.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ProviderConfiguration.Properties">
            <summary>
            Properties of this provider.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ProviderConfiguration.Children">
            <summary>
            Children providers of this provider. Used by hierarchical providers.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ProviderCategoryConfiguration">
            <summary>
            Provider categoty configuration.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.StatisticsLevel">
            <summary>
            The level of runtime statistics to collect and report periodically.
            The default level is Info.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.IStatisticsConfiguration">
            <summary>
            Statistics Configuration that are common to client and silo.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ApplicationConfiguration">
            <summary>
            Orleans application configuration parameters.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ApplicationConfiguration.DefaultCollectionAgeLimit">
            <summary>
            The default time period used to collect in-active activations.
            Applies to all grain types.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.#ctor(System.Nullable{System.TimeSpan})">
            <summary>
            Constructor.
            </summary>
            <param name="defaultCollectionAgeLimit">The default time period used to collect in-active activations.</param>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ApplicationConfiguration.ClassSpecific">
            <summary>
            IEnumerable of all configurations for different grain types.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.Load(System.Xml.XmlElement,Orleans.Runtime.Logger)">
            <summary>
            Load this configuratin from xml element.
            </summary>
            <param name="xmlElement"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.GetCollectionAgeLimit(System.Type)">
            <summary>
            Returns the time period used to collect in-active activations of a given type.
            </summary>
            <param name="type">Grain type.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.GetCollectionAgeLimit(System.String)">
            <summary>
            Returns the time period used to collect in-active activations of a given type.
            </summary>
            <param name="grainTypeFullName">Grain type full name.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.SetCollectionAgeLimit(System.Type,System.TimeSpan)">
            <summary>
            Sets the time period  to collect in-active activations for a given type.
            </summary>
            <param name="type">Grain type full name.</param>
            <param name="ageLimit">The age limit to use.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.SetCollectionAgeLimit(System.String,System.TimeSpan)">
            <summary>
            Sets the time period  to collect in-active activations for a given type.
            </summary>
            <param name="grainTypeFullName">Grain type full name string.</param>
            <param name="ageLimit">The age limit to use.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.ResetCollectionAgeLimitToDefault(System.Type)">
            <summary>
            Resets the time period to collect in-active activations for a given type to a default value.
            </summary>
            <param name="type">Grain type full name.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.ResetCollectionAgeLimitToDefault(System.String)">
            <summary>
            Resets the time period to collect in-active activations for a given type to a default value.
            </summary>
            <param name="grainTypeFullName">Grain type full name.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.SetDefaultCollectionAgeLimit(System.TimeSpan)">
            <summary>
            Sets the default time period  to collect in-active activations for all grain type.
            </summary>
            <param name="ageLimit">The age limit to use.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.ToString">
            <summary>
            Prints the current application configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.Configuration.GrainTypeConfiguration">
            <summary>
            Grain type specific application configuration.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GrainTypeConfiguration.FullTypeName">
            <summary>
            The type of the grain of this configuration.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GrainTypeConfiguration.AreDefaults">
            <summary>
            Whether this is a defualt configuration that applies to all grain types.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GrainTypeConfiguration.CollectionAgeLimit">
            <summary>
            The time period used to collect in-active activations of this type.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GrainTypeConfiguration.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="type">Grain type of this configuration.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GrainTypeConfiguration.#ctor(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Constructor.
            </summary>
            <param name="type">Grain type of this configuration.</param>
            <param name="ageLimit">Age limit for this type.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GrainTypeConfiguration.SetCollectionAgeLimit(System.Nullable{System.TimeSpan})">
            <summary>Sets a custom collection age limit for a grain type.</summary>
            <param name="ageLimit">Age limit for this type.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GrainTypeConfiguration.Load(System.Xml.XmlElement,Orleans.Runtime.Logger)">
            <summary>
            Load this configuration from xml element.
            </summary>
            <param name="xmlElement"></param>
            <param name="logger"></param>
        </member>
        <member name="T:Orleans.Runtime.Configuration.LimitManager">
            <summary>
            Limits Manager
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ClientConfiguration">
            <summary>
            Orleans client configuration parameters.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ClientConfiguration.GatewayProviderType">
            <summary>
            Specifies the type of the gateway provider.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.ClientConfiguration.GatewayProviderType.None">
            <summary>No provider specified</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.ClientConfiguration.GatewayProviderType.AzureTable">
            <summary>use Azure, requires SystemStore element</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.ClientConfiguration.GatewayProviderType.SqlServer">
            <summary>use SQL, requires SystemStore element</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.ClientConfiguration.GatewayProviderType.ZooKeeper">
            <summary>use ZooKeeper, requires SystemStore element</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.ClientConfiguration.GatewayProviderType.Config">
            <summary>use Config based static list, requires Config element(s)</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.ClientConfiguration.GatewayProviderType.Custom">
            <summary>use provider from third-party assembly</summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.ClientName">
            <summary>
            The name of this client.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.SourceFile">
            <summary>Gets the configuration source file path</summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.Gateways">
            <summary>
            The list fo the gateways to use.
            Each GatewayNode element specifies an outside grain client gateway node.
            If outside (non-Orleans) clients are to connect to the Orleans system, then at least one gateway node must be specified.
            Additional gateway nodes may be specified if desired, and will add some failure resilience and scalability.
            If multiple gateways are specified, then each client will select one from the list at random.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.PreferedGatewayIndex">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.GatewayProvider">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.DeploymentId">
            <summary>
            Specifies a unique identifier of this deployment.
            If the silos are deployed on Azure (run as workers roles), deployment id is set automatically by Azure runtime, 
            accessible to the role via RoleEnvironment.DeploymentId static variable and is passed to the silo automatically by the role via config. 
            So if the silos are run as Azure roles this variable should not be specified in the OrleansConfiguration.xml (it will be overwritten if specified).
            If the silos are deployed on the cluster and not as Azure roles, this variable should be set by a deployment script in the OrleansConfiguration.xml file.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.DataConnectionString">
            <summary>
            Specifies the connection string for the gateway provider.
            If the silos are deployed on Azure (run as workers roles), DataConnectionString may be specified via RoleEnvironment.GetConfigurationSettingValue("DataConnectionString");
            In such a case it is taken from there and passed to the silo automatically by the role via config.
            So if the silos are run as Azure roles and this config is specified via RoleEnvironment, 
            this variable should not be specified in the OrleansConfiguration.xml (it will be overwritten if specified).
            If the silos are deployed on the cluster and not as Azure roles,  this variable should be set in the OrleansConfiguration.xml file.
            If not set at all, DevelopmentStorageAccount will be used.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.AdoInvariant">
            <summary>
            When using ADO, identifies the underlying data provider for the gateway provider. This three-part naming syntax is also used when creating a new factory 
            and for identifying the provider in an application configuration file so that the provider name, along with its associated 
            connection string, can be retrieved at run time. https://msdn.microsoft.com/en-us/library/dd0w4a2z%28v=vs.110%29.aspx
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.DefaultTraceLevel">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.TraceLevelOverrides">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.TraceToConsole">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.LargeMessageWarningThreshold">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.PropagateActivityId">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.BulkMessageLimit">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.PreferredFamily">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.NetInterface">
            <summary>
            The Interface attribute specifies the name of the network interface to use to work out an IP address for this machine.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.Port">
            <summary>
            The Port attribute specifies the specific listen port for this client machine.
            If value is zero, then a random machine-assigned port number will be used.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.DNSHostName">
            <summary>Gets the true host name, no IP address. It equals Dns.GetHostName()</summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.GatewayListRefreshPeriod">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.UseAzureSystemStore">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.UseSqlSystemStore">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.ProviderConfigurations">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.TraceFilePattern">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.TraceFileName">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClientConfiguration.#ctor">
            <summary>Initializes a new instance of <see cref="T:Orleans.Runtime.Configuration.ClientConfiguration"/>.</summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClientConfiguration.LoadFromFile(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClientConfiguration.RegisterStreamProvider``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Registers a given type of <typeparamref name="T"/> where <typeparamref name="T"/> is stream provider
            </summary>
            <typeparam name="T">Non-abstract type which implements <see cref="T:Orleans.Streams.IStreamProvider"/> stream</typeparam>
            <param name="providerName">Name of the stream provider</param>
            <param name="properties">Properties that will be passed to stream provider upon initialization</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClientConfiguration.RegisterStreamProvider(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Registers a given stream provider.
            </summary>
            <param name="providerTypeFullName">Full name of the stream provider type</param>
            <param name="providerName">Name of the stream provider</param>
            <param name="properties">Properties that will be passed to the stream provider upon initialization </param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClientConfiguration.TryGetProviderConfiguration(System.String,System.String,Orleans.Providers.IProviderConfiguration@)">
            <summary>
            Retrieves an existing provider configuration
            </summary>
            <param name="providerTypeFullName">Full name of the stream provider type</param>
            <param name="providerName">Name of the stream provider</param>
            <param name="config">The provider configuration, if exists</param>
            <returns>True if a configuration for this provider already exists, false otherwise.</returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClientConfiguration.GetAllProviderConfigurations">
            <summary>
            Retrieves an enumeration of all currently configured provider configurations.
            </summary>
            <returns>An enumeration of all currently configured provider configurations.</returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClientConfiguration.StandardLoad">
            <summary>
            Loads the configuration from the standard paths, looking up the directory hierarchy
            </summary>
            <returns>Client configuration data if a configuration file was found.</returns>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if no configuration file could be found in any of the standard locations</exception>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClientConfiguration.ToString">
            <summary>Returns a detailed human readable string that represents the current configuration. It does not contain every single configuration knob.</summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClientConfiguration.LocalhostSilo(System.Int32)">
            <summary>
            Returns a ClientConfiguration object for connecting to a local silo (for testing).
            </summary>
            <param name="gatewayPort">Client gateway TCP port</param>
            <returns>ClientConfiguration object that can be passed to GrainClient class for initialization</returns>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ConfigUtilities">
            <summary>
            Utilities class for handling configuration.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ConfigUtilities.RedactConnectionStringInfo(System.String)">
            <summary>
            Prints the the DataConnectionString,
            without disclosing any credential info
            such as the Azure Storage AccountKey, SqlServer password or AWS SecretKey.
            </summary>
            <param name="connectionString">The connection string to print.</param>
            <returns>The string representation of the DataConnectionString with account credential info redacted.</returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ConfigUtilities.RuntimeVersionInfo">
            <summary>
            Returns the Runtime Version information.
            </summary>
            <returns>the Runtime Version information</returns>
        </member>
        <member name="T:Orleans.Runtime.Configuration.GlobalConfiguration">
            <summary>
            Data object holding Silo global configuration parameters.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.GlobalConfiguration.LivenessProviderType">
            <summary>
            Liveness configuration that controls the type of the liveness protocol that silo use for membership.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.LivenessProviderType.NotSpecified">
            <summary>Default value to allow discrimination of override values.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.LivenessProviderType.MembershipTableGrain">
            <summary>Grain is used to store membership information. 
            This option is not reliable and thus should only be used in local development setting.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.LivenessProviderType.AzureTable">
            <summary>AzureTable is used to store membership information. 
            This option can be used in production.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.LivenessProviderType.SqlServer">
            <summary>SQL Server is used to store membership information. 
            This option can be used in production.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.LivenessProviderType.ZooKeeper">
            <summary>Apache ZooKeeper is used to store membership information. 
            This option can be used in production.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.LivenessProviderType.Custom">
            <summary>Use custom provider from third-party assembly</summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.GlobalConfiguration.ReminderServiceProviderType">
            <summary>
            Reminders configuration that controls the type of the protocol that silo use to implement Reminders.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.ReminderServiceProviderType.NotSpecified">
            <summary>Default value to allow discrimination of override values.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.ReminderServiceProviderType.ReminderTableGrain">
            <summary>Grain is used to store reminders information. 
            This option is not reliable and thus should only be used in local development setting.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.ReminderServiceProviderType.AzureTable">
            <summary>AzureTable is used to store reminders information. 
            This option can be used in production.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.ReminderServiceProviderType.SqlServer">
            <summary>SQL Server is used to store reminders information. 
            This option can be used in production.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.ReminderServiceProviderType.MockTable">
            <summary>Used for benchmarking; it simply delays for a specified delay during each operation.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.ReminderServiceProviderType.Disabled">
            <summary>Reminder Service is disabled.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.ReminderServiceProviderType.Custom">
            <summary>Use custom Reminder Service from third-party assembly</summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.GlobalConfiguration.GossipChannelType">
            <summary>
            Configuration for Gossip Channels
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.GossipChannelType.NotSpecified">
            <summary>Default value to allow discrimination of override values.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.GossipChannelType.AzureTable">
            <summary>An Azure Table serving as a channel. </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.GlobalConfiguration.GossipChannelConfiguration">
            <summary>
            Gossip channel configuration.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.GossipChannelConfiguration.ChannelType">
            <summary>Gets or sets the gossip channel type.</summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.GossipChannelConfiguration.ConnectionString">
            <summary>Gets or sets the credential information used by the channel implementation.</summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.GlobalConfiguration.DirectoryCachingStrategyType">
            <summary>
            Configuration type that controls the type of the grain directory caching algorithm that silo use.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.DirectoryCachingStrategyType.None">
            <summary>Don't cache.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.DirectoryCachingStrategyType.LRU">
            <summary>Standard fixed-size LRU.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.DirectoryCachingStrategyType.Adaptive">
            <summary>Adaptive caching with fixed maximum size and refresh. This option should be used in production.</summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.SeedNodes">
            <summary>
            SeedNodes are only used in local development setting with LivenessProviderType.MembershipTableGrain
            SeedNodes are never used in production.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.Subnet">
            <summary>
            The subnet on which the silos run. 
            This option should only be used when running on multi-homed cluster. It should not be used when running in Azure.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.PrimaryNodeIsRequired">
            <summary>
            Determines if primary node is required to be configured as a seed node.
            True if LivenessType is set to MembershipTableGrain, false otherwise.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.LivenessEnabled">
            <summary>
            Global switch to disable silo liveness protocol (should be used only for testing).
            The LivenessEnabled attribute, if provided and set to "false", suppresses liveness enforcement.
            If a silo is suspected to be dead, but this attribute is set to "false", the suspicions will not propagated to the system and enforced,
            This parameter is intended for use only for testing and troubleshooting.
            In production, liveness should always be enabled.
            Default is true (eanabled)
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.ProbeTimeout">
            <summary>
            The number of seconds to periodically probe other silos for their liveness or for the silo to send "I am alive" heartbeat  messages about itself.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.TableRefreshTimeout">
            <summary>
            The number of seconds to periodically fetch updates from the membership table.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.DeathVoteExpirationTimeout">
            <summary>
            Expiration time in seconds for death vote in the membership table.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.IAmAliveTablePublishTimeout">
            <summary>
            The number of seconds to periodically write in the membership table that this silo is alive. Used ony for diagnostics.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.MaxJoinAttemptTime">
            <summary>
            The number of seconds to attempt to join a cluster of silos before giving up.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.TypeMapRefreshInterval">
            <summary>
            The number of seconds to refresh the cluster grain interface map
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.ExpectedClusterSize">
            <summary>
            The expected size of a cluster. Need not be very accurate, can be an overestimate.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.NumMissedProbesLimit">
            <summary>
            The number of missed "I am alive" heartbeat messages from a silo or number of un-replied probes that lead to suspecting this silo as dead.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.NumProbedSilos">
            <summary>
            The number of silos each silo probes for liveness.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.NumVotesForDeathDeclaration">
            <summary>
            The number of non-expired votes that are needed to declare some silo as dead (should be at most NumMissedProbesLimit)
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.NumMissedTableIAmAliveLimit">
            <summary>
            The number of missed "I am alive" updates  in the table from a silo that causes warning to be logged. Does not impact the liveness protocol.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.UseLivenessGossip">
            <summary>
            Whether to use the gossip optimization to speed up spreading liveness information.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.ValidateInitialConnectivity">
            <summary>
            Whether new silo that joins the cluster has to validate the initial connectivity with all other Active silos.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.ServiceId">
            <summary>
            Service Id.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.DeploymentId">
            <summary>
            Deployment Id.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.HasMultiClusterNetwork">
            <summary>
            Whether this cluster is configured to be part of a multicluster network
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.ClusterId">
            <summary>
            Cluster id (one per deployment, unique across all the deployments/clusters)
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.DefaultMultiCluster">
             <summary>
            A list of cluster ids, to be used if no multicluster configuration is found in gossip channels.
             </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.MaxMultiClusterGateways">
            <summary>
            The maximum number of silos per cluster should be designated to serve as gateways.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.BackgroundGossipInterval">
            <summary>
            The time between background gossips.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.UseGlobalSingleInstanceByDefault">
            <summary>
            Whether to use the global single instance protocol as the default
            multicluster registration strategy.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.GlobalSingleInstanceNumberRetries">
            <summary>
            The number of quick retries before going into DOUBTFUL state.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.GlobalSingleInstanceRetryInterval">
            <summary>
            The time between the slow retries for DOUBTFUL activations.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.GossipChannels">
            <summary>
            A list of connection strings for gossip channels.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.DataConnectionString">
            <summary>
            Connection string for the underlying data provider for liveness and reminders. eg. Azure Storage, ZooKeeper, SQL Server, ect.
            In order to override this value for reminders set <see cref="P:Orleans.Runtime.Configuration.GlobalConfiguration.DataConnectionStringForReminders"/>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.AdoInvariant">
            <summary>
            When using ADO, identifies the underlying data provider for liveness and reminders. This three-part naming syntax is also used 
            when creating a new factory and for identifying the provider in an application configuration file so that the provider name, 
            along with its associated connection string, can be retrieved at run time. https://msdn.microsoft.com/en-us/library/dd0w4a2z%28v=vs.110%29.aspx
            In order to override this value for reminders set <see cref="P:Orleans.Runtime.Configuration.GlobalConfiguration.AdoInvariantForReminders"/> 
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.DataConnectionStringForReminders">
            <summary>
            Set this property to override <see cref="P:Orleans.Runtime.Configuration.GlobalConfiguration.DataConnectionString"/> for reminders.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.AdoInvariantForReminders">
            <summary>
            Set this property to override <see cref="P:Orleans.Runtime.Configuration.GlobalConfiguration.AdoInvariant"/> for reminders.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.MaxRequestProcessingTime">
            <summary>
            Specifies the maximum time that a request can take before the activation is reported as "blocked"
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.CacheSize">
            <summary>
            The CacheSize attribute specifies the maximum number of grains to cache directory information for.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.InitialCacheTTL">
            <summary>
            The InitialTTL attribute specifies the initial (minimum) time, in seconds, to keep a cache entry before revalidating.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.MaximumCacheTTL">
            <summary>
            The MaximumTTL attribute specifies the maximum time, in seconds, to keep a cache entry before revalidating.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.CacheTTLExtensionFactor">
            <summary>
            The TTLExtensionFactor attribute specifies the factor by which cache entry TTLs should be extended when they are found to be stable.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.MaxStorageBusyRetries">
            <summary>
            Retry count for Azure Table operations. 
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.DirectoryCachingStrategy">
            <summary>
            The DirectoryCachingStrategy attribute specifies the caching strategy to use.
            The options are None, which means don't cache directory entries locally;
            LRU, which indicates that a standard fixed-size least recently used strategy should be used; and
            Adaptive, which indicates that an adaptive strategy with a fixed maximum size should be used.
            The Adaptive strategy is used by default.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.livenessServiceType">
            <summary>
            The LivenessType attribute controls the liveness method used for silo reliability.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.MembershipTableAssembly">
            <summary>
            Assembly to use for custom MembershipTable implementation
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.ReminderTableAssembly">
            <summary>
            Assembly to use for custom ReminderTable implementation
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.reminderServiceType">
            <summary>
            The ReminderServiceType attribute controls the type of the reminder service implementation used by silos.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.ProviderConfigurations">
            <summary>
            Configuration for various runtime providers.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.GrainServiceConfigurations">
            <summary>
            Configuration for grain services.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.DirectoryLazyDeregistrationDelay">
            <summary>
            The time span between when we have added an entry for an activation to the grain directory and when we are allowed
            to conditionally remove that entry. 
            Conditional deregistration is used for lazy clean-up of activations whose prompt deregistration failed for some reason (e.g., message failure).
            This should always be at least one minute, since we compare the times on the directory partition, so message delays and clcks skues have
            to be allowed.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.UseSqlSystemStore">
            <summary>
            Determines if ADO should be used for storage of Membership and Reminders info.
            True if either or both of LivenessType and ReminderServiceType are set to SqlServer, false otherwise.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.UseZooKeeperSystemStore">
            <summary>
            Determines if ZooKeeper should be used for storage of Membership and Reminders info.
            True if LivenessType is set to ZooKeeper, false otherwise.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.UseAzureSystemStore">
            <summary>
            Determines if Azure Storage should be used for storage of Membership and Reminders info.
            True if either or both of LivenessType and ReminderServiceType are set to AzureTable, false otherwise.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GlobalConfiguration.RegisterBootstrapProvider``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Registers a given type of <typeparamref name="T"/> where <typeparamref name="T"/> is bootstrap provider
            </summary>
            <typeparam name="T">Non-abstract type which implements <see cref="T:Orleans.Providers.IBootstrapProvider"/> interface</typeparam>
            <param name="providerName">Name of the bootstrap provider</param>
            <param name="properties">Properties that will be passed to bootstrap provider upon initialization</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GlobalConfiguration.RegisterBootstrapProvider(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Registers a given bootstrap provider.
            </summary>
            <param name="providerTypeFullName">Full name of the bootstrap provider type</param>
            <param name="providerName">Name of the bootstrap provider</param>
            <param name="properties">Properties that will be passed to the bootstrap provider upon initialization </param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GlobalConfiguration.RegisterStreamProvider``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Registers a given type of <typeparamref name="T"/> where <typeparamref name="T"/> is stream provider
            </summary>
            <typeparam name="T">Non-abstract type which implements <see cref="T:Orleans.Streams.IStreamProvider"/> stream</typeparam>
            <param name="providerName">Name of the stream provider</param>
            <param name="properties">Properties that will be passed to stream provider upon initialization</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GlobalConfiguration.RegisterStreamProvider(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Registers a given stream provider.
            </summary>
            <param name="providerTypeFullName">Full name of the stream provider type</param>
            <param name="providerName">Name of the stream provider</param>
            <param name="properties">Properties that will be passed to the stream provider upon initialization </param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GlobalConfiguration.RegisterStorageProvider``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Registers a given type of <typeparamref name="T"/> where <typeparamref name="T"/> is storage provider
            </summary>
            <typeparam name="T">Non-abstract type which implements <see cref="T:Orleans.Storage.IStorageProvider"/> storage</typeparam>
            <param name="providerName">Name of the storage provider</param>
            <param name="properties">Properties that will be passed to storage provider upon initialization</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GlobalConfiguration.RegisterStorageProvider(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Registers a given storage provider.
            </summary>
            <param name="providerTypeFullName">Full name of the storage provider type</param>
            <param name="providerName">Name of the storage provider</param>
            <param name="properties">Properties that will be passed to the storage provider upon initialization </param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GlobalConfiguration.RegisterLogConsistencyProvider(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Registers a given log-consistency provider.
            </summary>
            <param name="providerTypeFullName">Full name of the log-consistency provider type</param>
            <param name="providerName">Name of the log-consistency provider</param>
            <param name="properties">Properties that will be passed to the log-consistency provider upon initialization </param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GlobalConfiguration.RegisterLogConsistencyProvider``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Registers a given type of <typeparamref name="T"/> where <typeparamref name="T"/> is a log-consistency provider
            </summary>
            <typeparam name="T">Non-abstract type which implements <see cref="T:Orleans.LogConsistency.ILogConsistencyProvider"/> a log-consistency storage interface</typeparam>
            <param name="providerName">Name of the log-consistency provider</param>
            <param name="properties">Properties that will be passed to log-consistency provider upon initialization</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GlobalConfiguration.TryGetProviderConfiguration(System.String,System.String,Orleans.Providers.IProviderConfiguration@)">
            <summary>
            Retrieves an existing provider configuration
            </summary>
            <param name="providerTypeFullName">Full name of the stream provider type</param>
            <param name="providerName">Name of the stream provider</param>
            <param name="config">The provider configuration, if exists</param>
            <returns>True if a configuration for this provider already exists, false otherwise.</returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GlobalConfiguration.GetAllProviderConfigurations">
            <summary>
            Retrieves an enumeration of all currently configured provider configurations.
            </summary>
            <returns>An enumeration of all currently configured provider configurations.</returns>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ITraceConfiguration">
            <summary>
            The TracingConfiguration type contains various tracing-related configuration parameters.
            For production use, the default value of these parameters should be fine.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ITraceConfiguration.DefaultTraceLevel">
            <summary>
            The DefaultTraceLevel attribute specifies the default tracing level for all Orleans loggers, unless overridden by
            a specific TraceLevelOverride element.
            The default level is Info if this attribute does not appear.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ITraceConfiguration.TraceFileName">
            <summary>
            The TraceFileName attribute specifies the name of a file that trace output should be written to.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ITraceConfiguration.TraceFilePattern">
            <summary>
            The TraceFilePattern attribute specifies the pattern name of a file that trace output should be written to.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ITraceConfiguration.TraceLevelOverrides">
            <summary>
            The TraceLevelOverride element provides a mechanism to allow the tracing level to be set differently for different
            parts of the Orleans system.
            The tracing level for a logger is set based on a prefix match on the logger's name.
            TraceLevelOverrides are applied in length order; that is, the override with the longest matching
            LogPrefix takes precedence and specifies the tracing level for all matching loggers.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ITraceConfiguration.TraceToConsole">
            <summary>
            The TraceToConsole attribute specifies whether trace output should be written to the console.
            The default is write trace data to the console if available.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ITraceConfiguration.LargeMessageWarningThreshold">
            <summary>
            The LargeMessageWarningThreshold attribute specifies when to generate a warning trace message for large messages.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ITraceConfiguration.PropagateActivityId">
            <summary>
            The PropagateActivityId attribute specifies whether the value of Tracing.CorrelationManager.ActivityId should be propagated into grain calls, to support E2E tracing.
            The default is not to propagate ActivityId.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ITraceConfiguration.BulkMessageLimit">
            <summary>
            The BulkMessageLimit attribute specifies how to bulk (aggregate) trace messages with identical erro code.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.NodeConfiguration">
            <summary>
            Individual node-specific silo configuration parameters.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.SiloName">
            <summary>
            The name of this silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.DNSHostName">
            <summary>
            The DNS host name of this silo.
            This is a true host name, no IP address. It is NOT settable, equals Dns.GetHostName().
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.HostNameOrIPAddress">
            <summary>
            The host name or IP address of this silo.
            This is a configurable IP address or Hostname.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.Port">
            <summary>
            The port this silo uses for silo-to-silo communication.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.Generation">
            <summary>
            The epoch generation number for this silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.Endpoint">
            <summary>
            The IPEndPoint this silo uses for silo-to-silo communication.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.AddressType">
            <summary>
            The AddressFamilyof the IP address of this silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.ProxyGatewayEndpoint">
            <summary>
            The IPEndPoint this silo uses for (gateway) silo-to-client communication.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.IsPrimaryNode">
            <summary>
            Whether this is a primary silo (applies for dev settings only).
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.IsSeedNode">
            <summary>
            Whether this is one of the seed silos (applies for dev settings only).
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.IsGatewayNode">
            <summary>
            Whether this is silo is a proxying gateway silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.MaxActiveThreads">
            <summary>
            The MaxActiveThreads attribute specifies the maximum number of simultaneous active threads the scheduler will allow.
            Generally this number should be roughly equal to the number of cores on the node.
            Using a value of 0 will look at System.Environment.ProcessorCount to decide the number instead, which is only valid when set from xml config
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.DelayWarningThreshold">
            <summary>
            The DelayWarningThreshold attribute specifies the work item queuing delay threshold, at which a warning log message is written.
            That is, if the delay between enqueuing the work item and executing the work item is greater than DelayWarningThreshold, a warning log is written.
            The default value is 10 seconds.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.ActivationSchedulingQuantum">
            <summary>
            ActivationSchedulingQuantum is a soft time limit on the duration of activation macro-turn (a number of micro-turns). 
            If a activation was running its micro-turns longer than this, we will give up the thread.
            If this is set to zero or a negative number, then the full work queue is drained (MaxWorkItemsPerTurn allowing).
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.TurnWarningLengthThreshold">
            <summary>
            TurnWarningLengthThreshold is a soft time limit to generate trace warning when the micro-turn executes longer then this period in CPU. 
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.LoadSheddingEnabled">
            <summary>
            The LoadShedding element specifies the gateway load shedding configuration for the node.
            If it does not appear, gateway load shedding is disabled.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.LoadSheddingLimit">
            <summary>
            The LoadLimit attribute specifies the system load, in CPU%, at which load begins to be shed.
            Note that this value is in %, so valid values range from 1 to 100, and a reasonable value is
            typically between 80 and 95.
            This value is ignored if load shedding is disabled, which is the default.
            If load shedding is enabled and this attribute does not appear, then the default limit is 95%.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.LimitManager">
            <summary>
            The values for various silo limits.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.DefaultTraceLevel">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.TraceLevelOverrides">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.TraceToConsole">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.TraceFilePattern">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.TraceFileName">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.LargeMessageWarningThreshold">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.PropagateActivityId">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.BulkMessageLimit">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.StartupTypeName">
            <summary>
            Specifies the name of the Startup class in the configuration file.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.StatisticsMetricsTableWriteInterval">
            <summary>
            The MetricsTableWriteInterval attribute specifies the frequency of updating the metrics in Azure table.
             The default is 30 seconds.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.StatisticsPerfCountersWriteInterval">
            <summary>
            The PerfCounterWriteInterval attribute specifies the frequency of updating the windows performance counters.
            The default is 30 seconds.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.StatisticsLogWriteInterval">
            <summary>
            The LogWriteInterval attribute specifies the frequency of updating the statistics in the log file.
            The default is 5 minutes.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.StatisticsWriteLogStatisticsToTable">
            <summary>
            The WriteLogStatisticsToTable attribute specifies whether log statistics should also be written into a separate, special Azure table.
             The default is yes.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.StatisticsCollectionLevel">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.MinDotNetThreadPoolSize">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.Expect100Continue">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.DefaultConnectionLimit">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.UseNagleAlgorithm">
            <summary>
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ClusterConfiguration">
            <summary>
            Data object holding Silo configuration parameters.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClusterConfiguration.Globals">
            <summary>
            The global configuration parameters that apply uniformly to all silos.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClusterConfiguration.Defaults">
            <summary>
            The default configuration parameters that apply to each and every silo. 
            These can be over-written on a per silo basis.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClusterConfiguration.SourceFile">
            <summary>
            The configuration file.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClusterConfiguration.PrimaryNode">
            <summary>
            The Primary Node IP and port (in dev setting).
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClusterConfiguration.Overrides">
            <summary>
            Per silo configuration parameters overrides.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.#ctor">
            <summary>
            ClusterConfiguration constructor.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.#ctor(System.IO.TextReader)">
            <summary>
            ClusterConfiguration constructor.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.Load(System.IO.TextReader)">
            <summary>
            Loads configuration from a given input text reader.
            </summary>
            <param name="input">The TextReader to use.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.LoadFromFile(System.String)">
            <summary>Loads the configuration from a file</summary>
            <param name="fileName">The file path.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.TryGetNodeConfigurationForSilo(System.String,Orleans.Runtime.Configuration.NodeConfiguration@)">
            <summary>
            Obtains the configuration for a given silo.
            </summary>
            <param name="siloName">Silo name.</param>
            <param name="siloNode">NodeConfiguration associated with the specified silo.</param>
            <returns>true if node was found</returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.CreateNodeConfigurationForSilo(System.String)">
            <summary>
            Creates a configuration node for a given silo.
            </summary>
            <param name="siloName">Silo name.</param>
            <returns>NodeConfiguration associated with the specified silo.</returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.GetOrCreateNodeConfigurationForSilo(System.String)">
            <summary>
            Creates a node config for the specified silo if one does not exist.  Returns existing node if one already exists
            </summary>
            <param name="siloName">Silo name.</param>
            <returns>NodeConfiguration associated with the specified silo.</returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.StandardLoad">
            <summary>
            Loads the configuration from the standard paths
            </summary>
            <returns></returns>
        </member>
        <member name="F:Orleans.Runtime.Configuration.ClusterConfiguration.updatableXml">
            <summary>
            Subset of XML configuration file that is updatable at runtime
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.Update(System.String)">
            <summary>
            Updates existing configuration.
            </summary>
            <param name="input">The input string in XML format to use to update the existing configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.ToString(System.String)">
            <summary>
            Prints the current config for a given silo.
            </summary>
            <param name="siloName">The name of the silo to print its configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.GetLocalIPAddress(System.Net.Sockets.AddressFamily,System.String)">
            <summary>
            Gets the address of the local server.
            If there are multiple addresses in the correct family in the server's DNS record, the first will be returned.
            </summary>
            <returns>The server's IPv4 address.</returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.LocalhostPrimarySilo(System.Int32,System.Int32)">
            <summary>
            Returns a prepopulated ClusterConfiguration object for a primary local silo (for testing)
            </summary>
            <param name="siloPort">TCP port for silo to silo communication</param>
            <param name="gatewayPort">Client gateway TCP port</param>
            <returns>ClusterConfiguration object that can be passed to Silo or SiloHost classes for initialization</returns>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.GetSubLogger(Orleans.Runtime.Logger,System.String,System.String)">
            <summary>
            Finds or creates a logger named after the existing logger with the appended name added.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.Verbose(Orleans.Runtime.Logger,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Verbose severity level.
            Verbose is suitable for debugging information that should usually not be logged in production.
            Verbose is lower than Info.
            </summary>
            <param name="logger">The logger</param>
            <param name="format">A standard format string, suitable for String.Format.</param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.Verbose(Orleans.Runtime.Logger,System.String)">
            <summary>
            Writes a log entry at the Verbose severity level.
            Verbose is suitable for debugging information that should usually not be logged in production.
            Verbose is lower than Info.
            </summary>
            <param name="logger">The logger</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.Verbose2(Orleans.Runtime.Logger,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Verbose2 severity level.
            Verbose2 is lower than Verbose.
            </summary>
            <param name="logger">The logger</param>
            <param name="format">A standard format string, suitable for String.Format.</param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.Verbose2(Orleans.Runtime.Logger,System.String)">
            <summary>
            Writes a log entry at the Verbose2 severity level.
            Verbose2 is lower than Verbose.
            </summary>
            <param name="logger">The logger</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.Verbose3(Orleans.Runtime.Logger,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Verbose3 severity level.
            Verbose3 is the lowest severity level.
            </summary>
            <param name="logger">The logger</param>
            <param name="format">A standard format string, suitable for String.Format.</param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.Verbose3(Orleans.Runtime.Logger,System.String)">
            <summary>
            Writes a log entry at the Verbose3 severity level.
            Verbose3 is the lowest severity level.
            </summary>
            <param name="logger">The logger</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.Info(Orleans.Runtime.Logger,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Info severity level.
            Info is suitable for information that does not indicate an error but that should usually be logged in production.
            Info is lower than Warning.
            </summary>
            <param name="logger">Target logger.</param>
            <param name="format">A standard format string, suitable for String.Format.</param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.Info(Orleans.Runtime.Logger,System.String)">
            <summary>
            Writes a log entry at the Info severity level.
            Info is suitable for information that does not indicate an error but that should usually be logged in production.
            Info is lower than Warning.
            </summary>
            <param name="logger">Target logger.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.Verbose(Orleans.Runtime.Logger,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Verbose severity level, with the specified log id code.
            Verbose is suitable for debugging information that should usually not be logged in production.
            Verbose is lower than Info.
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="format">A standard format string, suitable for String.Format.</param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.Verbose(Orleans.Runtime.Logger,System.Int32,System.String)">
            <summary>
            Writes a log entry at the Verbose severity level, with the specified log id code.
            Verbose is suitable for debugging information that should usually not be logged in production.
            Verbose is lower than Info.
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.Verbose2(Orleans.Runtime.Logger,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Verbose2 severity level, with the specified log id code.
            Verbose2 is lower than Verbose.
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="format">A standard format string, suitable for String.Format.</param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.Verbose2(Orleans.Runtime.Logger,System.Int32,System.String)">
            <summary>
            Writes a log entry at the Verbose2 severity level, with the specified log id code.
            Verbose2 is lower than Verbose.
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.Verbose3(Orleans.Runtime.Logger,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Verbose3 severity level, with the specified log id code.
            Verbose3 is the lowest severity level.
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="format">A standard format string, suitable for String.Format.</param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.Verbose3(Orleans.Runtime.Logger,System.Int32,System.String)">
            <summary>
            Writes a log entry at the Verbose3 severity level, with the specified log id code.
            Verbose3 is the lowest severity level.
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.Info(Orleans.Runtime.Logger,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Info severity level, with the specified log id code.
            Info is suitable for information that does not indicate an error but that should usually be logged in production.
            Info is lower than Warning.
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="format">A standard format string, suitable for String.Format.</param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.Info(Orleans.Runtime.Logger,System.Int32,System.String)">
            <summary>
            Writes a log entry at the Info severity level, with the specified log id code.
            Info is suitable for information that does not indicate an error but that should usually be logged in production.
            Info is lower than Warning.
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.Warn(Orleans.Runtime.Logger,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Warning severity level, with the specified log id code.
            Warning is suitable for problem conditions that the system or application can handle by itself,
            but that the administrator should be aware of.
            Typically these are situations that are expected but that may eventually require an administrative
            response if they recur.
            Warning is lower than Error.
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="format">A standard format string, suitable for String.Format.</param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.Warn(Orleans.Runtime.Logger,System.Int32,System.String,System.Exception)">
            <summary>
            Writes a log entry at the Warning severity level, with the specified log id code.
            Warning is suitable for problem conditions that the system or application can handle by itself,
            but that the administrator should be aware of.
            Typically these are situations that are expected but that may eventually require an administrative
            response if they recur.
            Warning is lower than Error.
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="message">The warning message to log.</param>
            <param name="exception">An exception related to the warning, if any.</param>
        </member>
        <member name="M:Orleans.Runtime.LoggerExtensions.Error(Orleans.Runtime.Logger,System.Int32,System.String,System.Exception)">
            <summary>
            Writes a log entry at the Error severity level, with the specified log id code.
            Error is suitable for problem conditions that require immediate administrative response.
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="message">The error message to log.</param>
            <param name="exception">An exception related to the error, if any.</param>
        </member>
        <member name="T:Orleans.Runtime.LoggerImpl">
            <summary>
            The LoggerImpl class is the internal <see cref="T:Orleans.Runtime.Logger"/> implementation.  It directs log messages to sinks in <see cref="T:Orleans.Runtime.LogManager"/>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.LoggerImpl.SeverityLevel">
            <summary>List of log codes that won't have bulk message compaction policy applied to them</summary>
            <summary>
            The current severity level for this Logger.
            Log entries will be written if their severity is (logically) equal to or greater than this level.
            If it is not explicitly set, then a default value will be calculated based on the logger's type and name.
            Note that changes to the global default settings will be propagated to existing loggers that are using the default severity.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.LoggerImpl.Name">
            <summary>
            Name of logger instance
            </summary>
        </member>
        <member name="M:Orleans.Runtime.LoggerImpl.SetSeverityLevel(Orleans.Runtime.Severity)">
            <summary>
            Set a new severity level for this Logger.
            Log entries will be written if their severity is (logically) equal to or greater than this level.
            </summary>
            <param name="sev">New severity level to be used for filtering log messages.</param>
        </member>
        <member name="M:Orleans.Runtime.LoggerImpl.#ctor(System.String,Orleans.Runtime.LoggerType)">
            <summary>
            Constructs a Logger with the given name and type.
            </summary>
            <param name="source">The name of the source of log entries for this Logger.
            Typically this is the full name of the class that is using this Logger.</param>
            <param name="logType">The category of Logger to create.</param>
        </member>
        <member name="M:Orleans.Runtime.LogFormatter.PrintDate(System.DateTime)">
            <summary>
            Utility function to convert a <c>DateTime</c> object into printable data format used by the Logger subsystem.
            </summary>
            <param name="date">The <c>DateTime</c> value to be printed.</param>
            <returns>Formatted string representation of the input data, in the printable format used by the Logger subsystem.</returns>
        </member>
        <member name="M:Orleans.Runtime.LogFormatter.PrintTime(System.DateTime)">
            <summary>
            Utility function to convert a <c>DateTime</c> object into printable time format used by the Logger subsystem.
            </summary>
            <param name="date">The <c>DateTime</c> value to be printed.</param>
            <returns>Formatted string representation of the input data, in the printable format used by the Logger subsystem.</returns>
        </member>
        <member name="M:Orleans.Runtime.LogFormatter.PrintException(System.Exception)">
            <summary>
            Utility function to convert an exception into printable format, including expanding and formatting any nested sub-expressions.
            </summary>
            <param name="exception">The exception to be printed.</param>
            <returns>Formatted string representation of the exception, including expanding and formatting any nested sub-expressions.</returns>
        </member>
        <member name="T:Orleans.Runtime.LogManager">
            <summary>
            Manages log sinks
            </summary>
        </member>
        <member name="F:Orleans.Runtime.LogManager.MAX_LOG_MESSAGE_SIZE">
            <summary>
            Maximum length of log messages. 
            Log messages about this size will be truncated.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.LogManager.BulkMessageLimit">
            <summary>
            Count limit for bulk message output.
            If the same log code is written more than <c>BulkMessageLimit</c> times in the <c>BulkMessageInterval</c> time period, 
            then only the first <c>BulkMessageLimit</c> individual messages will be written, plus a count of how bulk messages suppressed.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.LogManager.BulkMessageInterval">
            <summary>
            Time limit for bulk message output.
            If the same log code is written more than <c>BulkMessageLimit</c> times in the <c>BulkMessageInterval</c> time period, 
            then only the first <c>BulkMessageLimit</c> individual messages will be written, plus a count of how bulk messages suppressed.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.LogManager.LogConsumers">
            <summary>
            The set of <see cref="T:Orleans.Runtime.ILogConsumer"/> references to write log events to. 
            </summary>
        </member>
        <member name="P:Orleans.Runtime.LogManager.TelemetryConsumers">
            <summary>
            The set of <see cref="T:Orleans.Runtime.ITelemetryConsumer"/> references to write telemetry events to. 
            </summary>
        </member>
        <member name="F:Orleans.Runtime.LogManager.ShowDate">
            <summary>
            Flag to suppress output of dates in log messages during unit test runs
            </summary>
        </member>
        <member name="F:Orleans.Runtime.LogManager.excludedBulkLogCodes">
            <summary>List of log codes that won't have bulk message compaction policy applied to them</summary>
        </member>
        <member name="P:Orleans.Runtime.LogManager.IsInitialized">
            <summary>
            Whether the Orleans Logger infrastructure has been previously initialized.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.LogManager.Initialize(Orleans.Runtime.Configuration.ITraceConfiguration,System.Boolean)">
            <summary>
            Initialize the Orleans Logger subsystem in this process / app domain with the specified configuration settings.
            </summary>
            <remarks>
            In most cases, this call will be made automatically at the approproate poine by the Orleans runtime 
            -- must commonly during silo initialization and/or client runtime initialization.
            </remarks>
            <seealso cref="M:Orleans.GrainClient.Initialize"/>
            <seealso cref="!:Orleans.Host.Azure.Client.AzureClient.Initialize()"/>
            <param name="config">Configuration settings to be used for initializing the Logger susbystem state.</param>
            <param name="configChange">Indicates an update to existing config settings.</param>
        </member>
        <member name="M:Orleans.Runtime.LogManager.UnInitialize">
            <summary>
            Uninitialize the Orleans Logger subsystem in this process / app domain.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.LogManager.FindLogger(System.String)">
            <summary>
            Find the Logger with the specified name
            </summary>
            <param name="loggerName">Name of the Logger to find</param>
            <returns>Logger associated with the specified name</returns>
        </member>
        <member name="M:Orleans.Runtime.LogManager.GetLogger(System.String,Orleans.Runtime.LoggerType)">
            <summary>
            Find existing or create new Logger with the specified name
            </summary>
            <param name="loggerName">Name of the Logger to find</param>
            <param name="logType">Type of Logger, if it needs to be created</param>
            <returns>Logger associated with the specified name</returns>
        </member>
        <member name="M:Orleans.Runtime.LogManager.SetRuntimeLogLevel(Orleans.Runtime.Severity)">
            <summary>
            Set the default log level of all Runtime Loggers.
            </summary>
            <param name="severity">The new log level to use</param>
        </member>
        <member name="M:Orleans.Runtime.LogManager.SetAppLogLevel(Orleans.Runtime.Severity)">
            <summary>
            Set the default log level of all Grain and Application Loggers.
            </summary>
            <param name="severity">The new log level to use</param>
        </member>
        <member name="M:Orleans.Runtime.LogManager.SetTraceLevelOverrides(System.Collections.Generic.IList{System.Tuple{System.String,Orleans.Runtime.Severity}})">
            <summary>
            Set new trace level overrides for particular loggers, beyond the default log levels.
            Any previous trace levels for particular Logger's will be discarded.
            </summary>
            <param name="overrides">The new set of log level overrided to use.</param>
        </member>
        <member name="M:Orleans.Runtime.LogManager.AddTraceLevelOverride(System.String,Orleans.Runtime.Severity)">
            <summary>
            Add a new trace level override for a particular logger, beyond the default log levels.
            Any previous trace levels for other Logger's will not be changed.
            </summary>
            <param name="prefix">The logger names (with prefix matching) that this new log level should apply to.</param>
            <param name="level">The new log level to use for this logger.</param>
        </member>
        <member name="M:Orleans.Runtime.LogManager.RemoveTraceLevelOverride(System.String)">
            <summary>
            Remove a new trace level override for a particular logger.
            The log level for that logger will revert to the current global default setings.
            Any previous trace levels for other Logger's will not be changed.
            </summary>
            <param name="prefix">The logger names (with prefix matching) that this new log level change should apply to.</param>
        </member>
        <member name="M:Orleans.Runtime.LogManager.Flush">
            <summary>
            Attempt to flush any pending trace log writes to disk / backing store
            </summary>
        </member>
        <member name="M:Orleans.Runtime.LogManager.CreateMiniDump(Orleans.Runtime.MiniDumpType)">
            <summary>
            Create a mini-dump file for the current state of this process
            </summary>
            <param name="dumpType">Type of mini-dump to create</param>
            <returns><c>FileInfo</c> for the location of the newly created mini-dump file</returns>
        </member>
        <member name="T:Orleans.Runtime.LogManager.TraceOverrideComparer">
            <summary>
            This custom comparer lets us sort the TraceLevelOverrides list so that the longest prefix comes first
            </summary>
        </member>
        <member name="T:Orleans.Runtime.TypeFormattingOptions">
            <summary>
            Options for formatting type names.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TypeFormattingOptions.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Char,System.Boolean)">
            <summary>Initializes a new instance of <see cref="T:Orleans.Runtime.TypeFormattingOptions"/>.</summary>
        </member>
        <member name="P:Orleans.Runtime.TypeFormattingOptions.IncludeNamespace">
            <summary>
            Gets a value indicating whether or not to include the fully-qualified namespace of the class in the result.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TypeFormattingOptions.IncludeTypeParameters">
            <summary>
            Gets a value indicating whether or not to include concrete type parameters in the result.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TypeFormattingOptions.IncludeGenericTypeParameters">
            <summary>
            Gets a value indicating whether or not to include generic type parameters in the result.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TypeFormattingOptions.NestedTypeSeparator">
            <summary>
            Gets the separator used between declaring types and their declared types.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TypeFormattingOptions.NameSuffix">
            <summary>
            Gets the name to append to the formatted name, before any type parameters.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TypeFormattingOptions.IncludeGlobal">
            <summary>
            Gets a value indicating whether or not to include the global namespace qualifier.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TypeFormattingOptions.Equals(Orleans.Runtime.TypeFormattingOptions)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the specified object  is equal to the current object; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeFormattingOptions.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            <see langword="true"/> if the specified object  is equal to the current object; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeFormattingOptions.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeFormattingOptions.op_Equality(Orleans.Runtime.TypeFormattingOptions,Orleans.Runtime.TypeFormattingOptions)">
            <summary>Determines whether the specified objects are equal.</summary>
        </member>
        <member name="M:Orleans.Runtime.TypeFormattingOptions.op_Inequality(Orleans.Runtime.TypeFormattingOptions,Orleans.Runtime.TypeFormattingOptions)">
            <summary>Determines whether the specified objects are not equal.</summary>
        </member>
        <member name="T:Orleans.Runtime.Placement.IPlacementDirector">
            <summary>
            Interface for placement directors.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Placement.IPlacementDirector`1">
            <summary>
            Interface for placement directors implementing the specified strategy.
            </summary>
            <typeparam name="TStrategy">The placement strategy which this director implements.</typeparam>
        </member>
        <member name="M:Orleans.Runtime.IGrainReferenceConverter.GetGrainFromKeyString(System.String)">
            <summary>
            Creates a grain reference from a storage key string.
            </summary>
            <param name="key">The key string.</param>
            <returns>The newly created grain reference.</returns>
        </member>
        <member name="T:Orleans.Runtime.ILocalSiloDetails">
            <summary>
            Details of the local silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ILocalSiloDetails.Name">
            <summary>
            Gets the name of this silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ILocalSiloDetails.SiloAddress">
            <summary>
            Gets the address of this silo's inter-silo endpoint.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IRingRange.InRange(System.UInt32)">
            <summary>
            Check if <paramref name="n"/> is our responsibility to serve
            </summary>
            <returns>true if the reminder is in our responsibility range, false otherwise</returns>
        </member>
        <member name="P:Orleans.Runtime.ISingleRange.Begin">
            <summary>
            Exclusive
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ISingleRange.End">
            <summary>
            Inclusive
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SingleRange.Begin">
            <summary>
            Exclusive
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SingleRange.End">
            <summary>
            Inclusive
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SingleRange.InRange(System.UInt32)">
            <summary>
            checks if n is element of (Begin, End], while remembering that the ranges are on a ring
            </summary>
            <param name="n"></param>
            <returns>true if n is in (Begin, End], false otherwise</returns>
        </member>
        <member name="T:Orleans.Runtime.OrleansException">
            <summary>
            An exception class used by the Orleans runtime for reporting errors.
            </summary>
            <remarks>
            This is also the base class for any more specific exceptions 
            raised by the Orleans runtime.
            </remarks>
        </member>
        <member name="T:Orleans.Runtime.GatewayTooBusyException">
            <summary>
            Signifies that a gateway silo is currently in overloaded / load shedding state 
            and is unable to currently accept this message being sent.
            </summary>
            <remarks>
            This situation is usaully a transient condition.
            The message is likely to be accepted by this or another gateway if it is retransmitted at a later time.
            </remarks>
        </member>
        <member name="T:Orleans.Runtime.LimitExceededException">
            <summary>
            Signifies that a silo is in an overloaded state where some 
            runtime limit setting is currently being exceeded, 
            and so that silo is unable to currently accept this message being sent.
            </summary>
            <remarks>
            This situation is often a transient condition.
            The message is likely to be accepted by this or another silo if it is retransmitted at a later time.
            </remarks>
        </member>
        <member name="T:Orleans.Runtime.DeadlockException">
            <summary>
            Signifies that a silo has detected a deadlock / loop in a call graph.
            </summary>
            <remarks>
            <para>
            Deadlock detection is not enabled by default in Orleans silos, 
            because it introduces some extra overhead in call handling.
            </para>
            <para>
            There are some constraints on the types of deadlock that can currently be detected 
            by Orleans silos.
            </para>
            </remarks>
        </member>
        <member name="T:Orleans.Runtime.GrainExtensionNotInstalledException">
            <summary>
            Signifies that an attempt was made to invoke a grain extension method on a grain where that extension was not installed.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.SiloUnavailableException">
            <summary>
            Signifies that an request was cancelled due to target silo unavailability.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.InvalidSchedulingContextException">
            <summary>
            Signifies that an operation was attempted on an invalid SchedulingContext.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ClientNotAvailableException">
            <summary>
            Indicates that a client is not longer reachable.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainReferenceNotBoundException">
            <summary>
            Indicates that a <see cref="T:Orleans.Runtime.GrainReference"/> was not bound to the runtime before being used.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.OrleansMessageRejectionException">
            <summary>
            Indicates that an Orleans message was rejected.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GuidId">
            <summary>
            Wrapper object around Guid.
            Can be used in places where Guid is optional and in those cases it can be set to null and will not use the storage of an empty Guid struct.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IncomingMessageBuffer.AdjustBuffer">
            <summary>
            This call cleans up the buffer state to make it optimal for next read.
            The leading chunks, used by any processed messages, are removed from the front
              of the buffer and added to the back.   Decode and receiver offsets are adjusted accordingly.
            If the buffer was grown over the max sustained buffer size (to read a large message) it is shrunken.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IAddressable">
            <summary>
            Marker interface for addressable endpoints, such as grains, observers, and other system-internal addressable endpoints
            </summary>
        </member>
        <member name="M:Orleans.Runtime.AssemblyLoader.LoadAssemblies(System.Collections.Generic.Dictionary{System.String,System.IO.SearchOption},System.Collections.Generic.IEnumerable{Orleans.Runtime.AssemblyLoaderPathNameCriterion},System.Collections.Generic.IEnumerable{Orleans.Runtime.AssemblyLoaderReflectionCriterion},Orleans.Runtime.Logger)">
            <summary>
            Loads assemblies according to caller-defined criteria.
            </summary>
            <param name="dirEnumArgs">A list of arguments that are passed to Directory.EnumerateFiles(). 
                The sum of the DLLs found from these searches is used as a base set of assemblies for
                criteria to evaluate.</param>
            <param name="pathNameCriteria">A list of criteria that are used to disqualify
                assemblies from being loaded based on path name alone (e.g.
                AssemblyLoaderCriteria.ExcludeFileNames) </param>
            <param name="reflectionCriteria">A list of criteria that are used to identify
                assemblies to be loaded based on examination of their ReflectionOnly type
                information (e.g. AssemblyLoaderCriteria.LoadTypesAssignableFrom).</param>
            <param name="logger">A logger to provide feedback to.</param>
            <returns>List of discovered assembly locations</returns>
        </member>
        <member name="T:Orleans.Runtime.UniqueKey.Category">
            <summary>
            Type id values encoded into UniqueKeys
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IGrainRuntime">
            <summary>
            The gateway of the <see cref="T:Orleans.Grain"/> to the Orleans runtime. The <see cref="T:Orleans.Grain"/> should only interact with the runtime through this interface.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainRuntime.ServiceId">
            <summary>
            Provides the ServiceId this cluster is running as.
            ServiceId's are intended to be long lived Id values for a particular service which will remain constant 
            even if the service is started / redeployed multiple times during its operations life.
            </summary>
            <returns>ServiceID Guid for this service.</returns>
        </member>
        <member name="P:Orleans.Runtime.IGrainRuntime.SiloIdentity">
            <summary>
            A unique identifier for the current silo.
            There is no semantic content to this string, but it may be useful for logging.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IKeyedServiceCollection`2">
            <summary>
            Collection of services that can be disambiguated by key
            </summary>
        </member>
        <member name="M:Orleans.Runtime.KeyedServiceExtensions.GetServiceByKey``2(System.IServiceProvider,``0)">
            <summary>
            Acquire a service by key.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.KeyedServiceExtensions.GetServiceByName``1(System.IServiceProvider,System.String)">
            <summary>
            Acquire a service by name.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IStreamProviderManagerAgent">
            <summary>
            IStreamProviderManagerAgent interface that defines interface for runtime adding/removing stream providers.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ITelemetryConsumer">
            <summary>
            Marker interface for all Telemetry Consumers
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Severity">
            <summary> Severity levels for log messages. </summary>
        </member>
        <member name="M:Orleans.Runtime.TraceParserUtils.FormatLogMessage(Orleans.Runtime.Severity,Orleans.Runtime.LoggerType,System.String,System.String,System.Net.IPEndPoint,System.Exception,System.Int32)">
            <summary>
            The method to call during logging.
            This method should be very fast, since it is called synchronously during Orleans logging.
            </summary>
            <remarks>
            To customize functionality in a log writter derived from this base class, 
            you should override the <c>FormatLogMessage</c> and/or <c>WriteLogMessage</c> 
            methods rather than overriding this method directly.
            </remarks>
            <param name="severity">The severity of the message being traced.</param>
            <param name="loggerType">The type of logger the message is being traced through.</param>
            <param name="caller">The name of the logger tracing the message.</param>
            <param name="myIPEndPoint">The <see cref="T:System.Net.IPEndPoint"/> of the Orleans client/server if known. May be null.</param>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to log. May be null.</param>
            <param name="errorCode">Numeric event code for this log entry. May be zero, meaning 'Unspecified'.</param>
        </member>
        <member name="M:Orleans.Runtime.TraceParserUtils.FormatLogMessage(System.DateTime,Orleans.Runtime.Severity,Orleans.Runtime.LoggerType,System.String,System.String,System.Net.IPEndPoint,System.Exception,System.Int32)">
            <summary>The method to call during logging to format the log info into a string ready for output.</summary>
            <param name="timestamp">Timestamp of the log message.</param>
            <param name="severity">The severity of the message being traced.</param>
            <param name="loggerType">The type of logger the message is being traced through.</param>
            <param name="caller">The name of the logger tracing the message.</param>
            <param name="myIPEndPoint">The <see cref="T:System.Net.IPEndPoint"/> of the Orleans client/server if known. May be null.</param>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to log. May be null.</param>
            <param name="errorCode">Numeric event code for this log entry. May be zero, meaning 'Unspecified'.</param>
        </member>
        <member name="M:Orleans.Runtime.IMultiClusterGossipService.Publish(Orleans.Runtime.IMultiClusterGossipData,System.Boolean)">
            <summary>One-way small-scale gossip: send partial data to recipient</summary>
            <param name="gossipData">The gossip data</param>
            <param name="forwardLocally">Whether to forward the changes to local silos</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IMultiClusterGossipService.Synchronize(Orleans.Runtime.IMultiClusterGossipData)">
            <summary>
            Two-way bulk gossip: send all known data to recipient, and receive all unknown data
            </summary>
            <param name="gossipData">The pushed gossip data</param>
            <returns>The returned gossip data</returns>
        </member>
        <member name="M:Orleans.Runtime.IMultiClusterGossipService.FindLaggingSilos(Orleans.MultiCluster.MultiClusterConfiguration,System.Boolean)">
            <summary>
            Find silos whose configuration does not match the expected configuration.
            </summary>
            <param name="expected">the configuration to compare with</param>
            <param name="forwardLocally">whether to recursively include all silos in the same cluster</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.IRuntimeClient">
            <summary>
            The IRuntimeClient interface defines a subset of the runtime API that is exposed to both silo and client.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IRuntimeClient.InternalGrainFactory">
            <summary>
            Grain Factory to get and cast grain references.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IRuntimeClient.AppLogger">
            <summary>
            Provides client application code with access to an Orleans logger.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IRuntimeClient.CurrentActivationIdentity">
            <summary>
            A unique identifier for the current client.
            There is no semantic content to this string, but it may be useful for logging.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IRuntimeClient.ServiceProvider">
            <summary>
            Gets the service provider.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IRuntimeClient.ClientInvokeCallback">
            <summary>
            Global pre-call interceptor function
            Synchronous callback made just before a message is about to be constructed and sent by a client to a grain.
            This call will be made from the same thread that constructs the message to be sent, so any thread-local settings
            such as <c>Orleans.RequestContext</c> will be picked up.
            The action receives an <see cref="T:Orleans.CodeGeneration.InvokeMethodRequest"/> with details of the method to be invoked, including InterfaceId and MethodId,
            and a <see cref="T:Orleans.IGrain"/> which is the GrainReference this request is being sent through
            </summary>
            <remarks>This callback method should return promptly and do a minimum of work, to avoid blocking calling thread or impacting throughput.</remarks>
        </member>
        <member name="M:Orleans.Runtime.IRuntimeClient.GetResponseTimeout">
            <summary>
            Get the current response timeout setting for this client.
            </summary>
            <returns>Response timeout value</returns>
        </member>
        <member name="M:Orleans.Runtime.IRuntimeClient.SetResponseTimeout(System.TimeSpan)">
            <summary>
            Sets the current response timeout setting for this client.
            </summary>
            <param name="timeout">New response timeout value</param>
        </member>
        <member name="T:Orleans.Runtime.IGrainExtension">
            <summary>
            Marker interface for grain extensions, used by internal runtime extension endpoints
            </summary>
        </member>
        <member name="T:Orleans.Runtime.StageAnalysis">
            <summary>
            Stage analysis, one instance should exist in each Silo
            </summary>
        </member>
        <member name="M:Orleans.Runtime.StageAnalysis.GetTotalCPU">
            <summary>
            get all cpu used by all types of threads
            </summary>
            <returns> milliseconds of total cpu time </returns>
        </member>
        <member name="M:Orleans.Runtime.StageAnalysis.GetMaxWallClock">
            <summary>
            gets total wallclock which is the wallclock of the stage with maximum wallclock time
            </summary>
        </member>
        <member name="M:Orleans.Runtime.StageAnalysis.GetNumberOfRequests(System.String)">
            <summary>
            get number of requests for a stage
            </summary>
            <param name="stageName">name of a stage from thread tracking statistics</param>
            <returns>number of requests</returns>
        </member>
        <member name="M:Orleans.Runtime.StageAnalysis.GetWallClockPerStagePerRequest(System.String)">
            <summary>
            get wall clock time for a request of a stage
            </summary>
            <param name="stageName">name of a stage from thread tracking statistics</param>
            <returns>average milliseconds of wallclock time per request</returns>
        </member>
        <member name="M:Orleans.Runtime.StageAnalysis.GetCpuPerStagePerRequest(System.String)">
            <summary>
            get cpu time for a request of a stage
            </summary>
            <param name="stageName">name of a stage from thread tracking statistics</param>
            <returns>average milliseconds of cpu time per request</returns>
        </member>
        <member name="M:Orleans.Runtime.IConsistentRingProviderForGrains.GetMyRange">
            <summary>
            Get the responsibility range of the current silo
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IConsistentRingProviderForGrains.SubscribeToRangeChangeEvents(Orleans.Runtime.IAsyncRingRangeListener)">
            <summary>
            Subscribe to receive range change notifications
            </summary>
            <param name="observer">An observer interface to receive range change notifications.</param>
            <returns>bool value indicating that subscription succeeded or not.</returns>
        </member>
        <member name="M:Orleans.Runtime.IConsistentRingProviderForGrains.UnSubscribeFromRangeChangeEvents(Orleans.Runtime.IAsyncRingRangeListener)">
            <summary>
            Unsubscribe from receiving range change notifications
            </summary>
            <param name="observer">An observer interface to receive range change notifications.</param>
            <returns>bool value indicating that unsubscription succeeded or not</returns>
        </member>
        <member name="M:Orleans.Runtime.AssemblyLoaderReflectionCriterion.NewCriterion(Orleans.Runtime.AssemblyLoaderReflectionCriterion.AssemblyPredicate)">
            <summary>
            Create a new criterion that filters assemblies by predicate. 
            </summary>
            <param name="assemblyPredicate">A predicate which accepts an assembly an an argument. If this predicate returns true, the assembly will loaded and further inspection of the assembly with halt. If this predicate returns false, the predicate must provide a complaint explaining why the assembly does not meet the criterion described by the predicate.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">assemblyPredicate is null.</exception>
        </member>
        <member name="M:Orleans.Runtime.AssemblyLoaderReflectionCriterion.NewCriterion(Orleans.Runtime.AssemblyLoaderReflectionCriterion.TypePredicate,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new criterion that filters assemblies by predicate. 
            </summary>
            <param name="typePredicate">A predicate which accepts a reflection-only type as an argument. If this predicate returns true, the assembly that provides the specified type will loaded and further inspection of the assembly with halt. If this predicate returns false, the predicate may provide a complaint explaining why the assembly does not meet the criterion described by the predicate.</param>
            <param name="defaultComplaints">If no predicate provides a complaint, then these default complaints are logged instead.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">assemblyPredicate is null.</exception>
        </member>
        <member name="M:Orleans.Runtime.AssemblyLoaderReflectionCriterion.NewCriterion(Orleans.Runtime.AssemblyLoaderReflectionCriterion.TypePredicate,System.String)">
            <summary>
            Create a new criterion that filters assemblies by predicate. 
            </summary>
            <param name="typePredicate">A predicate which accepts a reflection-only type as an argument. If this predicate returns true, the assembly that provides the specified type will loaded and further inspection of the assembly with halt. If this predicate returns false, the predicate may provide a complaint explaining why the assembly does not meet the criterion described by the predicate.</param>
            <param name="defaultComplaint">If no predicate provides a complaint, then this default complaint is logged instead.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">assemblyPredicate is null.</exception>        
        </member>
        <member name="T:Orleans.Runtime.AssemblyLoaderCriterion">
            <summary>
            A subsystem interested in loading additional assemblies passes an instance
            of AssemblyLoadCriterion to AssemblyLoader.QualifySearch to ensure that
            assemblies that meet a given criterion are loaded into memory.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.AssemblyLoaderCriterion.Predicate">
            <summary>
            An AssemblyLoadCriterion wraps a delegate where the predicate logic is implemented.
            </summary>
            <param name="complaints">If the candidate is not interesting to the subsystem that
            registered the criterion, the predicate must supply a complaint-- i.e. a message
            describing why the assembly wasn't interesting to the subsystem.</param>
            <param name="input">This either an absolute path name in the case of exclusion
            criteria, or an Assembly object in the case of load criterion.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.AssemblyLoaderCriterion.EvaluateCandidate(System.Object,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            AssemblyLoader invokes this wrapper for predicate when it needs to know whether an
            assembly is interesting to a subsystem that registered a criterion.
            </summary>
            <param name="complaints">The complaint, if the return value is *false*</param>
            <param name="input">The argument.</param>
            <returns>If T is a string, *false* indicates that the path name should be excluded from loading.
            If T is an assembly object, *true* indicates that the assembly should be loaded.</returns>
            <exception cref="T:System.InvalidOperationException">
            The predicate must provide a substantive complaint string if it returns *false*.</exception>
        </member>
        <member name="T:Orleans.Runtime.TimeIntervalThreadCycleCounterBased">
            <summary>
            Stopwatch for CPU time of a thread.
            You must only use Start, Stop, and Restart from thread being measured!
            CANNOT call this class from a different thread that is not the currently executing thread.
            Otherwise, QueryThreadCycleTime returns undefined (garbage) results.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TimeIntervalThreadCycleCounterBased.Elapsed">
            <summary>
            Obtain current time of stopwatch since last Stop method. You may call this from any thread.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TimeIntervalThreadCycleCounterBased.#ctor">
            <summary>
            Create thread CPU timing object. You may call this from a thread outside the one you wish to measure.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TimeIntervalThreadCycleCounterBased.Start">
            <summary>
            Start measuring time thread is using CPU. Must invoke from thread to be measured!
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TimeIntervalThreadCycleCounterBased.Restart">
            <summary>
            Restart measuring time thread is using CPU. Must invoke from thread to be measured!
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TimeIntervalThreadCycleCounterBased.Stop">
            <summary>
            Stop measuring time thread is using CPU. Must invoke from thread to be measured!
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ServiceCollectionExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ServiceCollectionExtensions.AddFromExisting``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Attempts to use an existing registration of <typeparamref name="TImplementation"/> to satisfy the service type <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The service type being provided.</typeparam>
            <typeparam name="TImplementation">The implementation of <typeparamref name="TService"/>.</typeparam>
            <param name="services">The service collection.</param>
        </member>
        <member name="P:Orleans.Runtime.DefaultPlacementStrategy.PlacementStrategy">
            <summary>
            Gets the default placement strategy.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ThreadTrackingStatistic.#ctor(System.String)">
            <summary>
            Keep track of thread statistics, mainly timing, can be created outside the thread to be tracked.
            </summary>
            <param name="threadName">Name used for logging the collected stastistics</param>
        </member>
        <member name="M:Orleans.Runtime.ThreadTrackingStatistic.OnStartExecution">
            <summary>
            Call once when the thread is started, must be called from the thread being tracked
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ThreadTrackingStatistic.OnStopExecution">
            <summary>
            Call once when the thread is stopped, must be called from the thread being tracked
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ThreadTrackingStatistic.OnStartProcessing">
            <summary>
            Call once before processing a request, must be called from the thread being tracked
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ThreadTrackingStatistic.OnStopProcessing">
            <summary>
            Call once after processing multiple requests as a batch or a single request, must be called from the thread being tracked
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ThreadTrackingStatistic.IncrementNumberOfProcessed(System.Int32)">
            <summary>
            Call once to just increment the stastistic of processed requests
            </summary>
            <param name="num">Number of processed requests</param>
        </member>
        <member name="T:Orleans.Runtime.GrainInterfaceMap">
            <summary>
            Internal data structure that holds a grain interfaces to grain classes map.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainInterfaceMap.GrainInterfaceData">
            <summary>
            Metadata for a grain interface
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainClassData">
            <summary>
            Metadata for a grain class
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IClusterTypeManager">
            <summary>
            Client gateway interface for obtaining the grain interface/type map.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IClusterTypeManager.GetClusterTypeCodeMap">
            <summary>
            Acquires grain interface map for all grain types supported across the entire cluster
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ISiloTypeManager.GetSiloTypeCodeMap">
            <summary>
            Acquires grain interface map for all grain types supported by hosted silo.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.HistogramValueStatistic">
            <summary>
            Abstract class for histgram value statistics, instantiate either HistogramValueStatistic or LinearHistogramValueStatistic
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ExponentialHistogramValueStatistic">
            <summary>
            Histogram created where buckets grow exponentially
            </summary>
        </member>
        <member name="T:Orleans.Runtime.LinearHistogramValueStatistic">
            <summary>
            Histogram created where buckets are uniform size
            </summary>
        </member>
        <member name="M:Orleans.Runtime.FloatValueStatistic.GetCurrentValue">
            <summary>
            Returns the current value
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orleans.Runtime.RuntimeStatisticsGroup.TotalPhysicalMemory">
            
             <summary>Amount of physical memory on the machine</summary>
            
        </member>
        <member name="P:Orleans.Runtime.RuntimeStatisticsGroup.AvailableMemory">
            
             <summary>Amount of memory available to processes running on the machine</summary>
            
        </member>
        <member name="T:Orleans.Runtime.ICatalog">
            <summary>
            Remote interface to grain and activation state
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ICatalog.DeleteActivations(System.Collections.Generic.List{Orleans.Runtime.ActivationAddress})">
            <summary>
            Delete activations from this silo
            </summary>
            <param name="activationAddresses"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.IManagementGrain">
            <summary>
            Interface for system management functions of silos, 
            exposed as a grain for receiving remote requests / commands.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetHosts(System.Boolean)">
            <summary>
            Get the list of silo hosts and statuses currently known about in this cluster.
            </summary>
            <param name="onlyActive">Whether data on just current active silos should be returned, 
            or by default data for all current and previous silo instances [including those in Joining or Dead status].</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetDetailedHosts(System.Boolean)">
            <summary>
            Get the list of silo hosts and membership information currently known about in this cluster.
            </summary>
            <param name="onlyActive">Whether data on just current active silos should be returned, 
            or by default data for all current and previous silo instances [including those in Joining or Dead status].</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.SetSystemLogLevel(Orleans.Runtime.SiloAddress[],System.Int32)">
            <summary>
            Set the current log level for system runtime components.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <param name="traceLevel">New log level to use.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.SetAppLogLevel(Orleans.Runtime.SiloAddress[],System.Int32)">
            <summary>
            Set the current log level for application grains.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <param name="traceLevel">New log level to use.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.SetLogLevel(Orleans.Runtime.SiloAddress[],System.String,System.Int32)">
            <summary>
            Set the current log level for a particular Logger, by name (with prefix matching).
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <param name="logName">Name of the Logger (with prefix matching) to change.</param>
            <param name="traceLevel">New log level to use.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.ForceGarbageCollection(Orleans.Runtime.SiloAddress[])">
            <summary>
            Perform a run of the .NET garbage collector in the specified silos.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.ForceActivationCollection(Orleans.Runtime.SiloAddress[],System.TimeSpan)">
            <summary>Perform a run of the Orleans activation collecter in the specified silos.</summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <param name="ageLimit">Maximum idle time of activations to be collected.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.ForceRuntimeStatisticsCollection(Orleans.Runtime.SiloAddress[])">
            <summary>Perform a run of the silo statistics collector in the specified silos.</summary>
            <param name="siloAddresses">List of silos this command is to be sent to.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetRuntimeStatistics(Orleans.Runtime.SiloAddress[])">
            <summary>
            Return the most recent silo runtime statistics information for the specified silos.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetSimpleGrainStatistics(Orleans.Runtime.SiloAddress[])">
            <summary>
            Return the most recent grain statistics information, amalgomated across silos.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetSimpleGrainStatistics">
            <summary>
            Return the most recent grain statistics information, amalgomated across all silos.
            </summary>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetDetailedGrainStatistics(System.String[],Orleans.Runtime.SiloAddress[])">
            <summary>
            Returns the most recent detailed grain statistics information, amalgomated across silos for the specified types.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <param name="types">Array of grain types to filter the results with</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetTotalActivationCount">
            <summary>
            Return the total count of all current grain activations across all silos.
            </summary>
            <returns>Completion promise for this operation.</returns>
            
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.SendControlCommandToProvider(System.String,System.String,System.Int32,System.Object)">
            <summary>
            Execute a control command on the specified providers on all silos in the cluster.
            Commands are sent to all known providers on each silo which match both the <c>providerTypeFullName</c> AND <c>providerName</c> parameters.
            </summary>
            <remarks>
            Providers must implement the <c>Orleans.Providers.IControllable</c> 
            interface in order to receive these control channel commands.
            </remarks>
            <param name="providerTypeFullName">Class full name for the provider type to send this command to.</param>
            <param name="providerName">Provider name to send this command to.</param>
            <param name="command">An id / serial number of this command. 
            This is an opaque value to the Orleans runtime - the control protocol semantics are decided between the sender and provider.</param>
            <param name="arg">An opaque command argument.
            This is an opaque value to the Orleans runtime - the control protocol semantics are decided between the sender and provider.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.UpdateConfiguration(Orleans.Runtime.SiloAddress[],System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Update the configuration information dynamically. Only a subset of configuration information
            can be updated - will throw an error (and make no config changes) if you specify attributes
            or elements that cannot be changed. The configuration format is XML, in the same format
            as the OrleansConfiguration.xml file. The allowed elements and attributes are:
            <pre>
            &lt;OrleansConfiguration&gt;
                &lt;Globals&gt;
                    &lt;Messaging ResponseTimeout=&quot;?&quot;/&gt;
                    &lt;Caching CacheSize=&quot;?&quot;/&gt;
                    &lt;Activation CollectionInterval=&quot;?&quot; CollectionAmount=&quot;?&quot; CollectionTotalMemoryLimit=&quot;?&quot; CollectionActivationLimit=&quot;?&quot;/&gt;
                    &lt;Liveness ProbeTimeout=&quot;?&quot; TableRefreshTimeout=&quot;?&quot; NumMissedProbesLimit=&quot;?&quot;/&gt;
                &lt;/Globals&gt;
                &lt;Defaults&gt;
                    &lt;LoadShedding Enabled=&quot;?&quot; LoadLimit=&quot;?&quot;/&gt;
                    &lt;Tracing DefaultTraceLevel=&quot;?&quot; PropagateActivityId=&quot;?&quot;&gt;
                        &lt;TraceLevelOverride LogPrefix=&quot;?&quot; TraceLevel=&quot;?&quot;/&gt;
                    &lt;/Tracing&gt;
                &lt;/Defaults&gt;
            &lt;/OrleansConfiguration&gt;
            </pre>
            </summary>
            <param name="hostIds">Silos to update, or null for all silos</param>
            <param name="configuration">XML elements and attributes to update</param>
            <param name="tracing">Tracing level settings</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.UpdateStreamProviders(Orleans.Runtime.SiloAddress[],System.Collections.Generic.IDictionary{System.String,Orleans.Runtime.Configuration.ProviderCategoryConfiguration})">
            <summary>
            Update the stream providers dynamically. The stream providers in the listed silos will be 
            updated based on the differences between its loaded stream providers and the list of providers 
            in the streamProviderConfigurations: If a provider in the configuration object already exists 
            in the silo, it will be kept as is; if a provider in the configuration object does not exist 
            in the silo, it will be loaded and started; if a provider that exists in silo but is not in 
            the configuration object, it will be stopped and removed from the silo. 
            </summary>
            <param name="hostIds">Silos to update, or null for all silos</param>
            <param name="streamProviderConfigurations">stream provider configurations that carries target stream providers</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetActiveGrainTypes(Orleans.Runtime.SiloAddress[])">
            <summary>
            Returns an array of all the active grain types in the system
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetMultiClusterGateways">
            <summary>
            Get the current list of multicluster gateways.
            </summary>
            <returns>A list of the currently known gateways</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetMultiClusterConfiguration">
            <summary>
            Get the current multicluster configuration.
            </summary>
            <returns>The current multicluster configuration, or null if there is none</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.FindLaggingSilos">
            <summary>
            Contact all silos in all clusters and return silos that do not have the latest multi-cluster configuration. 
            If some clusters and/or silos cannot be reached, an exception is thrown.
            </summary>
            <returns>A list of silo addresses of silos that do not have the latest configuration</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.InjectMultiClusterConfiguration(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Configure the active multi-cluster, by injecting a multicluster configuration.
            </summary>
            <param name="clusters">the clusters that should be part of the active configuration</param>
            <param name="comment">a comment to store alongside the configuration</param>
            <param name="checkForLaggingSilosFirst">if true, checks that all clusters are reachable and up-to-date before injecting the new configuration</param>
            <returns> The task completes once information has propagated to the gossip channels</returns>
        </member>
        <member name="M:Orleans.Runtime.IMembershipService.SiloStatusChangeNotification(Orleans.Runtime.SiloAddress,Orleans.Runtime.SiloStatus)">
            <summary>
            Receive notifications about silo status events. 
            </summary>
            <param name="updatedSilo">Silo to update about</param>
            <param name="status">Status of the silo</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IMembershipService.Ping(System.Int32)">
            <summary>
            Ping request from another silo that probes the liveness of the recipient silo.
            </summary>
            <param name="pingNumber">A unique sequence number for ping message, to facilitate testijng and debugging.</param>
        </member>
        <member name="M:Orleans.Runtime.IGrainInfo.Merge(Orleans.Runtime.GrainId,Orleans.Runtime.IGrainInfo)">
            <summary>
            Merges two grain directory infos, returning a map of activations which must be deactivated, grouped by silo.
            </summary>
            <param name="grain"></param>
            <param name="other"></param>
            <returns>A map of activations which must be deactivated, grouped by silo.</returns>
        </member>
        <member name="T:Orleans.Runtime.IRemoteGrainDirectory">
            <summary>
            Per-silo system interface for managing the distributed, partitioned grain-silo-activation directory.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.RegisterMany(System.Collections.Generic.List{Orleans.Runtime.ActivationAddress},System.Boolean)">
            <summary>
            Records a bunch of new grain activations.
            This method should be called only remotely during handoff.
            </summary>
            <param name="addresses">The addresses of the grains to register</param>
            <param name="singleActivation">If true, use single-activation registration</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.LookUpMany(System.Collections.Generic.List{System.Tuple{Orleans.Runtime.GrainId,System.Int32}})">
            <summary>
            Fetch the updated information on the given list of grains.
            This method should be called only remotely to refresh directory caches.
            </summary>
            <param name="grainAndETagList">list of grains and generation (version) numbers. The latter denote the versions of 
            the lists of activations currently held by the invoker of this method.</param>
            <returns>list of tuples holding a grain, generation number of the list of activations, and the list of activations. 
            If the generation number of the invoker matches the number of the destination, the list is null. If the destination does not
            hold the information on the grain, generation counter -1 is returned (and the list of activations is null)</returns>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.AcceptHandoffPartition(Orleans.Runtime.SiloAddress,System.Collections.Generic.Dictionary{Orleans.Runtime.GrainId,Orleans.Runtime.IGrainInfo},System.Boolean)">
            <summary>
            Handoffs the the directory partition from source silo to the destination silo.
            </summary>
            <param name="source">The address of the owner of the partition.</param>
            <param name="partition">The (full or partial) copy of the directory partition to be Haded off.</param>
            <param name="isFullCopy">Flag specifying whether it is a full copy of the directory partition (and thus any old copy should be just replaced) or the
            a delta copy (and thus the old copy should be updated by delta changes) </param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.RemoveHandoffPartition(Orleans.Runtime.SiloAddress)">
            <summary>
            Removes the handed off directory partition from source silo on the destination silo.
            </summary>
            <param name="source">The address of the owner of the partition.</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.IGrainReminder">
            <summary>
            Handle for a persistent Reminder.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainReminder.ReminderName">
            <summary> Name of this Reminder. </summary>
        </member>
        <member name="T:Orleans.Runtime.TickStatus">
            <summary>
            The status of a tick when the tick is delivered to the registrar grain.
            In case of failures, it may happen that a tick is not delivered on time. The app can notice such missed missed ticks as follows.
            Upon receiving a tick, the app can calculate the theoretical number of ticks since start of the reminder as: 
            curCount = (Now - FirstTickTime) / Period
            The app can keep track of it as 'count'. Upon receiving a tick, the number of missed ticks = curCount - count - 1
            Thereafter, the app can set count = curCount
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TickStatus.FirstTickTime">
            <summary>
            The time at which the first tick of this reminder is due, or was triggered
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TickStatus.Period">
            <summary>
            The period of the reminder
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TickStatus.CurrentTickTime">
            <summary>
            The time on the runtime silo when the silo initiated the delivery of this tick.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ReminderException">
            <summary>
            Exception related to Orleans Reminder functions or Reminder service.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.StringValueStatistic.GetCurrentValue">
            <summary>
            Returns the current value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.BufferPool.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a buffer pool.
            </summary>
            <param name="bufferSize">The size, in bytes, of each buffer.</param>
            <param name="maxBuffers">The maximum number of buffers to keep around, unused; by default, the number of unused buffers is unbounded.</param>
            <param name="preallocationSize">Initial number of buffers to allocate.</param>
            <param name="name">Name of the buffer pool.</param>
        </member>
        <member name="P:Orleans.Runtime.ICorePerformanceMetrics.CpuUsage">
            <summary>
            CPU utilization
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ICorePerformanceMetrics.AvailablePhysicalMemory">
            <summary>
            Amount of memory available to processes running on the machine
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ICorePerformanceMetrics.MemoryUsage">
            <summary>
            Current memory usage
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ICorePerformanceMetrics.TotalPhysicalMemory">
            <summary>
            Amount of physical memory on the machine
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ICorePerformanceMetrics.SendQueueLength">
            <summary>
            the current size of the send queue (number of messages waiting to be sent). 
            Only captures remote messages to other silos (not including messages to the clients).
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ICorePerformanceMetrics.ReceiveQueueLength">
            <summary>
            the current size of the receive queue (number of messages that arrived to this silo and 
            are waiting to be dispatched). Captures both remote and local messages from other silos 
            as well as from the clients.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ICorePerformanceMetrics.SentMessages">
            <summary>
            total number of remote messages sent to other silos as well as to the clients.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ICorePerformanceMetrics.ReceivedMessages">
            <summary>
            total number of remote received messages, from other silos as well as from the clients.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ISiloPerformanceMetrics">
            <summary>
            A small set of per-silo important key performance metrics
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ISiloPerformanceMetrics.RequestQueueLength">
            <summary>
            the current size of the receive queue (number of messages that arrived to this silo and 
            are waiting to be dispatched). Captures both remote and local messages from other silos 
            as well as from the clients.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ISiloPerformanceMetrics.ActivationCount">
            <summary>
            number of activations on this silo
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ISiloPerformanceMetrics.RecentlyUsedActivationCount">
            <summary>
            Number of activations on this silo that were used in the last 10 minutes 
            (Note: this number may currently not be accurate if different age limits 
            are used for different grain types).
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ISiloPerformanceMetrics.ClientCount">
            <summary>
            Number of currently connected clients
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ISiloPerformanceMetrics.IsOverloaded">
            <summary>
            whether this silo is currently overloaded and is in the load shedding mode.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IClientPerformanceMetrics">
            <summary>
            A small set of per-Orleans-client important key performance metrics.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IClientPerformanceMetrics.ConnectedGatewayCount">
            <summary>
            number of gateways that this client is currently connected to.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.SiloRuntimeStatistics">
            <summary>
            Snapshot of current runtime statistics for a silo
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.ActivationCount">
            <summary>
            Total number of activations in a silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.RecentlyUsedActivationCount">
            <summary>
            Number of activations in a silo that have been recently used.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.RequestQueueLength">
            <summary>
            The size of the request queue.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.SendQueueLength">
            <summary>
            The size of the sending queue.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.ReceiveQueueLength">
            <summary>
            The size of the receiving queue.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.CpuUsage">
            <summary>
            The CPU utilization.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.AvailableMemory">
            <summary>
            The amount of memory available in the silo [bytes].
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.MemoryUsage">
            <summary>
            The used memory size.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.TotalPhysicalMemory">
            <summary>
            The total physical memory available [bytes].
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.IsOverloaded">
            <summary>
            Is this silo overloaded.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.ClientCount">
            <summary>
            The number of clients currently connected to that silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.DateTime">
            <summary>
            The DateTime when this statistics was created.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainStatistic">
            <summary>
            Snapshot of current statistics for a given grain type.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainStatistic.GrainType">
            <summary>
            The type of the grain for this GrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainStatistic.GrainCount">
            <summary>
            Number of grains of a this type.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainStatistic.ActivationCount">
            <summary>
            Number of activation of a agrain of this type.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainStatistic.SiloCount">
            <summary>
            Number of silos that have activations of this grain type.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainStatistic.ToString">
            <summary>
            Returns the string representatio of this GrainStatistic.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.SimpleGrainStatistic">
            <summary>
            Simple snapshot of current statistics for a given grain type on a given silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SimpleGrainStatistic.GrainType">
            <summary>
            The type of the grain for this SimpleGrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SimpleGrainStatistic.SiloAddress">
            <summary>
            The silo address for this SimpleGrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SimpleGrainStatistic.ActivationCount">
            <summary>
            The number of activations of this grain type on this given silo.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SimpleGrainStatistic.ToString">
            <summary>
            Returns the string representatio of this SimpleGrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainStatistic.GrainType">
            <summary>
            The type of the grain for this DetailedGrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainStatistic.SiloAddress">
            <summary>
            The silo address for this DetailedGrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainStatistic.GrainIdentity">
            <summary>
            Unique Id for the grain.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainStatistic.Category">
            <summary>
            The grains Category
            </summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.SiloAddress">
            <summary>silo on which these statistics come from</summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.SiloName">
            <summary>silo on which these statistics come from</summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.LocalCacheActivationAddresses">
            <summary>activation addresses in the local directory cache</summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.LocalDirectoryActivationAddresses">
            <summary>activation addresses in the local directory.</summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.PrimaryForGrain">
            <summary>primary silo for this grain</summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.GrainClassTypeName">
            <summary>the name of the class that implements this grain.</summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.LocalActivations">
            <summary>activations on this silo</summary>
        </member>
        <member name="T:Orleans.Runtime.SafeTimerBase">
            <summary>
            SafeTimerBase - an internal base class for implementing sync and async timers in Orleans.
            
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SafeTimerBase.Change(System.TimeSpan,System.TimeSpan)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using TimeSpan values to measure time intervals.
            </summary>
            <param name="newDueTime">A TimeSpan representing the amount of time to delay before invoking the callback method specified when the Timer was constructed. Specify negative one (-1) milliseconds to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
            <param name="period">The time interval between invocations of the callback method specified when the Timer was constructed. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <returns><c>true</c> if the timer was successfully updated; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Orleans.Runtime.SafeTimer">
            <summary>
            SafeTimer - A wrapper class around .NET Timer objects, with some additional built-in safeguards against edge-case errors.
            
            SafeTimer is a replacement for .NET Timer objects, and removes some of the more infrequently used method overloads for simplification.
            SafeTimer provides centralization of various "guard code" previously added in various places for handling edge-case fault conditions.
            
            Log levels used: Recovered faults => Warning, Per-Timer operations => Verbose, Per-tick operations => Verbose3
            </summary>
        </member>
        <member name="T:Orleans.Runtime.StandardExtensions">
            <summary>
            The Utils class contains a variety of utility methods for use in application and grain code.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainReferenceCache`2">
            <summary>
            This class implements an LRU (Least-Recently Used) cache of grain references. It keeps a bounded set of values and will age-out "old" values 
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceCache`2.#ctor(System.Int32,System.TimeSpan,Orleans.Runtime.GrainReferenceCache{`0,`1}.FetchValueDelegate,Orleans.Runtime.GrainReferenceCache{`0,`1}.CastDelegate)">
            <summary>
            Creates a new LRU (Least-Recently Used) cache of GrainReferences.
            </summary>
            <param name="maxSize">Maximum number of entries to allow.</param>
            <param name="maxAge">Maximum age of an entry.</param>
            <param name="f"> Delegate for fetching the value associated with a given key</param>
            <param name="c"> Delegate for casting IAddressable to TValue</param>
        </member>
        <member name="P:Orleans.Runtime.GrainReferenceCache`2.Count">
            <summary>
            Return the number of entries currently in the cache
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceCache`2.Get(`0)">
            <summary>
            Get a grain reference for the specified cache-key.
            The grain reference will either be taken from cahce, or a new one will be created by calling the <c>FetchValueDelegate</c>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.RequestContext">
            <summary>
            This class holds information regarding the request currently being processed.
            It is explicitly intended to be available to application code.
            </summary>
            <remarks>
            <para>
            The request context is represented as a property bag.
            Some values are provided by default; others are derived from messages headers in the
            request that led to the current processing.
            </para>
            <para>
            Information stored in RequestContext is propagated from 
            Orleans clients to Orleans grains automatically 
            by the Orleans runtime.
            </para>
            </remarks>
        </member>
        <member name="P:Orleans.Runtime.RequestContext.PropagateActivityId">
            <summary>
            Whether Trace.CorrelationManager.ActivityId settings should be propagated into grain calls.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.RequestContext.ActivityId">
            <summary>Gets or sets an activity ID that can be used for correlation.</summary>
        </member>
        <member name="M:Orleans.Runtime.RequestContext.Get(System.String)">
            <summary>
            Retrieve a value from the RequestContext key-value bag.
            </summary>
            <param name="key">The key for the value to be retrieved.</param>
            <returns>The value currently in the RequestContext for the specified key, 
            otherwise returns <c>null</c> if no data is present for that key.</returns>
        </member>
        <member name="M:Orleans.Runtime.RequestContext.Set(System.String,System.Object)">
            <summary>
            Sets a value into the RequestContext key-value bag.
            </summary>
            <param name="key">The key for the value to be updated / added.</param>
            <param name="value">The value to be stored into RequestContext.</param>
        </member>
        <member name="M:Orleans.Runtime.RequestContext.Remove(System.String)">
            <summary>
            Remove a value from the RequestContext key-value bag.
            </summary>
            <param name="key">The key for the value to be removed.</param>
            <returns>Boolean <c>True</c> if the value was previously in the RequestContext key-value bag and has now been removed, otherwise returns <c>False</c>.</returns>
        </member>
        <member name="T:Orleans.Runtime.ICounter">
            <summary>
            A detailed statistic counter. Usually a low level performance statistic used in troubleshooting scenarios.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ICounter.Name">
            <summary>
            the name of the statistic counter
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ICounter.IsValueDelta">
            <summary>
            if this the statistic counter value is delta since last value reported or an absolute value
            </summary>
        </member>
        <member name="M:Orleans.Runtime.CounterStatistic.GetCurrentValue">
            <summary>
            Returns the current value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IntValueStatistic.GetCurrentValue">
            <summary>
            Returns the current value
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orleans.Runtime.RuntimeVersion.Current">
            <summary>
            The full version string of the Orleans runtime, eg: '2012.5.9.51607 Build:12345 Timestamp: 20120509-185359'
            </summary>
        </member>
        <member name="P:Orleans.Runtime.RuntimeVersion.ApiVersion">
            <summary>
            The ApiVersion of the Orleans runtime, eg: '1.0.0.0'
            </summary>
        </member>
        <member name="P:Orleans.Runtime.RuntimeVersion.FileVersion">
            <summary>
            The FileVersion of the Orleans runtime, eg: '2012.5.9.51607'
            </summary>
        </member>
        <member name="P:Orleans.Runtime.RuntimeVersion.ProgramName">
            <summary>
            The program name string for the Orleans runtime, eg: 'OrleansHost'
            </summary>
        </member>
        <member name="M:Orleans.Runtime.RuntimeVersion.ProgamIdent">
            <summary>
            Writes the Orleans program ident info to the Console, eg: 'OrleansHost v2012.5.9.51607 Build:12345 Timestamp: 20120509-185359'
            </summary>
        </member>
        <member name="M:Orleans.Runtime.RuntimeVersion.IsAssemblyDebugBuild(System.Reflection.Assembly)">
            <summary>
            Returns a value indicating whether the provided <paramref name="assembly"/> was built in debug mode.
            </summary>
            <param name="assembly">
            The assembly to check.
            </param>
            <returns>
            A value indicating whether the provided assembly was built in debug mode.
            </returns>
        </member>
        <member name="T:Orleans.Runtime.SafeRandom">
            <summary>
            Thread-safe random number generator.
            Has same API as System.Random but is thread safe, similar to the implementation by Steven Toub: http://blogs.msdn.com/b/pfxteam/archive/2014/10/20/9434171.aspx
            </summary>
        </member>
        <member name="T:Orleans.Runtime.SiloStatus">
            <summary>
            Possible statuses of a silo.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Created">
            <summary>
            This silo was just created, but not started yet.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Joining">
            <summary>
            This silo has just started, but not ready yet. It is attempting to join the cluster.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Active">
            <summary>
            This silo is alive and functional.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.ShuttingDown">
            <summary>
            This silo is shutting itself down.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Stopping">
            <summary>
            This silo is stopping itself down.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Dead">
            <summary>
            This silo is de-activated/considered to be dead.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloStatusExtensions.IsTerminating(Orleans.Runtime.SiloStatus)">
            <summary>
            Return true if this silo is currently terminating: ShuttingDown, Stopping or Dead.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloStatusExtensions.IsUnavailable(Orleans.Runtime.SiloStatus)">
            <summary>
            Return true if silo is terminating or missing.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ITimebound">
            <summary>
            This interface is for use with the Orleans timers.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ITimebound.OnTimeout">
            <summary>
            This method is called by the timer when the time out is reached.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.CallbackData.StartTimer(System.TimeSpan)">
            <summary>
            Start this callback timer
            </summary>
            <param name="time">Timeout time</param>
        </member>
        <member name="T:Orleans.Runtime.IClientObserverRegistrar">
            <summary>
            Client gateway interface for forwarding client requests to silos.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.LoggerType">
            <summary>
            The ILogConsumer distinguishes between four categories of logs:
            <list type="table"><listheader><term>Value</term><description>Description</description></listheader>
            <item>
            <term>Runtime</term>
            <description>Logs that are written by the Orleans run-time itself.
            This category should not be used by application code.</description>
            </item>
            <item>
            <term>Grain</term>
            <description>Logs that are written by application grains.
            This category should be used by code that runs as Orleans grains in a silo.</description>
            </item>
            <item>
            <term>Application</term>
            <description>Logs that are written by the client application.
            This category should be used by client-side application code.</description>
            </item>
            <item>
            <term>Provider</term>
            <description>Logs that are written by providers.
            This category should be used by provider code.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ILogConsumer">
            <summary>
            An interface used to consume log entries. 
            Instaces of a class implementing this should be added to <see cref="P:Orleans.Runtime.LogManager.LogConsumers"/> collection in order to retrieve events.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ILogConsumer.Log(Orleans.Runtime.Severity,Orleans.Runtime.LoggerType,System.String,System.String,System.Net.IPEndPoint,System.Exception,System.Int32)">
            <summary>
            The method to call during logging.
            This method should be very fast, since it is called synchronously during Orleans logging.
            </summary>
            <param name="severity">The severity of the message being traced.</param>
            <param name="loggerType">The type of logger the message is being traced through.</param>
            <param name="caller">The name of the logger tracing the message.</param>
            <param name="myIPEndPoint">The <see cref="T:System.Net.IPEndPoint"/> of the Orleans client/server if known. May be null.</param>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to log. May be null.</param>
            <param name="eventCode">Numeric event code for this log entry. May be zero, meaning 'Unspecified'. 
            In general, all log entries at severity=Error or greater should specify an explicit error code value.</param>
        </member>
        <member name="T:Orleans.Runtime.IFlushableLogConsumer">
            <summary>
            An interface used to consume log entries, when a Flush function is also supported. 
            Instances of a class implementing this should be added to <see cref="P:Orleans.Runtime.LogManager.LogConsumers"/> collection in order to retrieve events.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IFlushableLogConsumer.Flush">
            <summary>Flush any pending log writes.</summary>
        </member>
        <member name="T:Orleans.Runtime.ICloseableLogConsumer">
            <summary>
            An interface used to consume log entries, when a Close function is also supported. 
            Instances of a class implementing this should be added to <see cref="P:Orleans.Runtime.LogManager.LogConsumers"/> collection in order to retrieve events.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ICloseableLogConsumer.Close">
            <summary>Close this log.</summary>
        </member>
        <member name="M:Orleans.Runtime.SocketManager.GetAcceptingSocketForEndpoint(System.Net.IPEndPoint)">
            <summary>
            Creates a socket bound to an address for use accepting connections.
            This is for use by client gateways and other acceptors.
            </summary>
            <param name="address">The address to bind to.</param>
            <returns>The new socket, appropriately bound.</returns>
        </member>
        <member name="M:Orleans.Runtime.SocketManager.Connect(System.Net.Sockets.Socket,System.Net.IPEndPoint,System.TimeSpan)">
            <summary>
            Connect the socket to the target endpoint
            </summary>
            <param name="s">The socket</param>
            <param name="endPoint">The target endpoint</param>
            <param name="connectionTimeout">The timeout value to use when opening the connection</param>
            <exception cref="T:System.TimeoutException">When the connection could not be established in time</exception>
        </member>
        <member name="M:Orleans.Runtime.ActivationId.#ctor">
            <summary>
            Only used in Json serialization
            DO NOT USE TO CREATE A RANDOM ACTIVATION ID
            Use ActivationId.NewId to create new activation IDs.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.#ctor(Orleans.Runtime.BufferPool)">
            <summary>
            
            </summary>
            <param Name="size"></param>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Byte[])">
            <summary>
            Append a byte array to the byte array.
            Note that this assumes that the array passed in is now owned by the ByteArrayBuilder, and will not be modified.
            </summary>
            <param Name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(Orleans.Runtime.ByteArrayBuilder)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Collections.Generic.List{System.ArraySegment{System.Byte}})">
            <summary>
            Append a list of byte array segments to the byte array.
            Note that this assumes that the data passed in is now owned by the ByteArrayBuilder, and will not be modified.
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Int16[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Int32[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Int64[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.UInt16[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.UInt32[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.UInt64[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.SByte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Char[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Boolean[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Single[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Double[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="F:Orleans.Runtime.Constants.DEFAULT_RESPONSE_TIMEOUT">
            <summary>
            The default timeout before a request is assumed to have failed.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Constants.MinReminderPeriod">
            <summary>
            Minimum period for registering a reminder ... we want to enforce a lower bound
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Constants.RefreshReminderList">
            <summary>
            Refresh local reminder list to reflect the global reminder table every 'REFRESH_REMINDER_LIST' period
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainId.GetUniformHashCode">
            <summary>
            Get a uniformly distributed hash code value for this grain, based on Jenkins Hash function.
            NOTE: Hash code value may be positive or NEGATIVE.
            </summary>
            <returns>Hash code for this GrainId</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainId.ToParsableString">
            <summary>
            Return this GrainId in a standard string form, suitable for later use with the <c>FromParsableString</c> method.
            </summary>
            <returns>GrainId in a standard string format.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainId.FromParsableString(System.String)">
            <summary>
            Create a new GrainId object by parsing string in a standard form returned from <c>ToParsableString</c> method.
            </summary>
            <param name="grainId">String containing the GrainId info to be parsed.</param>
            <returns>New GrainId object created from the input data.</returns>
        </member>
        <member name="P:Orleans.Runtime.PlacementResult.GrainType">
            <summary>
            Some storage providers need to know the grain type in order to read the state.
            The PlacementResult is generated based on the target grain type's policy, so the type
            is known and will be passed in the message NewGrainType header.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.TraceLogger">
            <summary>
            Support backwards compatability with old TraceManager for logger managament api
            </summary>
        </member>
        <member name="M:Orleans.Runtime.LRU`2.#ctor(System.Int32,System.TimeSpan,Orleans.Runtime.LRU{`0,`1}.FetchValueDelegate)">
            <summary>
            Creates a new LRU cache.
            </summary>
            <param name="maxSize">Maximum number of entries to allow.</param>
            <param name="maxAge">Maximum age of an entry.</param>
            <param name="f"></param>
        </member>
        <member name="F:Orleans.Runtime.Message.bodyBytes">
            <summary>
            NOTE: The contents of bodyBytes should never be modified
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Message.NewGrainType">
            <summary>
            Set by sender's placement logic when NewPlacementRequested is true
            so that receiver knows desired grain type
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Message.GenericGrainType">
            <summary>
            Set by caller's grain reference 
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Message.SetBodyBytes(System.Collections.Generic.List{System.ArraySegment{System.Byte}})">
            <summary>
            Clears the current body and sets the serialized body contents to the provided value.
            </summary>
            <param name="body">The serialized body contents.</param>
        </member>
        <member name="M:Orleans.Runtime.Message.DeserializeBodyObject(Orleans.Serialization.SerializationManager,System.Collections.Generic.List{System.ArraySegment{System.Byte}})">
            <summary>
            Deserializes the provided value into this instance's <see cref="P:Orleans.Runtime.Message.BodyObject"/>.
            </summary>
            <param name="serializationManager">The serialization manager.</param>
            <param name="body">The serialized body contents.</param>
        </member>
        <member name="M:Orleans.Runtime.Message.IsDuplicate(Orleans.Runtime.Message)">
            <summary>
            Tell whether two messages are duplicates of one another
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Orleans.Runtime.Message.HeadersContainer.NewGrainType">
            <summary>
            Set by sender's placement logic when NewPlacementRequested is true
            so that receiver knows desired grain type
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Message.HeadersContainer.GenericGrainType">
            <summary>
            Set by caller's grain reference 
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Logger">
            <summary>
            Interface of Orleans runtime for logging services. 
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Logger.SeverityLevel">
            <summary> Current SeverityLevel set for this logger. </summary>
        </member>
        <member name="P:Orleans.Runtime.Logger.Name">
            <summary>
            Name of logger instance
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Logger.GetLogger(System.String)">
            <summary>
            Find existing or create new Logger with the specified name
            </summary>
            <param name="loggerName">Name of the Logger to find or create</param>
            <returns>Logger associated with the specified name</returns>
        </member>
        <member name="M:Orleans.Runtime.Logger.Log(System.Int32,Orleans.Runtime.Severity,System.String,System.Object[],System.Exception)">
            <summary>
            Log message
            </summary>
            <param name="errorCode"></param>
            <param name="sev"></param>
            <param name="format"></param>
            <param name="args"></param>
            <param name="exception"></param>
        </member>
        <member name="P:Orleans.Runtime.Logger.IsWarning">
            <summary> Whether the current SeverityLevel would output <c>Warning</c> messages for this logger. </summary>
        </member>
        <member name="P:Orleans.Runtime.Logger.IsInfo">
            <summary> Whether the current SeverityLevel would output <c>Info</c> messages for this logger. </summary>
        </member>
        <member name="P:Orleans.Runtime.Logger.IsVerbose">
            <summary> Whether the current SeverityLevel would output <c>Verbose</c> messages for this logger. </summary>
        </member>
        <member name="P:Orleans.Runtime.Logger.IsVerbose2">
            <summary> Whether the current SeverityLevel would output <c>Verbose2</c> messages for this logger. </summary>
        </member>
        <member name="P:Orleans.Runtime.Logger.IsVerbose3">
            <summary> Whether the current SeverityLevel would output <c>Verbose3</c> messages for this logger. </summary>
        </member>
        <member name="T:Orleans.Runtime.SiloAddress">
            <summary>
            Data class encapsulating the details of silo addresses.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloAddress.Zero">
            <summary> Special constant value to indicate an empty SiloAddress. </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.NewLocalAddress(System.Int32)">
            <summary>
            Factory for creating new SiloAddresses for silo on this machine with specified generation number.
            </summary>
            <param name="gen">Generation number of the silo.</param>
            <returns>SiloAddress object initialized with the non-loopback local IP address and the specified silo generation.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.New(System.Net.IPEndPoint,System.Int32)">
            <summary>
            Factory for creating new SiloAddresses with specified IP endpoint address and silo generation number.
            </summary>
            <param name="ep">IP endpoint address of the silo.</param>
            <param name="gen">Generation number of the silo.</param>
            <returns>SiloAddress object initialized with specified address and silo generation.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.AllocateNewGeneration">
            <summary> Allocate a new silo generation number. </summary>
            <returns>A new silo generation number.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.ToParsableString">
            <summary>
            Return this SiloAddress in a standard string form, suitable for later use with the <c>FromParsableString</c> method.
            </summary>
            <returns>SiloAddress in a standard string format.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.FromParsableString(System.String)">
            <summary>
            Create a new SiloAddress object by parsing string in a standard form returned from <c>ToParsableString</c> method.
            </summary>
            <param name="addr">String containing the SiloAddress info to be parsed.</param>
            <returns>New SiloAddress object created from the input data.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.ToString">
            <summary> Object.ToString method override. </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.ToLongString">
            <summary>
            Return a long string representation of this SiloAddress.
            </summary>
            <remarks>
            Note: This string value is not comparable with the <c>FromParsableString</c> method -- use the <c>ToParsableString</c> method for that purpose.
            </remarks>
            <returns>String representaiton of this SiloAddress.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.ToStringWithHashCode">
            <summary>
            Return a long string representation of this SiloAddress, including it's consistent hash value.
            </summary>
            <remarks>
            Note: This string value is not comparable with the <c>FromParsableString</c> method -- use the <c>ToParsableString</c> method for that purpose.
            </remarks>
            <returns>String representaiton of this SiloAddress.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.Equals(System.Object)">
            <summary> Object.Equals method override. </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.GetHashCode">
            <summary> Object.GetHashCode method override. </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.GetConsistentHashCode">
            <summary>Get a consistent hash value for this silo address.</summary>
            <returns>Consistent hash value for this silo address.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.Matches(Orleans.Runtime.SiloAddress)">
            <summary>
            Two silo addresses match if they are equal or if one generation or the other is 0
            </summary>
            <param name="other"> The other SiloAddress to compare this one with. </param>
            <returns> Returns <c>true</c> if the two SiloAddresses are considered to match -- if they are equal or if one generation or the other is 0. </returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.Equals(Orleans.Runtime.SiloAddress)">
            <summary> IEquatable.Equals method override. </summary>
        </member>
        <member name="T:Orleans.Runtime.SystemStatus">
            <summary>
            System status values and current register
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Unknown">
            <summary>Status = Unknown</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Creating">
            <summary>Status = Creating</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Created">
            <summary>Status = Created</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Starting">
            <summary>Status = Starting</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Running">
            <summary>Status = Running</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Stopping">
            <summary>Status = Stopping</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.ShuttingDown">
            <summary>Status = Shuttingdown</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Terminated">
            <summary>Status = Terminated</summary>
        </member>
        <member name="M:Orleans.Runtime.SystemStatus.ToString">
            <see cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Orleans.Runtime.SystemStatus.GetHashCode">
            <see cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Orleans.Runtime.SystemStatus.Equals(System.Object)">
            <see cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Orleans.Runtime.SystemStatus.Equals(Orleans.Runtime.SystemStatus)">
            <see cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="T:Orleans.Runtime.TypeUtils">
            <summary>
            A collection of utility functions for dealing with Type information.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.TypeUtils.OrleansCoreAssembly">
            <summary>
            The assembly name of the core Orleans assembly.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetAllFields(System.Type)">
            <summary>
            Returns all fields of the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>All fields of the specified type.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.IsNotSerialized(System.Reflection.FieldInfo)">
            <summary>
            Returns <see langword="true"/> if <paramref name="field"/> is marked as
            <see cref="F:System.Reflection.FieldAttributes.NotSerialized"/>, <see langword="false"/> otherwise.
            </summary>
            <param name="field">The field.</param>
            <returns>
            <see langword="true"/> if <paramref name="field"/> is marked as
            <see cref="F:System.Reflection.FieldAttributes.NotSerialized"/>, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.IsGrainClass(System.Type)">
            <summary>
            decide whether the class is derived from Grain
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.IsInNamespace(System.Type,System.Collections.Generic.List{System.String})">
            <summary>
            Returns true if the provided <paramref name="type"/> is in any of the provided
            <paramref name="namespaces"/>, false otherwise.
            </summary>
            <param name="type">The type to check.</param>
            <param name="namespaces"></param>
            <returns>
            true if the provided <paramref name="type"/> is in any of the provided <paramref name="namespaces"/>, false
            otherwise.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.HasAllSerializationMethods(System.Type)">
            <summary>
            Returns true if <paramref name="type"/> has implementations of all serialization methods, false otherwise.
            </summary>
            <param name="type">The type.</param>
            <returns>
            true if <paramref name="type"/> has implementations of all serialization methods, false otherwise.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.IsGrainMethod(System.Reflection.MethodInfo)">
            <summary>
            Returns a value indicating whether or not the provided <paramref name="methodInfo"/> is a grain method.
            </summary>
            <param name="methodInfo">The method.</param>
            <returns>A value indicating whether or not the provided <paramref name="methodInfo"/> is a grain method.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetSuitableClassName(System.Type)">
            <summary>
            Returns a sanitized version of <paramref name="type"/>s name which is suitable for use as a class name.
            </summary>
            <param name="type">
            The grain type.
            </param>
            <returns>
            A sanitized version of <paramref name="type"/>s name which is suitable for use as a class name.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetClassNameFromInterfaceName(System.String)">
            <summary>
            Returns a class-like version of <paramref name="interfaceName"/>.
            </summary>
            <param name="interfaceName">
            The interface name.
            </param>
            <returns>
            A class-like version of <paramref name="interfaceName"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetUnadornedTypeName(System.Type)">
            <summary>
            Returns the non-generic type name without any special characters.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            The non-generic type name without any special characters.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetUnadornedMethodName(System.Reflection.MethodInfo)">
            <summary>
            Returns the non-generic method name without any special characters.
            </summary>
            <param name="method">
            The method.
            </param>
            <returns>
            The non-generic method name without any special characters.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetParseableName(System.Type,Orleans.Runtime.TypeFormattingOptions)">
            <summary>Returns a string representation of <paramref name="type"/>.</summary>
            <param name="type">The type.</param>
            <param name="options">The type formatting options.</param>
            <returns>A string representation of the <paramref name="type"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetParseableName(System.Type,System.Text.StringBuilder,System.Collections.Generic.Queue{System.Type},Orleans.Runtime.TypeFormattingOptions)">
            <summary>Returns a string representation of <paramref name="type"/>.</summary>
            <param name="type">The type.</param>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append results to.</param>
            <param name="typeArguments">The type arguments of <paramref name="type"/>.</param>
            <param name="options">The type formatting options.</param>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetNamespaces(System.Type[])">
            <summary>
            Returns the namespaces of the specified types.
            </summary>
            <param name="types">
            The types to include.
            </param>
            <returns>
            The namespaces of the specified types.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.Method``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the <see cref="T:System.Reflection.MethodInfo"/> for the simple method call in the provided <paramref name="expression"/>.
            </summary>
            <typeparam name="T">
            The containing type of the method.
            </typeparam>
            <typeparam name="TResult">
            The return type of the method.
            </typeparam>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> for the simple method call in the provided <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.Property``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the <see cref="T:System.Reflection.PropertyInfo"/> for the simple member access in the provided <paramref name="expression"/>.
            </summary>
            <typeparam name="T">
            The containing type of the property.
            </typeparam>
            <typeparam name="TResult">
            The return type of the property.
            </typeparam>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/> for the simple member access call in the provided <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.Property``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Returns the <see cref="T:System.Reflection.PropertyInfo"/> for the simple member access in the provided <paramref name="expression"/>.
            </summary>
            <typeparam name="TResult">
            The return type of the property.
            </typeparam>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/> for the simple member access call in the provided <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.Member``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the <see cref="T:System.Reflection.MemberInfo"/> for the simple member access in the provided <paramref name="expression"/>.
            </summary>
            <typeparam name="T">
            The containing type of the method.
            </typeparam>
            <typeparam name="TResult">
            The return type of the method.
            </typeparam>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Reflection.MemberInfo"/> for the simple member access call in the provided <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.Member``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Returns the <see cref="T:System.Reflection.MemberInfo"/> for the simple member access in the provided <paramref name="expression"/>.</summary>
            <typeparam name="TResult">The return type of the method.</typeparam>
            <param name="expression">The expression.</param>
            <returns>The <see cref="T:System.Reflection.MemberInfo"/> for the simple member access call in the provided <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.Method``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Returns the <see cref="T:System.Reflection.MethodInfo"/> for the simple method call in the provided <paramref name="expression"/>.</summary>
            <typeparam name="T">The containing type of the method.</typeparam>
            <param name="expression">The expression.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> for the simple method call in the provided <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.Method``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>Returns the <see cref="T:System.Reflection.MethodInfo"/> for the simple method call in the provided <paramref name="expression"/>.
            </summary>
            <typeparam name="T">The containing type of the method.</typeparam>
            <param name="expression">The expression.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> for the simple method call in the provided <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.Method(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Returns the <see cref="T:System.Reflection.MethodInfo"/> for the simple method call in the provided <paramref name="expression"/>.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> for the simple method call in the provided <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetNamespaceOrEmpty(System.Type)">
            <summary>Returns the namespace of the provided type, or <see cref="F:System.String.Empty"/> if the type has no namespace.</summary>
            <param name="type">The type.</param>
            <returns>The namespace of the provided type, or <see cref="F:System.String.Empty"/> if the type has no namespace.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetTypes(System.Type,System.Boolean)">
            <summary>Returns the types referenced by the provided <paramref name="type"/>.</summary>
            <param name="type">The type.</param>
            <param name="includeMethods">Whether or not to include the types referenced in the methods of this type.</param>
            <returns>The types referenced by the provided <paramref name="type"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetConstructorThatMatches(System.Type,System.Type[])">
            <summary>
            Get a public or non-public constructor that matches the constructor arguments signature
            </summary>
            <param name="type">The type to use.</param>
            <param name="constructorArguments">The constructor argument types to match for the signature.</param>
            <returns>A constructor that matches the signature or <see langword="null"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.IsOrleansOrReferencesOrleans(System.Reflection.Assembly)">
            <summary>
            Returns a value indicating whether or not the provided assembly is the Orleans assembly or references it.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>A value indicating whether or not the provided assembly is the Orleans assembly or references it.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.DoReferencesContain(System.Collections.Generic.IReadOnlyCollection{System.Reflection.AssemblyName},System.Reflection.AssemblyName)">
            <summary>
            Returns a value indicating whether or not the specified references contain the provided assembly name.
            </summary>
            <param name="references">The references.</param>
            <param name="assemblyName">The assembly name.</param>
            <returns>A value indicating whether or not the specified references contain the provided assembly name.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetTypes(System.Type,System.Boolean,System.Collections.Generic.HashSet{System.Type})">
            <summary>Returns the types referenced by the provided <paramref name="type"/>.</summary>
            <param name="type">The type.</param>
            <param name="includeMethods">Whether or not to include the types referenced in the methods of this type.</param>
            <param name="exclude">Types to exclude</param>
            <returns>The types referenced by the provided <paramref name="type"/>.</returns>
        </member>
        <member name="T:Orleans.Runtime.GrainReference">
            <summary>
            This is the base class for all typed grain references.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.IsBound">
            <summary>
            Gets a value indicating whether this instance is bound to a runtime and hence valid for making requests.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainReference.SystemTargetSilo">
            <summary>
            Called from generated code.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.IsInitializedSystemTarget">
            <summary>
            Whether the runtime environment for system targets has been initialized yet.
            Called from generated code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.#ctor(Orleans.Runtime.GrainId,System.String,Orleans.Runtime.SiloAddress,Orleans.Runtime.GuidId,Orleans.Runtime.IRuntimeClient)">
            <summary>Constructs a reference to the grain with the specified Id.</summary>
            <param name="grainId">The Id of the grain to refer to.</param>
            <param name="genericArgument">Type arguments in case of a generic grain.</param>
            <param name="systemTargetSilo">Target silo in case of a system target reference.</param>
            <param name="observerId">Observer ID in case of an observer reference.</param>
            <param name="runtimeClient">The runtime which this grain reference is bound to.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.#ctor(Orleans.Runtime.GrainReference)">
            <summary>
            Constructs a copy of a grain reference.
            </summary>
            <param name="other">The reference to copy.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.FromGrainId(Orleans.Runtime.GrainId,Orleans.Runtime.IRuntimeClient,System.String,Orleans.Runtime.SiloAddress)">
            <summary>Constructs a reference to the grain with the specified ID.</summary>
            <param name="grainId">The ID of the grain to refer to.</param>
            <param name="runtimeClient">The runtime client</param>
            <param name="genericArguments">Type arguments in case of a generic grain.</param>
            <param name="systemTargetSilo">Target silo in case of a system target reference.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.Bind(Orleans.Runtime.IRuntimeClient)">
            <summary>
            Binds this instance to a runtime.
            </summary>
            <param name="runtime">The runtime.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.Equals(System.Object)">
            <summary>
            Tests this reference for equality to another object.
            Two grain references are equal if they both refer to the same grain.
            </summary>
            <param name="obj">The object to test for equality against this reference.</param>
            <returns><c>true</c> if the object is equal to this reference.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.GetHashCode">
            <summary> Calculates a hash code for a grain reference. </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.GetUniformHashCode">
            <summary>Get a uniform hash code for this grain reference.</summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.op_Equality(Orleans.Runtime.GrainReference,Orleans.Runtime.GrainReference)">
            <summary>
            Compares two references for equality.
            Two grain references are equal if they both refer to the same grain.
            </summary>
            <param name="reference1">First grain reference to compare.</param>
            <param name="reference2">Second grain reference to compare.</param>
            <returns><c>true</c> if both grain references refer to the same grain (by grain identifier).</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.op_Inequality(Orleans.Runtime.GrainReference,Orleans.Runtime.GrainReference)">
            <summary>
            Compares two references for inequality.
            Two grain references are equal if they both refer to the same grain.
            </summary>
            <param name="reference1">First grain reference to compare.</param>
            <param name="reference2">Second grain reference to compare.</param>
            <returns><c>false</c> if both grain references are resolved to the same grain (by grain identifier).</returns>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.InterfaceId">
            <summary>
            Implemented by generated subclasses to return a constant
            Implemented in generated code.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.InterfaceVersion">
            <summary>
            Implemented in generated code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.IsCompatible(System.Int32)">
            <summary>
            Implemented in generated code.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.InterfaceName">
            <summary>
            Return the name of the interface for this GrainReference. 
            Implemented in Orleans generated code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.GetMethodName(System.Int32,System.Int32)">
            <summary>
            Return the method name associated with the specified interfaceId and methodId values.
            </summary>
            <param name="interfaceId">Interface Id</param>
            <param name="methodId">Method Id</param>
            <returns>Method name string.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.InvokeOneWayMethod(System.Int32,System.Object[],Orleans.CodeGeneration.InvokeMethodOptions,Orleans.Runtime.SiloAddress)">
            <summary>
            Called from generated code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.InvokeMethodAsync``1(System.Int32,System.Object[],Orleans.CodeGeneration.InvokeMethodOptions,Orleans.Runtime.SiloAddress)">
            <summary>
            Called from generated code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.SetGrainCancellationTokensTarget(System.Object[],Orleans.Runtime.GrainReference)">
            <summary>
            Sets target grain to the found instances of type GrainCancellationToken
            </summary>
            <param name="arguments"> Grain method arguments list</param>
            <param name="target"> Target grain reference</param>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.SerializeGrainReference(System.Object,Orleans.Serialization.ISerializationContext,System.Type)">
            <summary> Serializer function for grain reference.</summary>
            <seealso cref="T:Orleans.Serialization.SerializationManager"/>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.DeserializeGrainReference(System.Type,Orleans.Serialization.IDeserializationContext)">
            <summary> Deserializer function for grain reference.</summary>
            <seealso cref="T:Orleans.Serialization.SerializationManager"/>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.CopyGrainReference(System.Object,Orleans.Serialization.ICopyContext)">
            <summary> Copier function for grain reference. </summary>
            <seealso cref="T:Orleans.Serialization.SerializationManager"/>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.ToString">
            <summary>Returns a string representation of this reference.</summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.ToKeyString">
            <summary> Get the key value for this grain, as a string. </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called by BinaryFormatter after deserialization has completed.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Orleans.Runtime.Utils">
            <summary>
            The Utils class contains a variety of utility methods for use in application and grain code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Utils.EnumerableToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String,System.Boolean)">
            <summary>
            Returns a human-readable text string that describes an IEnumerable collection of objects.
            </summary>
            <typeparam name="T">The type of the list elements.</typeparam>
            <param name="collection">The IEnumerable to describe.</param>
            <param name="toString">Converts the element to a string. If none specified, <see cref="M:System.Object.ToString"/> will be used.</param>
            <param name="separator">The separator to use.</param>
            <param name="putInBrackets">Puts elements within brackets</param>
            <returns>A string assembled by wrapping the string descriptions of the individual
            elements with square brackets and separating them with commas.</returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.DictionaryToString``2(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{``0,``1}},System.Func{``1,System.String},System.String)">
            <summary>
            Returns a human-readable text string that describes a dictionary that maps objects to objects.
            </summary>
            <typeparam name="T1">The type of the dictionary keys.</typeparam>
            <typeparam name="T2">The type of the dictionary elements.</typeparam>
            <param name="dict">The dictionary to describe.</param>
            <param name="toString">Converts the element to a string. If none specified, <see cref="M:System.Object.ToString"/> will be used.</param>
            <param name="separator">The separator to use. If none specified, the elements should appear separated by a new line.</param>
            <returns>A string assembled by wrapping the string descriptions of the individual
            pairs with square brackets and separating them with commas.
            Each key-value pair is represented as the string description of the key followed by
            the string description of the value,
            separated by " -> ", and enclosed in curly brackets.</returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.ToIPEndPoint(System.Uri)">
            <summary>
            Parse a Uri as an IPEndpoint.
            </summary>
            <param name="uri">The input Uri</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.ToSiloAddress(System.Uri)">
            <summary>
            Parse a Uri as a Silo address, including the IPEndpoint and generation identifier.
            </summary>
            <param name="uri">The input Uri</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.ToGatewayUri(System.Net.IPEndPoint)">
            <summary>
            Represent an IP end point in the gateway URI format..
            </summary>
            <param name="ep">The input IP end point</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.ToGatewayUri(Orleans.Runtime.SiloAddress)">
            <summary>
            Represent a silo address in the gateway URI format.
            </summary>
            <param name="address">The input silo address</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.CalculateIdHash(System.String)">
            <summary>
            Calculates an integer hash value based on the consistent identity hash of a string.
            </summary>
            <param name="text">The string to hash.</param>
            <returns>An integer hash for the string.</returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.CalculateGuidHash(System.String)">
            <summary>
            Calculates a Guid hash value based on the consistent identity a string.
            </summary>
            <param name="text">The string to hash.</param>
            <returns>An integer hash for the string.</returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.Tail(System.String,System.Int32)">
            <summary>
            Get the last characters of a string
            </summary>
            <param name="s"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.BatchIEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="T:Orleans.BatchWorker">
            <summary>
            General pattern for an asynchronous worker that performs a work task, when notified,
            to service queued work. Each work cycle handles ALL the queued work. 
            If new work arrives during a work cycle, another cycle is scheduled. 
            The worker never executes more than one instance of the work cycle at a time, 
            and consumes no resources when idle. It uses TaskScheduler.Current 
            to schedule the work cycles.
            </summary>
        </member>
        <member name="M:Orleans.BatchWorker.Work">
            <summary>Implement this member in derived classes to define what constitutes a work cycle</summary>
        </member>
        <member name="M:Orleans.BatchWorker.Notify">
            <summary>
            Notify the worker that there is more work.
            </summary>
        </member>
        <member name="M:Orleans.BatchWorker.IsIdle">
            <summary>
            Check if this worker is busy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.BatchWorker.WaitForCurrentWorkToBeServiced">
            <summary>
            Wait for the current work cycle, and also the next work cycle if there is currently unserviced work.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.BatchWorker.NotifyAndWaitForWorkToBeServiced">
            <summary>
            Notify the worker that there is more work, and wait for the current work cycle, and also the next work cycle if there is currently unserviced work.
            </summary>
        </member>
        <member name="T:Orleans.BatchWorkerFromDelegate">
            A convenient variant of a batch worker 
            that allows the work function to be passed as a constructor argument
        </member>
        <member name="T:Orleans.AsyncSerialExecutor">
            <summary>
            A utility class that provides serial execution of async functions.
            In can be used inside reentrant grain code to execute some methods in a non-reentrant (serial) way.
            </summary>
        </member>
        <member name="M:Orleans.AsyncSerialExecutor.AddNext(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Submit the next function for execution. It will execute after all previously submitted functions have finished, without interleaving their executions.
            Returns a promise that represents the execution of this given function. 
            The returned promise will be resolved when the given function is done executing.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.AsyncExecutorWithRetries">
            <summary>
            This class a convinent utiliity class to execute a certain asyncronous function with retires,
            allowing to specify custom retry filters and policies.
            </summary>
        </member>
        <member name="M:Orleans.AsyncExecutorWithRetries.ExecuteWithRetries(System.Func{System.Int32,System.Threading.Tasks.Task},System.Int32,System.Func{System.Exception,System.Int32,System.Boolean},System.TimeSpan,Orleans.IBackoffProvider)">
            <summary>
            Execute a given function a number of times, based on retry configuration parameters.
            </summary>
        </member>
        <member name="M:Orleans.AsyncExecutorWithRetries.ExecuteWithRetries``1(System.Func{System.Int32,System.Threading.Tasks.Task{``0}},System.Int32,System.Func{System.Exception,System.Int32,System.Boolean},System.TimeSpan,Orleans.IBackoffProvider)">
            <summary>
            Execute a given function a number of times, based on retry configuration parameters.
            </summary>
        </member>
        <member name="M:Orleans.AsyncExecutorWithRetries.ExecuteWithRetries``1(System.Func{System.Int32,System.Threading.Tasks.Task{``0}},System.Int32,System.Int32,System.Func{``0,System.Int32,System.Boolean},System.Func{System.Exception,System.Int32,System.Boolean},System.TimeSpan,Orleans.IBackoffProvider,Orleans.IBackoffProvider)">
            <summary>
            Execute a given function a number of times, based on retry configuration parameters.
            </summary>
            <param name="function">Function to execute</param>
            <param name="maxNumSuccessTries">Maximal number of successful execution attempts.
            ExecuteWithRetries will try to re-execute the given function again if directed so by retryValueFilter.
            Set to -1 for unlimited number of success retries, until retryValueFilter is satisfied.
            Set to 0 for only one success attempt, which will cause retryValueFilter to be ignored and the given function executed only once until first success.</param>
            <param name="maxNumErrorTries">Maximal number of execution attempts due to errors.
            Set to -1 for unlimited number of error retries, until retryExceptionFilter is satisfied.</param>
            <param name="retryValueFilter">Filter function to indicate if successful execution should be retied.
            Set to null to disable successful retries.</param>
            <param name="retryExceptionFilter">Filter function to indicate if error execution should be retied.
            Set to null to disable error retries.</param>
            <param name="maxExecutionTime">The maximal execution time of the ExecuteWithRetries function.</param>
            <param name="onSuccessBackOff">The backoff provider object, which determines how much to wait between success retries.</param>
            <param name="onErrorBackOff">The backoff provider object, which determines how much to wait between error retries</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.AsyncLock">
             <summary>
             An async mutual exclusion mechanism that supports scoping via ‘using’.
             </summary>
             <remarks>
             (Adapted from http://blogs.msdn.com/b/pfxteam/archive/2012/02/12/10266988.aspx)
            
             When programming with <b>async</b>, the <b>lock</b> keyword is problematic:
             <list type="bullet">
                 <item><b>lock</b> will cause the thread to block while it waits for exclusive access to the critical section of code.</item>
                 <item>The <b>await</b> keyword cannot be used within the scope of a <b>lock</b> construct.</item>
             </list>
            
             It is still useful, at times, to provide exclusive access to a critical section of code. AsyncLock provides semantics
             that correspond to that of a (non-recursive) mutex, while maintining compatibility with the tenets of async programming.
             </remarks>
             <example>
             The following example implements some work that needs to be done under lock:
             <code>
             class Test
             {
                 private AsyncLock _initLock = new AsyncLock();
                 public async Task&lt;int> WorkUnderLock()
                 {
                         using (await _initLock.LockAsync()) // analogous to lock(_initLock)
                         {
                              return await DoSomeWork();
                         }
                 }
             }
             </code>
             </example>
            
             We decided to keep the implemention simple and mimic the semantics of a regular mutex as much as possible.
             1) AsyncLock is NOT IDisposable, since we don't want to give the developer an option to erraneously manualy dispose the lock
             while there may be some unreleased LockReleasers.
             2) AsyncLock does NOT have to implement the Finalizer function. The underlying resource of SemaphoreSlim will be eventually released by the .NET,
             when SemaphoreSlim is finalized. Having finalizer for AsyncLock will not speed it up.
             3) LockReleaser is IDisposable to implement the "using" pattern.
             4) LockReleaser does NOT have to implement the Finalizer function. If users forget to Dispose the LockReleaser (analagous to forgetting to release a mutex)
             the AsyncLock wil remain locked, which may potentialy cause deadlock. This is OK, since these are the exact regular mutex semantics - if one forgets to unlock the mutex, it stays locked.
        </member>
        <member name="T:Orleans.GrainCancellationToken">
            <summary>
            Grain cancellation token
            </summary>
        </member>
        <member name="F:Orleans.GrainCancellationToken._targetGrainReferences">
            <summary>
            References to remote grains to which this token was passed.
            </summary>
        </member>
        <member name="M:Orleans.GrainCancellationToken.#ctor(System.Guid)">
            <summary>
            Initializes the <see cref="T:Orleans.GrainCancellationToken"/>.
            </summary>
        </member>
        <member name="M:Orleans.GrainCancellationToken.#ctor(System.Guid,System.Boolean)">
            <summary>
            Initializes the <see cref="T:Orleans.GrainCancellationToken"/>.
            </summary>
        </member>
        <member name="P:Orleans.GrainCancellationToken.Id">
            <summary>
            Unique id of concrete token
            </summary>
        </member>
        <member name="P:Orleans.GrainCancellationToken.CancellationToken">
            <summary>
            Underlying cancellation token
            </summary>
        </member>
        <member name="M:Orleans.GrainCancellationToken.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Async.TaskUtility">
            <summary>
            Extension methods for <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
        </member>
        <member name="M:Orleans.Async.TaskUtility.Faulted(System.Exception)">
            <summary>
            Returns a faulted task.
            </summary>
            <param name="exception">The exception which the return task faulted with.</param>
            <returns>A faulted task.</returns>
        </member>
        <member name="M:Orleans.Async.TaskUtility.Completed">
            <summary>
            Returns a completed task.
            </summary>
            <returns>A completed task.</returns>
        </member>
        <member name="T:Orleans.PublicOrleansTaskExtensions">
            <summary>
            Utility functions for dealing with Tasks.
            </summary>
        </member>
        <member name="M:Orleans.PublicOrleansTaskExtensions.Ignore(System.Threading.Tasks.Task)">
            <summary>
            Observes and ignores a potential exception on a given Task.
            If a Task fails and throws an exception which is never observed, it will be caught by the .NET finalizer thread.
            This function awaits the given task and if the exception is thrown, it observes this exception and simply ignores it.
            This will prevent the escalation of this exception to the .NET finalizer thread.
            </summary>
            <param name="task">The task to be ignored.</param>
        </member>
        <member name="M:Orleans.PublicOrleansTaskExtensions.Box(System.Threading.Tasks.Task)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> for the provided <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Orleans.PublicOrleansTaskExtensions.Box``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> for the provided <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <typeparam name="T">The underlying type of <paramref name="task"/>.</typeparam>
            <param name="task">The task.</param>
        </member>
        <member name="M:Orleans.PublicOrleansTaskExtensions.Unbox``1(System.Threading.Tasks.Task{System.Object})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> for the provided <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <typeparam name="T">The underlying type of <paramref name="task"/>.</typeparam>
            <param name="task">The task.</param>
        </member>
        <member name="M:Orleans.PublicOrleansTaskExtensions.Box(System.Threading.Tasks.Task{System.Object})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> for the provided <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Orleans.OrleansTaskExtentions.WithTimeout(System.Threading.Tasks.Task,System.TimeSpan)">
            <summary>
            This will apply a timeout delay to the task, allowing us to exit early
            </summary>
            <param name="taskToComplete">The task we will timeout after timeSpan</param>
            <param name="timeout">Amount of time to wait before timing out</param>
            <exception cref="T:System.TimeoutException">If we time out we will get this exception</exception>
            <returns>The completed task</returns>
        </member>
        <member name="M:Orleans.OrleansTaskExtentions.WithTimeout``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>
            This will apply a timeout delay to the task, allowing us to exit early
            </summary>
            <param name="taskToComplete">The task we will timeout after timeSpan</param>
            <param name="timeSpan">Amount of time to wait before timing out</param>
            <exception cref="T:System.TimeoutException">If we time out we will get this exception</exception>
            <returns>The value of the completed task</returns>
        </member>
        <member name="T:Orleans.TaskDone">
            <summary>
            A special void 'Done' Task that is already in the RunToCompletion state.
            Equivalent to Task.FromResult(1).
            </summary>
        </member>
        <member name="P:Orleans.TaskDone.Done">
            <summary>
            A special 'Done' Task that is already in the RunToCompletion state
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.GeneratedAssembly">
            <summary>
            Represents a generated assembly.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.GeneratedAssembly.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.CodeGeneration.GeneratedAssembly"/> class.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.GeneratedAssembly.#ctor(Orleans.CodeGeneration.GeneratedAssembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.CodeGeneration.GeneratedAssembly"/> class.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="P:Orleans.CodeGeneration.GeneratedAssembly.RawBytes">
            <summary>
            Gets or sets a serialized representation of the assembly.
            </summary>
        </member>
        <member name="P:Orleans.CodeGeneration.GeneratedAssembly.Assembly">
            <summary>
            Gets or sets the assembly.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.GenericMethodInvoker">
            <summary>
            Functionality for invoking calls on a generic instance method.
            </summary>
            <remarks>
            Each instance of this class can invoke calls on one generic method.
            </remarks>
        </member>
        <member name="T:Orleans.CodeGeneration.GenericMethodInvoker.GenericMethodInvokerDelegate">
            <summary>
             Invoke the generic method described by this instance on the provided <paramref name="grain"/>.
            </summary>
            <param name="grain">The grain.</param>
            <param name="arguments">The arguments, including the method's type parameters.</param>
            <returns>The method result.</returns>
        </member>
        <member name="M:Orleans.CodeGeneration.GenericMethodInvoker.#ctor(System.Type,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.CodeGeneration.GenericMethodInvoker"/> class.
            </summary>
            <param name="grainInterfaceType">The grain interface type which the method exists on.</param>
            <param name="methodName">The name of the method.</param>
            <param name="typeParameterCount">The number of type parameters which the method has.</param>
        </member>
        <member name="M:Orleans.CodeGeneration.GenericMethodInvoker.Invoke(Orleans.Runtime.IAddressable,System.Object[])">
            <summary>
            Invoke the defined method on the provided <paramref name="grain"/> instance with the given <paramref name="arguments"/>.
            </summary>
            <param name="grain">The grain.</param>
            <param name="arguments">The arguments to the method with the type parameters first, followed by the method parameters.</param>
            <returns>The invocation result.</returns>
        </member>
        <member name="M:Orleans.CodeGeneration.GenericMethodInvoker.CreateInvoker(System.Object[])">
            <summary>
            Creates an invoker delegate for the type arguments specified in <paramref name="arguments"/>.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>A new invoker delegate.</returns>
        </member>
        <member name="M:Orleans.CodeGeneration.GenericMethodInvoker.GetTaskConversionMethod(System.Type)">
            <summary>
            Returns a suitable <see cref="T:System.Reflection.MethodInfo"/> for a method which will convert an argument of type <paramref name="taskType"/>
            into <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <param name="taskType">The type to convert.</param>
            <returns>A suitable conversion method.</returns>
        </member>
        <member name="M:Orleans.CodeGeneration.GenericMethodInvoker.System#Collections#Generic#IEqualityComparer{System#Object[]}#Equals(System.Object[],System.Object[])">
            <summary>
            Performs equality comparison for the purpose of comparing type parameters only.
            </summary>
            <param name="x">One argument list.</param>
            <param name="y">The other argument list.</param>
            <returns><see langword="true"/> if the type parameters in the respective arguments are equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Orleans.CodeGeneration.GenericMethodInvoker.System#Collections#Generic#IEqualityComparer{System#Object[]}#GetHashCode(System.Object[])">
            <summary>
            Returns a hash code for the type parameters in the provided argument list.
            </summary>
            <param name="obj">The argument list.</param>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Orleans.CodeGeneration.GenericMethodInvoker.GetMethod(System.Type,System.String,System.Int32)">
            <summary>
            Returns the <see cref="T:System.Reflection.MethodInfo"/> for the method on <paramref name="declaringType"/> with the provided name
            and number of generic type parameters.
            </summary>
            <param name="declaringType">The type which the method is declared on.</param>
            <param name="methodName">The method name.</param>
            <param name="typeParameterCount">The number of generic type parameters.</param>
            <returns>The identified method.</returns>
        </member>
        <member name="T:Orleans.CodeGeneration.CodeGeneratorManager">
            <summary>
            Methods for invoking code generation.
            </summary>
        </member>
        <member name="F:Orleans.CodeGeneration.CodeGeneratorManager.CodeGenAssemblyName">
            <summary>
            The name of the code generator assembly.
            </summary>
        </member>
        <member name="F:Orleans.CodeGeneration.CodeGeneratorManager.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Orleans.CodeGeneration.CodeGeneratorManager.EmptyGeneratedAssemblies">
            <summary>
            Empty generated assemblies.
            </summary>
        </member>
        <member name="F:Orleans.CodeGeneration.CodeGeneratorManager.codeGeneratorInstance">
            <summary>
            The runtime code generator.
            </summary>
        </member>
        <member name="F:Orleans.CodeGeneration.CodeGeneratorManager.codeGeneratorCacheInstance">
            <summary>
            The code generator cache.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.CodeGeneratorManager.Initialize">
            <summary>
            Loads the code generator on demand
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.CodeGeneratorManager.GenerateAndCacheCodeForAssembly(System.Reflection.Assembly)">
            <summary>
            Ensures code for the <paramref name="input"/> assembly has been generated and loaded.
            </summary>
            <param name="input">
            The input assembly.
            </param>
        </member>
        <member name="M:Orleans.CodeGeneration.CodeGeneratorManager.GenerateAndLoadForAssemblies(System.Reflection.Assembly[])">
            <summary>
            Ensures code for all currently loaded assemblies has been generated and loaded.
            </summary>
            <param name="inputs">The assemblies to generate code for.</param>
        </member>
        <member name="M:Orleans.CodeGeneration.CodeGeneratorManager.GetGeneratedAssemblies">
            <summary>
            Returns the collection of generated assemblies as pairs of target assembly name to raw assembly bytes.
            </summary>
            <returns>The collection of generated assemblies.</returns>
        </member>
        <member name="M:Orleans.CodeGeneration.CodeGeneratorManager.AddGeneratedAssembly(System.String,Orleans.CodeGeneration.GeneratedAssembly)">
            <summary>
            Adds a pre-generated assembly to the assembly cache.
            </summary>
            <param name="targetAssemblyName">
            The name of the assembly the provided <paramref name="generatedAssembly"/> targets.
            </param>
            <param name="generatedAssembly">
            The generated assembly.
            </param>
        </member>
        <member name="M:Orleans.CodeGeneration.CodeGeneratorManager.LoadCodeGenerator">
            <summary>
            Loads the code generator.
            </summary>
            <returns>The code generator.</returns>
        </member>
        <member name="T:Orleans.CodeGeneration.ICodeGeneratorCache">
            <summary>
            Methods for interacting with a cache for generated assemblies.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.ICodeGeneratorCache.AddGeneratedAssembly(System.String,Orleans.CodeGeneration.GeneratedAssembly)">
            <summary>
            Adds a pre-generated assembly.
            </summary>
            <param name="targetAssemblyName">
            The name of the assembly the provided <paramref name="generatedAssembly"/> targets.
            </param>
            <param name="generatedAssembly">
            The generated assembly.
            </param>
        </member>
        <member name="M:Orleans.CodeGeneration.ICodeGeneratorCache.GetGeneratedAssemblies">
            <summary>
            Returns the collection of generated assemblies as pairs of target assembly name to raw assembly bytes.
            </summary>
            <returns>The collection of generated assemblies.</returns>
            <remarks>
            The key of the returned dictionary is the name of the assembly which the value targets.
            </remarks>
        </member>
        <member name="T:Orleans.CodeGeneration.IGrainMethodInvoker">
            <summary>
            An implementation of this interface is generated for every grain interface as part of the client-side code generation.
            </summary>
        </member>
        <member name="P:Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId">
            <summary> The interface id that this invoker supports. </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(Orleans.Runtime.IAddressable,Orleans.CodeGeneration.InvokeMethodRequest)">
            <summary>
            Invoke a grain method.
            Invoker classes in generated code implement this method to provide a method call jump-table to map invoke data to a strongly typed call to the correct method on the correct interface.
            </summary>
            <param name="grain">Reference to the grain to be invoked.</param>
            <param name="request">The request being invoked.</param>
            <returns>Value promise for the result of the method invoke.</returns>
        </member>
        <member name="T:Orleans.CodeGeneration.IGrainExtensionMethodInvoker">
            <summary>
            An implementation of this interface is generated for every grain extension as part of the client-side code generation.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.IGrainExtensionMethodInvoker.Invoke(Orleans.Runtime.IGrainExtension,Orleans.CodeGeneration.InvokeMethodRequest)">
            <summary>
            Invoke a grain extension method.
            </summary>
            <param name="extension">Reference to the extension to be invoked.</param>
            <param name="request">The request being invoked.</param>
            <returns>Value promise for the result of the method invoke.</returns>
        </member>
        <member name="T:Orleans.CodeGeneration.IGrainExtensionMap">
            <summary>
            Methods for querying a collection of grain extensions.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.IGrainExtensionMap.TryGetExtension(System.Int32,Orleans.Runtime.IGrainExtension@)">
            <summary>
            Gets the extension from this instance if it is available.
            </summary>
            <param name="interfaceId">The interface id.</param>
            <param name="extension">The extension.</param>
            <returns>
            <see langword="true"/> if the extension is found, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Orleans.CodeGeneration.IRuntimeCodeGenerator">
            <summary>
            Methods for generating code at runtime.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.IRuntimeCodeGenerator.GenerateAndLoadForAssembly(System.Reflection.Assembly)">
            <summary>
            Ensures that code generation has been run for the provided assembly.
            </summary>
            <param name="input">
            The assembly to generate code for.
            </param>
        </member>
        <member name="M:Orleans.CodeGeneration.IRuntimeCodeGenerator.GenerateAndLoadForAssemblies(System.Reflection.Assembly[])">
            <summary>
            Generates and loads code for the specified inputs.
            </summary>
            <param name="inputs">The assemblies to generate code for.</param>
        </member>
        <member name="T:Orleans.CodeGeneration.ISourceCodeGenerator">
            <summary>
            Methods for generating source code.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.ISourceCodeGenerator.GenerateSourceForAssembly(System.Reflection.Assembly)">
            <summary>
            Generates source code for the provided assembly.
            </summary>
            <param name="input">
            The assembly to generate source for.
            </param>
            <returns>
            The generated source.
            </returns>
        </member>
        <member name="T:Orleans.CodeGeneration.KnownAssemblyAttribute">
            <summary>
            The attribute which informs the code generator that code should be generated an assembly.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.KnownAssemblyAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of <see cref="T:Orleans.CodeGeneration.KnownAssemblyAttribute"/>.</summary>
            <param name="type">A type contained by the target assembly. 
            The type itself is not relevant, and it's just a way to inrectly identify the assembly.</param>
        </member>
        <member name="M:Orleans.CodeGeneration.KnownAssemblyAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of <see cref="T:Orleans.CodeGeneration.KnownAssemblyAttribute"/>.</summary>
            <param name="assemblyName">The target assembly name.</param>
        </member>
        <member name="P:Orleans.CodeGeneration.KnownAssemblyAttribute.Assembly">
            <summary>
            Gets or sets the assembly to include in code generation.
            </summary>
        </member>
        <member name="P:Orleans.CodeGeneration.KnownAssemblyAttribute.TreatTypesAsSerializable">
            <summary>
            Gets or sets a value indicating whether or not to assume that all types in the specified assembly are
            serializable.
            </summary>
            <remarks>This is equivalent to specifying <see cref="T:Orleans.CodeGeneration.KnownTypeAttribute"/> for all types.</remarks>
        </member>
        <member name="T:Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute">
            <summary>
            The attribute which informs the code generator which assemblies an assembly contains generated code for.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of <see cref="T:Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute"/>.</summary>
            <param name="assemblyName">The target assembly name.</param>
        </member>
        <member name="P:Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute.AssemblyName">
            <summary>
            The target assembly name that the generated code is for.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.ConsiderForCodeGenerationAttribute">
            <summary>
            The attribute which informs the code generator that code should be generated for this type.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.ConsiderForCodeGenerationAttribute.#ctor(System.Type,System.Boolean)">
            <summary>Initializes a new instance of <see cref="T:Orleans.CodeGeneration.ConsiderForCodeGenerationAttribute"/>.</summary>
            <param name="type">The type that the generator should generate code for</param>
            <param name="throwOnFailure">When <see langword="true"/>, it will throw an exception if code cannot be generated for this type.</param>
        </member>
        <member name="P:Orleans.CodeGeneration.ConsiderForCodeGenerationAttribute.Type">
            <summary>
            Gets the type which should be considered for code generation.
            </summary>
        </member>
        <member name="P:Orleans.CodeGeneration.ConsiderForCodeGenerationAttribute.ThrowOnFailure">
            <summary>
            Gets a value indicating whether or not to throw if code was not generated for the specified type.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.KnownTypeAttribute">
            <summary>
            The attribute which informs the code generator that code should be generated for this type.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.KnownTypeAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of <see cref="T:Orleans.CodeGeneration.KnownAssemblyAttribute"/>.</summary>
            <param name="type">The type that the generator should generate code for</param>
        </member>
        <member name="T:Orleans.CodeGeneration.GenerateSerializerAttribute">
            <summary>
            The attribute which informs the code generator that code should be generated for this type.
            Forces generation of type serializer, throwing if a serializer could not be generated.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.GenerateSerializerAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of <see cref="T:Orleans.CodeGeneration.GenerateSerializerAttribute"/>.</summary>
            <param name="type">The type that the generator should generate code for</param>
        </member>
        <member name="T:Orleans.CodeGeneration.SkipCodeGenerationAttribute">
            <summary>
            The attribute which informs the code generator that no code should be generated an assembly.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.TypeCodeOverrideAttribute">
            <summary>
            The TypeCodeOverrideAttribute attribute allows to specify the grain interface ID or the grain class type code
            to override the default ones to avoid hash collisions
            </summary>
        </member>
        <member name="P:Orleans.CodeGeneration.TypeCodeOverrideAttribute.TypeCode">
            <summary>
            Use a specific grain interface ID or grain class type code (e.g. to avoid hash collisions)
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.MethodIdAttribute">
            <summary>
            Specifies the method id for the interface method which this attribute is declared on.
            </summary>
            <remarks>
            Method ids must be unique for all methods in a given interface.
            This attribute is only applicable for interface method declarations, not for method definitions on classes.
            </remarks>
        </member>
        <member name="P:Orleans.CodeGeneration.MethodIdAttribute.MethodId">
            <summary>
            Gets the method id for the interface method this attribute is declared on.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.MethodIdAttribute.#ctor(System.Int32)">
            <summary>
            Specifies the method id for the interface method which this attribute is declared on.
            </summary>
            <remarks>
            Method ids must be unique for all methods in a given interface.
            This attribute is only valid only on interface method declarations, not on method definitions.
            </remarks>
            <param name="methodId">The method id.</param>
        </member>
        <member name="T:Orleans.CodeGeneration.VersionAttribute">
            <summary>
            The VersionAttribute allows to specify the version number of the interface
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.CopierMethodAttribute">
            <summary>
            Used to mark a method as providing a copier function for that type.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.SerializerMethodAttribute">
            <summary>
            Used to mark a method as providing a serializer function for that type.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.DeserializerMethodAttribute">
            <summary>
            Used to mark a method as providing a deserializer function for that type.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.GrainFactoryBase">
            <summary>
            Abstract base class for all grain proxy factory classes.
            </summary>
            <remarks>
            These methods are used from generated code.
            </remarks>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(Orleans.IGrainObserver)">
            <summary>
            Check that a grain observer parameter is of the correct underlying concrent type -- either extending from <c>GrainRefereence</c> or <c>Grain</c>
            </summary>
            <param name="grainObserver">Grain observer parameter to be checked.</param>
            <exception cref="T:System.ArgumentNullException">If grainObserver is <c>null</c></exception>
            <exception cref="T:System.NotSupportedException">If grainObserver class is not an appropriate underlying concrete type.</exception>
        </member>
        <member name="T:Orleans.CodeGeneration.GeneratedAttribute">
            <summary>
            For internal (run-time) use only.
            Base class of all the activation attributes 
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.GeneratedAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.CodeGeneration.GeneratedAttribute"/> class.
            </summary>
            <param name="targetType">The type which this implementation applies to.</param>
        </member>
        <member name="P:Orleans.CodeGeneration.GeneratedAttribute.TargetType">
            <summary>
            Gets the type which this implementation applies to.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.MethodInvokerAttribute">
            <summary>
            Identifies a class that knows how to map the messages targeting a specifies interface ID to a grain (CLR) interface.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.MethodInvokerAttribute.#ctor(System.Type,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Orleans.CodeGeneration.MethodInvokerAttribute"/> class.</summary>
            <param name="targetType">The grain implementation type</param>
            <param name="interfaceId">The ID assigned to the interface by Orleans</param>
        </member>
        <member name="P:Orleans.CodeGeneration.MethodInvokerAttribute.InterfaceId">
            <summary>Gets the ID assigned to the interface by Orleans</summary>
        </member>
        <member name="T:Orleans.CodeGeneration.GrainReferenceAttribute">
            <summary>Identifies a concrete grain reference to an interface ID</summary>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainReferenceAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.CodeGeneration.GrainReferenceAttribute"/> class.
            </summary>
            <param name="targetType">The type which this implementation applies to.</param>
        </member>
        <member name="T:Orleans.CodeGeneration.SerializerAttribute">
            <summary>
            Identifies a class that contains all the serializer methods for a type.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.SerializerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.CodeGeneration.SerializerAttribute"/> class.
            </summary>
            <param name="targetType">The type that this implementation can serialize.</param>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainInterfaceUtils.IsReadOnly(System.Reflection.MethodInfo)">
            <summary>
            Whether method is read-only, i.e. does not modify grain state, 
            a method marked with [ReadOnly].
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainInterfaceUtils.IsPureObserverInterface(System.Type)">
            <summary>
            decide whether the class is derived from Grain
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainInterfaceUtils.GetMethodsImpl(System.Type,System.Type,System.Collections.Generic.List{System.Reflection.MethodInfo})">
            <summary>
            Recurses through interface graph accumulating methods
            </summary>
            <param name="grainType">Grain type</param>
            <param name="serviceType">Service interface type</param>
            <param name="methodInfos">Accumulated </param>
        </member>
        <member name="T:Orleans.CodeGeneration.InvokeMethodRequest">
            <summary>
            Data object holding metadata associated with a grain Invoke request.
            </summary>
        </member>
        <member name="P:Orleans.CodeGeneration.InvokeMethodRequest.InterfaceId">
            <summary> InterfaceId for this Invoke request. </summary>
        </member>
        <member name="P:Orleans.CodeGeneration.InvokeMethodRequest.MethodId">
            <summary> MethodId for this Invoke request. </summary>
        </member>
        <member name="P:Orleans.CodeGeneration.InvokeMethodRequest.Arguments">
            <summary> Arguments for this Invoke request. </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.InvokeMethodRequest.ToString">
            <summary> 
            String representation for this Invoke request. 
            </summary>
            <remarks>
            Note: This is not the serialized wire form of this Invoke request.
            </remarks>
        </member>
        <member name="T:Orleans.CodeGeneration.InvokeMethodOptions">
            <summary>
            Invoke options for an <c>InvokeMethodRequest</c>
            </summary>
            <remarks>
            These flag values are used in Orleans generated invoker code, and should not be altered. </remarks>
        </member>
        <member name="F:Orleans.CodeGeneration.InvokeMethodOptions.None">
            <summary>No options defined.</summary>
        </member>
        <member name="F:Orleans.CodeGeneration.InvokeMethodOptions.OneWay">
            <summary>Invocation is one-way with no feedback on whether the call succeeds or fails.</summary>
        </member>
        <member name="F:Orleans.CodeGeneration.InvokeMethodOptions.ReadOnly">
            <summary>Invocation is read-only and can interleave with other read-only invocations.</summary>
        </member>
        <member name="F:Orleans.CodeGeneration.InvokeMethodOptions.Unordered">
            <summary>Invocation does not care about ordering and can consequently be optimized.</summary>
        </member>
        <member name="F:Orleans.CodeGeneration.InvokeMethodOptions.DelayForConsistency">
            <summary>Obsolete field.</summary>
        </member>
        <member name="F:Orleans.CodeGeneration.InvokeMethodOptions.AlwaysInterleave">
            <summary>The invocation can interleave with any other request type, including write requests.</summary>
        </member>
        <member name="T:Orleans.Configuration.ServiceCollectionExtensions">
            <summary>
            Extension methods for configuring dependency injection.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.ServiceCollectionExtensions.AddGrainCallFilter(Microsoft.Extensions.DependencyInjection.IServiceCollection,Orleans.IGrainCallFilter)">
            <summary>
            Adds an <see cref="T:Orleans.IGrainCallFilter"/> to the filter pipeline.
            </summary>
            <param name="collection">The service collection.</param>
            <param name="filter">The filter.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Configuration.ServiceCollectionExtensions.AddGrainCallFilter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds an <see cref="T:Orleans.IGrainCallFilter"/> to the filter pipeline.
            </summary>
            <typeparam name="TImplementation">The filter implementation type.</typeparam>
            <param name="collection">The service collection.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Configuration.ServiceCollectionExtensions.AddGrainCallFilter(Microsoft.Extensions.DependencyInjection.IServiceCollection,Orleans.GrainCallFilterDelegate)">
            <summary>
            Adds an <see cref="T:Orleans.IGrainCallFilter"/> to the filter pipeline via a delegate.
            </summary>
            <param name="collection">The service collection.</param>
            <param name="filter">The filter.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="T:Orleans.ClientBuilder">
            <summary>
            Builder used for creating <see cref="T:Orleans.IClusterClient"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.ClientBuilder.Build">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClientBuilder.UseConfiguration(Orleans.Runtime.Configuration.ClientConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClientBuilder.ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <inheritdoc />
        </member>
        <member name="T:Orleans.ClientBuilderExtensions">
            <summary>
            Extension methods for <see cref="T:Orleans.IClientBuilder"/>.
            </summary>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.LoadConfiguration(Orleans.IClientBuilder)">
            <summary>
            Loads configuration from the standard client configuration locations.
            </summary>
            <param name="builder">The builder.</param>
            <remarks>
            This method loads the first client configuration file it finds, searching predefined directories for predefined file names.
            The following file names are tried in order:
            <list type="number">
                <item>ClientConfiguration.xml</item>
                <item>OrleansClientConfiguration.xml</item>
                <item>Client.config</item>
                <item>Client.xml</item>
            </list>
            The following directories are searched in order:
            <list type="number">
                <item>The directory of the executing assembly.</item>
                <item>The approot directory.</item>
                <item>The current working directory.</item>
                <item>The parent of the current working directory.</item>
            </list>
            Each directory is searched for all configuration file names before proceeding to the next directory.
            </remarks>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.LoadConfiguration(Orleans.IClientBuilder,System.String)">
            <summary>
            Loads configuration from the provided location.
            </summary>
            <param name="builder">The builder.</param>
            <param name="configurationFilePath"></param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.LoadConfiguration(Orleans.IClientBuilder,System.IO.FileInfo)">
            <summary>
            Loads configuration from the provided location.
            </summary>
            <param name="builder">The builder.</param>
            <param name="configurationFile"></param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.AddClientInvokeCallback(Orleans.IClientBuilder,Orleans.ClientInvokeCallback)">
            <summary>
            Adds a client invocation callback.
            </summary>
            <param name="builder">The builder.</param>
            <param name="callback">The callback.</param>
            <remarks>
            A <see cref="T:Orleans.ClientInvokeCallback"/> ia a global pre-call interceptor.
            Synchronous callback made just before a message is about to be constructed and sent by a client to a grain.
            This call will be made from the same thread that constructs the message to be sent, so any thread-local settings
            such as <c>Orleans.RequestContext</c> will be picked up.
            The action receives an <see cref="T:Orleans.CodeGeneration.InvokeMethodRequest"/> with details of the method to be invoked, including InterfaceId and MethodId,
            and a <see cref="T:Orleans.IGrain"/> which is the GrainReference this request is being sent through
            This callback method should return promptly and do a minimum of work, to avoid blocking calling thread or impacting throughput.
            </remarks>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.AddClusterConnectionLostHandler(Orleans.IClientBuilder,Orleans.ConnectionToClusterLostHandler)">
            <summary>
            Registers a <see cref="T:Orleans.ConnectionToClusterLostHandler"/> event handler.
            </summary>
            <param name="builder">The builder.</param>
            <param name="handler">The handler.</param>
            <returns>The builder.</returns>
        </member>
        <member name="F:Orleans.GrainCasterFactory.GrainReferenceCastHelperMethodInfo">
            <summary>
            The cached <see cref="T:System.Reflection.MethodInfo"/> for <see cref="M:Orleans.GrainExtensions.AsWeaklyTypedReference(Orleans.Runtime.IAddressable)"/>.
            </summary>
        </member>
        <member name="F:Orleans.GrainCasterFactory.IsAssignableFromMethodInfo">
            <summary>
            The cached <see cref="T:System.Reflection.MethodInfo"/> for checking if one type is assignable from another.
            </summary>
        </member>
        <member name="F:Orleans.GrainCasterFactory.GetTypeMethodInfo">
            <summary>
            The cached <see cref="T:System.Reflection.MethodInfo"/> for <see cref="M:System.Object.GetType"/>.
            </summary>
        </member>
        <member name="F:Orleans.GrainCasterFactory.GetTypeFromHandleMethodInfo">
            <summary>
            The cached <see cref="T:System.Reflection.MethodInfo"/> for <see cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)"/>.
            </summary>
        </member>
        <member name="M:Orleans.GrainCasterFactory.CreateGrainReferenceCaster(System.Type,System.Type)">
            <summary>
            Creates a grain reference caster delegate for the provided grain interface type and concrete grain reference type.
            </summary>
            <param name="interfaceType">The interface type.</param>
            <param name="grainReferenceType">The grain reference implementation type.</param>
            <returns>A grain reference caster delegate.</returns>
        </member>
        <member name="M:Orleans.GrainCasterFactory.EmitCall(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Emits a call to the specified method.
            </summary>
            <param name="il">The il generator.</param>
            <param name="method">The method to call.</param>
        </member>
        <member name="T:Orleans.IClientBuilder">
            <summary>
            Functionality for building <see cref="T:Orleans.IClusterClient"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.IClientBuilder.Build">
            <summary>
            Builds the client.
            </summary>
            <remarks>This method may only be called once per builder instance.</remarks>
            <returns>The newly created client.</returns>
        </member>
        <member name="M:Orleans.IClientBuilder.ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            Adds a service configuration delegate to the configuration pipeline.
            </summary>
            <param name="configureServices">The service configuration delegate.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.IClientBuilder.UseConfiguration(Orleans.Runtime.Configuration.ClientConfiguration)">
            <summary>
            Specified the configuration to use for this client.
            </summary>
            <param name="configuration">The configuration.</param>
            <remarks>This method may only be called once per builder instance.</remarks>
            <returns>The builder.</returns>
        </member>
        <member name="T:Orleans.IClusterConnectionStatusListener">
            <summary>
            Interface for notifying observers that connection to the cluster has been lost.
            </summary>
        </member>
        <member name="M:Orleans.IClusterConnectionStatusListener.NotifyClusterConnectionLost">
            <summary>
            Notifies this client that the connection to the cluster has been lost.
            </summary>
        </member>
        <member name="T:Orleans.GrainCallFilterDelegate">
            <summary>
            A delegate used to intercept invocation of a request.
            </summary>
            <param name="context">The invocation context.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which must be awaited before processing continues.</returns>
        </member>
        <member name="T:Orleans.IGrainCallContext">
            <summary>
            Represents a method invocation as well as the result of invocation.
            </summary>
        </member>
        <member name="P:Orleans.IGrainCallContext.Grain">
            <summary>
            Gets the grain being invoked.
            </summary>
        </member>
        <member name="P:Orleans.IGrainCallContext.Method">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> of the method being invoked.
            </summary>
        </member>
        <member name="P:Orleans.IGrainCallContext.Arguments">
            <summary>
            Gets the arguments for this method invocation.
            </summary>
        </member>
        <member name="M:Orleans.IGrainCallContext.Invoke">
            <summary>
            Invokes the request.
            </summary>
        </member>
        <member name="P:Orleans.IGrainCallContext.Result">
            <summary>
            Gets or sets the result.
            </summary>
        </member>
        <member name="T:Orleans.IGrainCallFilter">
            <summary>
            Interface for grain call filters.
            </summary>
        </member>
        <member name="M:Orleans.IGrainCallFilter.Invoke(Orleans.IGrainCallContext)">
            <summary>
            Invokes this filter.
            </summary>
            <param name="context">The grain call context.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="T:Orleans.IInternalGrainFactory">
            <summary>
            The internal grain factory interface.
            </summary>
        </member>
        <member name="M:Orleans.IInternalGrainFactory.CreateObjectReference``1(Orleans.Runtime.IAddressable)">
            <summary>
            Creates a reference to the provided object.
            </summary>
            <typeparam name="TGrainObserverInterface">The interface which interface.</typeparam>
            <param name="obj">The object.</param>
            <returns>A reference to the provided object.</returns>
        </member>
        <member name="M:Orleans.IInternalGrainFactory.GetSystemTarget``1(Orleans.Runtime.GrainId,Orleans.Runtime.SiloAddress)">
            <summary>
            Gets a reference to the specified system target.
            </summary>
            <typeparam name="TGrainInterface">The system target interface.</typeparam>
            <param name="grainId">The id of the target.</param>
            <param name="destination">The destination silo.</param>
            <returns>A reference to the specified system target.</returns>
        </member>
        <member name="M:Orleans.IInternalGrainFactory.Cast``1(Orleans.Runtime.IAddressable)">
            <summary>
            Casts the provided <paramref name="grain"/> to the specified interface
            </summary>
            <typeparam name="TGrainInterface">The target grain interface type.</typeparam>
            <param name="grain">The grain reference being cast.</param>
            <returns>
            A reference to <paramref name="grain"/> which implements <typeparamref name="TGrainInterface"/>.
            </returns>
        </member>
        <member name="M:Orleans.IInternalGrainFactory.Cast(Orleans.Runtime.IAddressable,System.Type)">
            <summary>
            Casts the provided <paramref name="grain"/> to the specified interface
            </summary>
            <param name="grain">The grain reference being cast.</param>
            <param name="interfaceType">The target grain interface type.</param>
            <returns>
            A reference to <paramref name="grain"/> which implements <paramref name="interfaceType"/>.
            </returns>
        </member>
        <member name="M:Orleans.IInternalGrainFactory.GetGrain``1(Orleans.Runtime.GrainId)">
            <summary>
            Gets a reference to the grain with the provided id.
            </summary>
            <typeparam name="TGrainInterface">The grain reference interface type.</typeparam>
            <param name="grainId">The grain id.</param>
            <returns>A reference to the grain with the provided id.</returns>
        </member>
        <member name="M:Orleans.IInternalGrainFactory.GetGrain(Orleans.Runtime.GrainId,System.String)">
            <summary>
            Gets a reference to the grain with the provided id.
            </summary>
            <param name="grainId">The grain id.</param>
            <param name="genericArguments">The generic type arguments.</param>
            <returns>A reference to the grain with the provided id.</returns>
        </member>
        <member name="T:Orleans.IInternalClusterClient">
            <summary>
            The internal-facing client interface.
            </summary>
        </member>
        <member name="P:Orleans.IInternalClusterClient.StreamProviderRuntime">
            <summary>
            Gets the client's <see cref="T:Orleans.Streams.IStreamProviderRuntime"/>.
            </summary>
        </member>
        <member name="T:Orleans.IClusterClient">
            <summary>
            Client interface for interacting with an Orleans cluster.
            </summary>
        </member>
        <member name="P:Orleans.IClusterClient.IsInitialized">
            <summary>
            Gets a value indicating whether or not this client is initialized.
            </summary>
        </member>
        <member name="P:Orleans.IClusterClient.Logger">
            <summary>
            Provides logging facility for applications.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if Orleans runtime is not correctly initialized before this call.</exception>
        </member>
        <member name="P:Orleans.IClusterClient.ServiceProvider">
            <summary>
            Gets the service provider used by this client.
            </summary>
        </member>
        <member name="P:Orleans.IClusterClient.Configuration">
            <summary>
            Gets the client configuration.
            </summary>
        </member>
        <member name="M:Orleans.IClusterClient.GetStreamProviders">
            <summary>
            Returns a collection of all configured <see cref="T:Orleans.Streams.IStreamProvider"/>s.
            </summary>
            <returns>A collection of all configured <see cref="T:Orleans.Streams.IStreamProvider"/>s.</returns>
        </member>
        <member name="M:Orleans.IClusterClient.GetStreamProvider(System.String)">
            <summary>
            Returns the <see cref="T:Orleans.Streams.IStreamProvider"/> with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the stream provider.</param>
            <returns>The <see cref="T:Orleans.Streams.IStreamProvider"/> with the specified <paramref name="name"/>.</returns>
        </member>
        <member name="M:Orleans.IClusterClient.Connect">
            <summary>
            Starts the client and connects to the configured cluster.
            </summary>
            <remarks>This method may be called at-most-once per instance.</remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.IClusterClient.Close">
            <summary>
            Stops the client gracefully, disconnecting from the cluster.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.IClusterClient.Abort">
            <summary>
            Aborts the client ungracefully.
            </summary>
        </member>
        <member name="T:Orleans.ClusterClient">
            <summary>
            Client for communicating with clusters of Orleans silos.
            </summary>
        </member>
        <member name="M:Orleans.ClusterClient.#ctor(Orleans.OutsideRuntimeClient,Orleans.Runtime.Configuration.ClientConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.ClusterClient"/> class.
            </summary>
            <param name="runtimeClient">The runtime client.</param>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="P:Orleans.ClusterClient.IsInitialized">
            <inheritdoc />
        </member>
        <member name="P:Orleans.ClusterClient.GrainFactory">
            <inheritdoc />
        </member>
        <member name="P:Orleans.ClusterClient.Logger">
            <inheritdoc />
        </member>
        <member name="P:Orleans.ClusterClient.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="P:Orleans.ClusterClient.Configuration">
            <inheritdoc />
        </member>
        <member name="P:Orleans.ClusterClient.Orleans#IInternalClusterClient#StreamProviderRuntime">
            <inheritdoc />
        </member>
        <member name="P:Orleans.ClusterClient.InternalGrainFactory">
            <inheritdoc />
        </member>
        <member name="P:Orleans.ClusterClient.IsDisposing">
            <summary>
            Gets a value indicating whether or not this instance is being disposed.
            </summary>
        </member>
        <member name="M:Orleans.ClusterClient.GetStreamProviders">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetStreamProvider(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Connect">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Close">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Abort">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain``1(System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain``1(System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain``1(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain``1(System.Guid,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain``1(System.Int64,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.CreateObjectReference``1(Orleans.IGrainObserver)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.DeleteObjectReference``1(Orleans.IGrainObserver)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.BindGrainReference(Orleans.Runtime.IAddressable)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.CreateObjectReference``1(Orleans.Runtime.IAddressable)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Orleans#IInternalGrainFactory#GetSystemTarget``1(Orleans.Runtime.GrainId,Orleans.Runtime.SiloAddress)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Orleans#IInternalGrainFactory#Cast``1(Orleans.Runtime.IAddressable)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Orleans#IInternalGrainFactory#Cast(Orleans.Runtime.IAddressable,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Orleans#IInternalGrainFactory#GetGrain``1(Orleans.Runtime.GrainId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Orleans#IInternalGrainFactory#GetGrain(Orleans.Runtime.GrainId,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.LogConsistency.ILogConsistencyDiagnostics">
            <summary>
            Interface for diagnostics.
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ILogConsistencyDiagnostics.UnresolvedConnectionIssues">
            <summary>Gets a list of all currently unresolved connection issues.</summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogConsistencyDiagnostics.EnableStatsCollection">
            <summary>Turns on the statistics collection for this log-consistent grain.</summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogConsistencyDiagnostics.DisableStatsCollection">
            <summary>Turns off the statistics collection for this log-consistent grain.</summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogConsistencyDiagnostics.GetStats">
            <summary>Gets the collected statistics for this log-consistent grain.</summary>
        </member>
        <member name="T:Orleans.LogConsistency.LogConsistencyStatistics">
            <summary>
            A collection of statistics for grains using log-consistency. See <see cref="T:Orleans.LogConsistency.ILogConsistentGrain"/>
            </summary>
        </member>
        <member name="F:Orleans.LogConsistency.LogConsistencyStatistics.EventCounters">
            <summary>
            A map from event names to event counts
            </summary>
        </member>
        <member name="F:Orleans.LogConsistency.LogConsistencyStatistics.StabilizationLatenciesInMsecs">
            <summary>
            A list of all measured stabilization latencies
            </summary>
        </member>
        <member name="T:Orleans.LogConsistency.ConnectionIssue">
            <summary>
            Represents information about connection issues encountered inside log consistency protocols.
            It is used both inside the protocol to track retry loops, and is made visible to users 
            who want to monitor their log-consistent grains for communication issues.
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ConnectionIssue.TimeStamp">
            <summary>
            The UTC timestamp of the last time at which the issue was observed
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ConnectionIssue.TimeOfFirstFailure">
            <summary>
            The UTC timestamp of the first time we observed this issue
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ConnectionIssue.NumberOfConsecutiveFailures">
            <summary>
            The number of times we have observed this issue since the first failure
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ConnectionIssue.RetryDelay">
            <summary>
            The delay we are waiting before the next retry
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.ConnectionIssue.ComputeRetryDelay(System.Nullable{System.TimeSpan})">
            <summary>
            Computes the retry delay based on the rest of the information. Is overridden by subclasses
            that represent specific categories of issues.
            </summary>
            <param name="previous">The previously used retry delay</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.LogConsistency.NotificationFailed">
            <summary>
            Represents information about notification failures encountered inside log consistency protocols.
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.NotificationFailed.RemoteClusterId">
            <summary>
            The clusterId of the remote cluster to which we had an issue when sending change notifications.
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.NotificationFailed.Exception">
            <summary>
            The exception we caught, or null if the problem was not caused by an exception.
            </summary>
        </member>
        <member name="T:Orleans.LogConsistency.IConnectionIssueListener">
            <summary>
            An interface that is implemented by log-consistent grains using virtual protected methods
            that can be overridden by users, in order to monitor the connection issues.
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.IConnectionIssueListener.OnConnectionIssue(Orleans.LogConsistency.ConnectionIssue)">
            <summary>
            Called when running into some sort of connection trouble.
            The called code can modify the retry delay if desired, to change the default.
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.IConnectionIssueListener.OnConnectionIssueResolved(Orleans.LogConsistency.ConnectionIssue)">
            <summary>
            Called when a previously reported connection issue has been resolved.
            </summary>
        </member>
        <member name="T:Orleans.LogConsistency.ILogViewAdaptorHost`2">
            <summary>
            Interface implemented by all grains which use log-view consistency
            It gives the log view adaptor access to grain-specific information and callbacks.
            </summary>
            <typeparam name="TLogView">type of the log view</typeparam>
            <typeparam name="TLogEntry">type of log entries</typeparam>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewAdaptorHost`2.UpdateView(`0,`1)">
            <summary>
            Implementation of view transitions. 
            Any exceptions thrown will be caught and logged as a warning by <see cref="P:Orleans.LogConsistency.ILogConsistencyProvider.Log"/>.
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewAdaptorHost`2.OnViewChanged(System.Boolean,System.Boolean)">
            <summary>
            Notifies the host grain about state changes. 
            Called by <see cref="T:Orleans.LogConsistency.ILogViewAdaptor`2"/> whenever the tentative or confirmed state changes.
            Implementations may vary as to whether and how much they batch change notifications.
            Any exceptions thrown will be caught and logged as a warning  by <see cref="P:Orleans.LogConsistency.ILogConsistencyProvider.Log"/>.
            </summary>
        </member>
        <member name="T:Orleans.LogConsistency.ILogViewAdaptor`2">
             <summary>
             A log view adaptor is the storage interface for <see cref="T:Orleans.LogConsistency.ILogConsistentGrain"/>, whose state is defined as a log view. 
            <para>
             There is one adaptor per grain, which is installed by <see cref="T:Orleans.LogConsistency.ILogConsistencyProvider"/> when the grain is activated.
            </para>
             </summary>
             <typeparam name="TLogView"> Type for the log view </typeparam>
             <typeparam name="TLogEntry"> Type for the log entry </typeparam>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewAdaptor`2.PreOnActivate">
            <summary>Called during activation, right before the user-defined <see cref="M:Orleans.Grain.OnActivateAsync"/>.</summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewAdaptor`2.PostOnActivate">
            <summary>Called during activation, right after the user-defined <see cref="M:Orleans.Grain.OnActivateAsync"/>..</summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewAdaptor`2.PostOnDeactivate">
            <summary>Called during deactivation, right after the user-defined <see cref="M:Orleans.Grain.OnDeactivateAsync"/>.</summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewAdaptor`2.OnProtocolMessageReceived(Orleans.MultiCluster.ILogConsistencyProtocolMessage)">
            <summary>Called when a grain receives a message from a remote instance.</summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewAdaptor`2.OnMultiClusterConfigurationChange(Orleans.MultiCluster.MultiClusterConfiguration)">
            <summary>Called after the silo receives a new multi-cluster configuration.</summary>
        </member>
        <member name="T:Orleans.LogConsistency.ILogViewRead`2">
            <summary>
            Interface for reading the log view.
            </summary>
            <typeparam name="TView">The type of the view (state of the grain).</typeparam>
            <typeparam name="TLogEntry">The type of log entries.</typeparam>
        </member>
        <member name="P:Orleans.LogConsistency.ILogViewRead`2.TentativeView">
            <summary>
            Local, tentative view of the log (reflecting both confirmed and unconfirmed entries)
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ILogViewRead`2.ConfirmedView">
            <summary>
            Confirmed view of the log (reflecting only confirmed entries)
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ILogViewRead`2.ConfirmedVersion">
            <summary>
            The length of the confirmed prefix of the log
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ILogViewRead`2.UnconfirmedSuffix">
            <summary>
            A list of the submitted entries that do not yet appear in the confirmed prefix.
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewRead`2.RetrieveLogSegment(System.Int32,System.Int32)">
            <summary>
            Attempt to retrieve a segment of the log, possibly from storage. Throws <see cref="T:System.NotSupportedException"/> if
            the log cannot be read, which depends on the providers used and how they are configured.
            </summary>
            <param name="fromVersion">the start position </param>
            <param name="toVersion">the end position</param>
            <returns>a </returns>
        </member>
        <member name="T:Orleans.LogConsistency.ILogViewUpdate`1">
            <summary>
            Interface for updating the log.
            </summary>
            <typeparam name="TLogEntry">The type of log entries.</typeparam>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewUpdate`1.Submit(`0)">
            <summary>
            Submit a single log entry to be appended to the global log,
            either at the current or at any later position.
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewUpdate`1.SubmitRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Submit a range of log entries to be appended atomically to the global log,
            either at the current or at any later position.
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewUpdate`1.TryAppend(`0)">
            <summary>
            Try to append a single log entry at the current position of the log.
            </summary>
            <returns>true if the entry was appended successfully, or false 
            if there was a concurrency conflict (i.e. some other entries were previously appended).
            </returns>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewUpdate`1.TryAppendRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Try to append a range of log entries atomically at the current position of the log.
            </summary>
            <returns>true if the entries were appended successfully, or false 
            if there was a concurrency conflict (i.e. some other entries were previously appended).
            </returns>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewUpdate`1.ConfirmSubmittedEntries">
             <summary>
             Confirm all submitted entries.
            <para>Waits until all previously submitted entries appear in the confirmed prefix of the log.</para>
             </summary>
             <returns>A task that completes after all entries are confirmed.</returns>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewUpdate`1.Synchronize">
             <summary>
             Get the latest log view and confirm all submitted entries.
            <para>Waits until all previously submitted entries appear in the confirmed prefix of the log, and forces a refresh of the confirmed prefix.</para>
             </summary>
             <returns>A task that completes after getting the latest version and confirming all entries.</returns>
        </member>
        <member name="T:Orleans.LogConsistency.ILogConsistentGrain">
            <summary>
             This interface encapsulates functionality of grains that manage their state
             based on log consistency, such as JournaledGrain.
             It is the equivalent of <see cref="T:Orleans.IStatefulGrain"/> for log-consistent grains.
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogConsistentGrain.InstallAdaptor(Orleans.LogConsistency.ILogViewAdaptorFactory,System.Object,System.String,Orleans.Storage.IStorageProvider,Orleans.LogConsistency.ILogConsistencyProtocolServices)">
            <summary>
            called right after grain construction to install the log view adaptor 
            </summary>
            <param name="factory"> The adaptor factory to use </param>
            <param name="state"> The initial state of the view </param>
            <param name="grainTypeName"> The type name of the grain </param>
            <param name="storageProvider"> The storage provider, if needed </param>
            <param name="services"> Protocol services </param>
        </member>
        <member name="P:Orleans.LogConsistency.ILogConsistentGrain.DefaultAdaptorFactory">
            <summary>
            Gets the default adaptor factory to use, or null if there is no default 
            (in which case user MUST configure a consistency provider)
            </summary>
        </member>
        <member name="T:Orleans.LogConsistency.LogConsistentGrainBase`1">
            <summary>
            Base class for all grains that use log-consistency for managing  the state.
            It is the equivalent of <see cref="T:Orleans.Grain`1"/> for grains using log-consistency.
            (SiloAssemblyLoader uses it to extract type)
            </summary>
            <typeparam name="TView">The type of the view</typeparam>
        </member>
        <member name="T:Orleans.LogConsistency.ILogConsistencyProvider">
            <summary>
            Interface to be implemented for a log consistency provider.
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ILogConsistencyProvider.Log">
            <summary>Gets the TraceLogger used by this log-consistency provider.</summary>
        </member>
        <member name="T:Orleans.LogConsistency.ILogViewAdaptorFactory">
            <summary>
            Interface to be implemented for a log-view adaptor factory
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ILogViewAdaptorFactory.UsesStorageProvider">
            <summary> Returns true if a storage provider is required for constructing adaptors. </summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewAdaptorFactory.MakeLogViewAdaptor``2(Orleans.LogConsistency.ILogViewAdaptorHost{``0,``1},``0,System.String,Orleans.Storage.IStorageProvider,Orleans.LogConsistency.ILogConsistencyProtocolServices)">
            <summary>
            Construct a <see cref="T:Orleans.LogConsistency.ILogViewAdaptor`2"/> to be installed in the given host grain.
            </summary>
        </member>
        <member name="T:Orleans.LogConsistency.ILogConsistencyProtocolServices">
            <summary>
            Functionality for use by log view adaptors that use custom consistency or replication protocols.
            Abstracts communication between replicas of the log-consistent grain in different clusters.
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogConsistencyProtocolServices.SendMessage(Orleans.MultiCluster.ILogConsistencyProtocolMessage,System.String)">
            <summary>
            Send a message to a remote cluster.
            </summary>
            <param name="payload">the message</param>
            <param name="clusterId">the destination cluster id</param>
            <returns></returns>
        </member>
        <member name="P:Orleans.LogConsistency.ILogConsistencyProtocolServices.GrainReference">
            <summary>
            The untyped reference for this grain.
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ILogConsistencyProtocolServices.SerializationManager">
            <summary>
            The serialization manager.
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ILogConsistencyProtocolServices.RegistrationStrategy">
            <summary>
            The multicluster registration strategy for this grain.
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ILogConsistencyProtocolServices.MultiClusterEnabled">
            <summary>
            Whether this cluster is running in a multi-cluster network.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orleans.LogConsistency.ILogConsistencyProtocolServices.MyClusterId">
            <summary>
            The id of this cluster. Returns "I" if no multi-cluster network is present.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orleans.LogConsistency.ILogConsistencyProtocolServices.MultiClusterConfiguration">
            <summary>
            The current multicluster configuration of this silo 
            (as injected by the administrator) or null if none.
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ILogConsistencyProtocolServices.ActiveClusters">
            <summary>
            List of all clusters that currently appear to have at least one active
            gateway reporting to the multi-cluster network. 
            There are no guarantees that this membership view is complete or consistent.
            If there is no multi-cluster network, returns a list containing the single element "I".
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.LogConsistency.ILogConsistencyProtocolServices.ProtocolError(System.String,System.Boolean)">
            <summary>
            Log an error that occurred in a log-consistency protocol.
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogConsistencyProtocolServices.CaughtException(System.String,System.Exception)">
            <summary>
            Log an exception that was caught in the log-consistency protocol.
            </summary> 
        </member>
        <member name="M:Orleans.LogConsistency.ILogConsistencyProtocolServices.CaughtUserCodeException(System.String,System.String,System.Exception)">
            <summary>
            Log an exception that occurred in user code, for some callback
            </summary>
            <param name="callback">The name of the callback</param>
            <param name="where">The context from which the callback was called</param>
            <param name="e">The caught exception</param>
        </member>
        <member name="M:Orleans.LogConsistency.ILogConsistencyProtocolServices.Log(Orleans.Runtime.Severity,System.String,System.Object[])">
            <summary> Output the specified message at the specified log level. </summary>
        </member>
        <member name="T:Orleans.LogConsistency.ProtocolTransportException">
            <summary>
            Exception thrown by protocol messaging layer.
            </summary>
        </member>
        <member name="T:Orleans.MultiCluster.GatewayStatus">
            <summary>
            Multicluster Gateways are either active (silo is a gateway), 
            or Inactive (silo is not a gateway)
            </summary>
        </member>
        <member name="T:Orleans.MultiCluster.IMultiClusterGatewayInfo">
            <summary>
            Information about multicluster gateways
            </summary>
        </member>
        <member name="T:Orleans.MultiCluster.MultiClusterConfiguration">
            <summary>
            Multicluster configuration, as injected by user, and stored/transmitted in the multicluster network.
            </summary>
        </member>
        <member name="P:Orleans.MultiCluster.MultiClusterConfiguration.AdminTimestamp">
            <summary>
            The UTC timestamp of this configuration. 
            New configurations are injected by administrator.
            Newer configurations automatically replace older ones in the multicluster network.
            </summary>
        </member>
        <member name="P:Orleans.MultiCluster.MultiClusterConfiguration.Clusters">
            <summary>
            List of clusters that are joined to the multicluster.
            </summary>
        </member>
        <member name="P:Orleans.MultiCluster.MultiClusterConfiguration.Comment">
            <summary>
            A comment included by the administrator.
            </summary>
        </member>
        <member name="T:Orleans.MultiCluster.ILogConsistencyProtocolParticipant">
            <summary>
            Grain interface for grains that participate in multi-cluster log-consistency protocols.
            </summary>
        </member>
        <member name="M:Orleans.MultiCluster.ILogConsistencyProtocolParticipant.OnProtocolMessageReceived(Orleans.MultiCluster.ILogConsistencyProtocolMessage)">
            <summary>
            Called when a message is received from another cluster.
            This MUST interleave with other calls to avoid deadlocks.
            </summary>
            <param name="payload">the protocol message to be delivered</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.MultiCluster.ILogConsistencyProtocolParticipant.OnMultiClusterConfigurationChange(Orleans.MultiCluster.MultiClusterConfiguration)">
            <summary>
            Called when a configuration change notification is received.
            </summary>
            <param name="next">the next multi-cluster configuration</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.MultiCluster.ILogConsistencyProtocolParticipant.PreActivateProtocolParticipant">
            <summary>
            Called immediately before the user-level OnActivateAsync, on same scheduler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.MultiCluster.ILogConsistencyProtocolParticipant.PostActivateProtocolParticipant">
            <summary>
            Called immediately after the user-level OnActivateAsync, on same scheduler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.MultiCluster.ILogConsistencyProtocolParticipant.DeactivateProtocolParticipant">
            <summary>
            Called immediately after the user-level OnDeactivateAsync, on same scheduler.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.MultiCluster.ILogConsistencyProtocolMessage">
            <summary>
            interface to mark classes that represent protocol messages.
            All such classes must be serializable.
            </summary>
        </member>
        <member name="T:Orleans.MultiCluster.RegistrationAttribute">
            <summary>
            base class for multi cluster registration strategies.
            </summary>
        </member>
        <member name="T:Orleans.MultiCluster.GlobalSingleInstanceAttribute">
            <summary>
            This attribute indicates that instances of the marked grain class will have a single instance across all available clusters. Any requests in any clusters will be forwarded to the single activation instance.
            </summary>
        </member>
        <member name="T:Orleans.MultiCluster.OneInstancePerClusterAttribute">
            <summary>
            This attribute indicates that instances of the marked grain class
            will have an independent instance for each cluster with
            no coordination.
            </summary>
        </member>
        <member name="T:Orleans.GrainState">
            <summary>
            Base class for generated grain state classes.
            </summary>
        </member>
        <member name="M:Orleans.GrainState.#ctor(System.String)">
            <summary>Initializes a new instance of <see cref="T:Orleans.GrainState"/>.</summary>
            <param name="grainTypeFullName">The type of the associated grains that use this GrainState object. Used to initialize the <c>GrainType</c> property.</param>
        </member>
        <member name="M:Orleans.GrainState.#ctor">
            <summary>Initializes a new instance of <see cref="T:Orleans.GrainState"/>.</summary>
        </member>
        <member name="P:Orleans.GrainState.Etag">
            <summary>
            Opaque value set by the storage provider representing an 'Etag' setting for the last time the state data was read from backing store.
            </summary>
        </member>
        <member name="M:Orleans.GrainState.AsDictionary">
            <summary>
            Converts this property bag into a dictionary.
            This is a default Reflection-based implementation that can be overridden in the subclass or generated code.
            </summary>
            <returns>A Dictionary from string property name to property value.</returns>
        </member>
        <member name="M:Orleans.GrainState.SetAll(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Populates this property bag from a dictionary.
            This is a default Reflection-based implementation that can be overridden in the subclass or generated code.
            </summary>
            <param name="values">The Dictionary from string to object that contains the values
            for this property bag.</param>
        </member>
        <member name="M:Orleans.GrainState.ResetProperties">
            <summary>
            Resets properties of the state object to their default values.
            </summary>
        </member>
        <member name="T:Orleans.IGrainState">
            <summary>Defines the state of a grain</summary>
        </member>
        <member name="P:Orleans.IGrainState.State">
            <summary>The application level payload that is the actual state.</summary>
        </member>
        <member name="P:Orleans.IGrainState.ETag">
            <summary>An e-tag that allows optimistic concurrency checks at the storage provider level.</summary>
        </member>
        <member name="T:Orleans.GrainState`1">
            <summary>
            Typed default implementation of <see cref="T:Orleans.IGrainState"/>.
            </summary>
            <typeparam name="T">The type of application level payload.</typeparam>
        </member>
        <member name="P:Orleans.GrainState`1.ETag">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainState`1.#ctor">
            <summary>Initializes a new instance of <see cref="T:Orleans.GrainState`1"/>.</summary>
        </member>
        <member name="M:Orleans.GrainState`1.#ctor(`0)">
            <summary>Initializes a new instance of <see cref="T:Orleans.GrainState`1"/>.</summary>
            <param name="state"> The initial value of the state.</param>
        </member>
        <member name="M:Orleans.GrainState`1.#ctor(`0,System.String)">
            <summary>Initializes a new instance of <see cref="T:Orleans.GrainState`1"/>.</summary>
            <param name="state">The initial value of the state.</param>
            <param name="eTag">The initial e-tag value that allows optimistic concurrency checks at the storage provider level.</param>
        </member>
        <member name="T:Orleans.InterfaceToImplementationMappingCache">
            <summary>
            Maintains a map between grain classes and corresponding interface-implementation mappings.
            </summary>
        </member>
        <member name="F:Orleans.InterfaceToImplementationMappingCache.mappings">
            <summary>
            The map from implementation types to interface ids to map of method ids to method infos.
            </summary>
        </member>
        <member name="M:Orleans.InterfaceToImplementationMappingCache.GetOrCreate(System.Type,System.Int32)">
            <summary>
            Returns a mapping from method id to method info for the provided implementation and interface id.
            </summary>
            <param name="implementationType">The grain type.</param>
            <param name="interfaceId">The interface id.</param>
            <returns>
            A mapping from method id to method info.
            </returns>
        </member>
        <member name="M:Orleans.InterfaceToImplementationMappingCache.CreateInterfaceToImplementationMap(System.Type)">
            <summary>
            Maps the interfaces of the provided <paramref name="implementationType"/>.
            </summary>
            <param name="implementationType">The implementation type.</param>
            <returns>The mapped interface.</returns>
        </member>
        <member name="M:Orleans.InterfaceToImplementationMappingCache.CreateMapForNonGeneric(System.Type)">
            <summary>
            Creates and returns a map from interface id to map of method id to method info for the provided non-generic type.
            </summary>
            <param name="implementationType">The implementation type.</param>
            <returns>A map from interface id to map of method id to method info for the provided type.</returns>
        </member>
        <member name="M:Orleans.InterfaceToImplementationMappingCache.CreateMapForConstructedGeneric(System.Type)">
            <summary>
            Creates and returns a map from interface id to map of method id to method info for the provided constructed generic type.
            </summary>
            <param name="implementationType">The implementation type.</param>
            <returns>A map from interface id to map of method id to method info for the provided type.</returns>
        </member>
        <member name="T:Orleans.GrainDirectory.GrainDirectoryEntryStatus">
            <summary>
            Status of a directory entry with respect to multi-cluster registration
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.GrainDirectoryEntryStatus.Invalid">
            <summary>
            Used as a return value, indicating no registration present in directory.
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.GrainDirectoryEntryStatus.ClusterLocal">
            <summary>
            Used for normal grains that have no multi-cluster semantics.
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.GrainDirectoryEntryStatus.Owned">
            <summary>
            Registration that is owned by this cluster.
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.GrainDirectoryEntryStatus.Doubtful">
            <summary>
            Failed to contact one or more clusters while registering, so may be a duplicate.
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.GrainDirectoryEntryStatus.Cached">
            <summary>
            Cached reference to a registration owned by a remote cluster.
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.GrainDirectoryEntryStatus.RequestedOwnership">
            <summary>
            The cluster is in the process of checking remote clusters for existing registrations.
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.GrainDirectoryEntryStatus.RaceLoser">
            <summary>
            The cluster lost a race condition.
            </summary>
        </member>
        <member name="T:Orleans.GrainDirectory.IMultiClusterRegistrationStrategy">
            <summary>
            Interface for multi-cluster registration strategies. Used by protocols that coordinate multiple instances.
            </summary>
        </member>
        <member name="M:Orleans.GrainDirectory.IMultiClusterRegistrationStrategy.GetRemoteInstances(Orleans.MultiCluster.MultiClusterConfiguration,System.String)">
            <summary>
            Determines which remote clusters have instances.
            </summary>
            <param name="mcConfig">The multi-cluster configuration</param>
            <param name="myClusterId">The cluster id of this cluster</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.GrainDirectory.MultiClusterRegistrationStrategy">
            <summary>
            A superclass for all multi-cluster registration strategies.
            Strategy object which is used as keys to select the proper registrar.
            </summary>
        </member>
        <member name="T:Orleans.GrainDirectory.GlobalSingleInstanceRegistration">
            <summary>
            A multi-cluster registration strategy that uses the 
            the global-single-instance protocol to coordinate grain directories.
            </summary>
        </member>
        <member name="T:Orleans.GrainDirectory.IGrainDirectory">
            <summary>
            Recursive distributed operations on grain directories.
            Each operation may forward the request to a remote owner, increasing the hopCount.
            
            The methods here can be called remotely (where extended by IRemoteGrainDirectory) or
            locally (where extended by ILocalGrainDirectory)
            </summary>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainDirectory.RegisterAsync(Orleans.Runtime.ActivationAddress,System.Boolean,System.Int32)">
            <summary>
            Record a new grain activation by adding it to the directory.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="address">The address of the new activation.</param>
            <param name="singleActivation">If true, use single-activation mode: 
            If there is already an activation registered for this grain, then the new activation will
            not be registered and the address of the existing activation will be returned.
            Otherwise, the passed-in address will be returned.</param>
            <param name="hopCount">Counts recursion depth across silos</param>
            <returns>The registered address and the version associated with this directory mapping.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainDirectory.UnregisterAsync(Orleans.Runtime.ActivationAddress,Orleans.GrainDirectory.UnregistrationCause,System.Int32)">
            <summary>
            Removes the record for an existing activation from the directory service.
            This is used when an activation is being deleted.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="address">The address of the activation to remove.</param>
            <param name="hopCount">Counts recursion depth across silos</param>
            <param name="cause">The reason for unregistration</param>
            <returns>An acknowledgement that the unregistration has completed.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainDirectory.UnregisterManyAsync(System.Collections.Generic.List{Orleans.Runtime.ActivationAddress},Orleans.GrainDirectory.UnregistrationCause,System.Int32)">
            <summary>
            Unregister a batch of addresses at once
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="addresses"></param>
            <param name="hopCount">Counts recursion depth across silos</param>
            <param name="cause">The reason for unregistration</param>
            <returns>An acknowledgement that the unregistration has completed.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainDirectory.DeleteGrainAsync(Orleans.Runtime.GrainId,System.Int32)">
            <summary>
            Removes all directory information about a grain.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="grainId">The ID of the grain.</param>
            <param name="hopCount">Counts recursion depth across silos</param>
            <returns>An acknowledgement that the deletion has completed.
            It is safe to ignore this result.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainDirectory.LookupAsync(Orleans.Runtime.GrainId,System.Int32)">
            <summary>
            Fetches complete directory information for a grain.
            If there is no local information, then this method will query the appropriate remote directory node.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="grainId">The ID of the grain to look up.</param>
            <param name="hopCount">Counts recursion depth across silos</param>
            <returns>A list of all known activations of the grain, and the e-tag.</returns>
        </member>
        <member name="T:Orleans.GrainDirectory.UnregistrationCause">
            <summary>
            Indicates the reason for removing activations from the directory.
            This influences the conditions that are applied when determining whether or not to remove an entry.
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.UnregistrationCause.Force">
            <summary>
            Remove the directory entry forcefully, without any conditions
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.UnregistrationCause.CacheInvalidation">
            <summary>
            Remove the directory entry only if it points to an activation in a different cluster
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.UnregistrationCause.NonexistentActivation">
            <summary>
            Remove the directory entry only if it is not too fresh (to avoid races on new registrations)
            </summary>
        </member>
        <member name="T:Orleans.GrainDirectory.IGrainRegistrar">
            <summary>
            A grain registrar takes responsibility of coordinating the registration of a grains,
            possibly involving multiple clusters. 
            The grain registrar is called only on the silo that is the owner for that grain.
            </summary>
        </member>
        <member name="P:Orleans.GrainDirectory.IGrainRegistrar.IsSynchronous">
            <summary>
            Indicates whether this registrar can be called synchronously
            </summary>
            <returns>true if synchronous methods should be used, false if asynchronous methods should be used</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainRegistrar.Register(Orleans.Runtime.ActivationAddress,System.Boolean)">
            <summary>
            Registers a new activation with the directory service, synchronously.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="address">The address of the activation to register.</param>
            <param name="singleActivation">If true, use single-activation registration</param>
            <returns>The address registered for the grain's single activation.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainRegistrar.RegisterAsync(Orleans.Runtime.ActivationAddress,System.Boolean)">
            <summary>
            Registers a new activation with the directory service, asynchronously.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="address">The address of the activation to register.</param>
            <param name="singleActivation">If true, use single-activation registration</param>
            <returns>The address registered for the grain's single activation.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainRegistrar.Unregister(Orleans.Runtime.ActivationAddress,Orleans.GrainDirectory.UnregistrationCause)">
            <summary>
            Removes the given activation registration, synchronously.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="address">the activation to unregister</param>
            <param name="cause">The reason for unregistration</param>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainRegistrar.InvalidateCache(Orleans.Runtime.ActivationAddress)">
            <summary>
            Invalidates registrations that are caches, i.e. point to activations in other clusters
            </summary>
            <param name="address">the remote activation to remove from the cache</param>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainRegistrar.UnregisterAsync(System.Collections.Generic.List{Orleans.Runtime.ActivationAddress},Orleans.GrainDirectory.UnregistrationCause)">
            <summary>
            Removes the given activation registrations, asynchronously.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="addresses">the activations to unregister</param>
            <param name="cause">The reason for unregistration</param>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainRegistrar.Delete(Orleans.Runtime.GrainId)">
            <summary>
            Deletes all registrations for a grain, synchronously
            </summary>
            <param name="gid">The id of the grain</param>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainRegistrar.DeleteAsync(Orleans.Runtime.GrainId)">
            <summary>
            Deletes all registrations for a grain, asynchronously
            </summary>
            <param name="gid">The id of the grain</param>
        </member>
        <member name="T:Orleans.GrainDirectory.IGrainRegistrar`1">
            <summary>
            Interface for <see cref="T:Orleans.GrainDirectory.IGrainRegistrar"/> implementations which implement a given registration strategy.
            </summary>
            <typeparam name="TStrategy">The registration strategy.</typeparam>
        </member>
        <member name="T:Orleans.GrainDirectory.ClusterLocalRegistration">
            <summary>
            A multi-cluster registration strategy where each cluster has 
            its own independent directory. This is the default.
            </summary>
        </member>
        <member name="T:Orleans.Providers.IControllable">
            <summary>
            A general interface for controllable components inside Orleans runtime.
            </summary>
        </member>
        <member name="M:Orleans.Providers.IControllable.ExecuteCommand(System.Int32,System.Object)">
            <summary>
            A function to execute a control command.
            </summary>
            <param name="command">A serial number of the command.</param>
            <param name="arg">An opaque command argument</param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.PersistentStreamProvider`1">
            <summary>
            Persistent stream provider that uses an adapter for persistence
            </summary>
            <typeparam name="TAdapterFactory"></typeparam>
        </member>
        <member name="T:Orleans.Providers.Streams.SimpleMessageStream.SimpleMessageStreamProducerExtension">
            <summary>
            Multiplexes messages to mutiple different producers in the same grain over one grain-extension interface.
            
            On the silo, we have one extension per activation and this extesion multiplexes all streams on this activation 
                (different stream ids and different stream providers).
            On the client, we have one extension per stream (we bind an extesion for every StreamProducer, therefore every stream has its own extension).
            </summary>
        </member>
        <member name="T:Orleans.Providers.IBootstrapProvider">
            <summary>
            Marker interface to be implemented by any app bootstrap classes that want to be loaded and auto-run during silo startup
            </summary>
        </member>
        <member name="T:Orleans.Providers.IProvider">
            <summary>
            Base interface for all type-specific provider interfaces in Orleans
            </summary>
            <seealso cref="T:Orleans.Providers.IBootstrapProvider"/>
            <seealso cref="T:Orleans.Storage.IStorageProvider"/>
            <seealso cref="T:Orleans.LogConsistency.ILogConsistencyProvider"/>
        </member>
        <member name="P:Orleans.Providers.IProvider.Name">
            <summary>The name of this provider instance, as given to it in the config.</summary>
        </member>
        <member name="M:Orleans.Providers.IProvider.Init(System.String,Orleans.Providers.IProviderRuntime,Orleans.Providers.IProviderConfiguration)">
            <summary>
            Initialization function called by Orleans Provider Manager when a new provider class instance  is created
            </summary>
            <param name="name">Name assigned for this provider</param>
            <param name="providerRuntime">Callback for accessing system functions in the Provider Runtime</param>
            <param name="config">Configuration metadata to be used for this provider instance</param>
            <returns>Completion promise Task for the inttialization work for this provider</returns>
        </member>
        <member name="M:Orleans.Providers.IProvider.Close">
            <summary>Close function for this provider instance.</summary>
            <returns>Completion promise for the Close operation on this provider.</returns>
        </member>
        <member name="T:Orleans.Providers.IProviderManager">
            <summary>
            Internal provider management interface for instantiating dependent providers in a hierarchical tree of dependencies
            </summary>
        </member>
        <member name="M:Orleans.Providers.IProviderManager.GetProvider(System.String)">
            <summary>
            Call into Provider Manager for instantiating dependent providers in a hierarchical tree of dependencies
            </summary>
            <param name="name">Name of the provider to be found</param>
            <returns>Provider instance with the given name</returns>
        </member>
        <member name="T:Orleans.Providers.IProviderConfiguration">
            <summary>
            Configuration information that a provider receives
            </summary>
        </member>
        <member name="P:Orleans.Providers.IProviderConfiguration.Type">
            <summary>
            Full type name of this provider.
            </summary>
        </member>
        <member name="P:Orleans.Providers.IProviderConfiguration.Name">
            <summary>
            Name of this provider.
            </summary>
        </member>
        <member name="P:Orleans.Providers.IProviderConfiguration.Properties">
            <summary>
            Configuration properties for this provider instance, as name-value pairs.
            </summary>
        </member>
        <member name="P:Orleans.Providers.IProviderConfiguration.Children">
            <summary>
            Nested providers in case of a hierarchical tree of dependencies
            </summary>
        </member>
        <member name="M:Orleans.Providers.IProviderConfiguration.SetProperty(System.String,System.String)">
            <summary>
            Set a property in this provider configuration.
            If the property with this key already exists, it is been overwritten with the new value, otherwise it is just added.
            </summary>
            <param name="key">The key of the property</param>
            <param name="val">The value of the property</param>
            <returns>Provider instance with the given name</returns>
        </member>
        <member name="M:Orleans.Providers.IProviderConfiguration.RemoveProperty(System.String)">
            <summary>
            Removes a property in this provider configuration.
            </summary>
            <param name="key">The key of the property.</param>
            <returns>True if the property was found and removed, false otherwise.</returns>
        </member>
        <member name="T:Orleans.Providers.ProviderInitializationException">
            <summary>
            Exception thrown whenever a provider has failed to be initialized.
            </summary>
        </member>
        <member name="T:Orleans.Providers.IProviderRuntime">
            <summary>
            Interface to allow callbacks from providers into their assigned provider-manager.
            This allows access to runtime functionality, such as logging.
            </summary>
            <remarks>
            Passed to the provider during IProvider.Init call to that provider instance.
            </remarks>
            <seealso cref="T:Orleans.Providers.IProvider"/>
        </member>
        <member name="M:Orleans.Providers.IProviderRuntime.GetLogger(System.String)">
            <summary>
            Provides a logger to be used by the provider. 
            </summary>
            <param name="loggerName">Name of the logger being requested.</param>
            <returns>Object reference to the requested logger.</returns>
            <seealso cref="T:Orleans.Runtime.LoggerType"/>
        </member>
        <member name="P:Orleans.Providers.IProviderRuntime.ServiceId">
            <summary>
            Provides the ServiceId this cluster is running as.
            ServiceId's are intended to be long lived Id values for a particular service which will remain constant 
            even if the service is started / redeployed multiple times during its operations life.
            </summary>
            <returns>ServiceID Guid for this service.</returns>
        </member>
        <member name="P:Orleans.Providers.IProviderRuntime.SiloIdentity">
            <summary>
            A unique identifier for the current silo.
            There is no semantic content to this string, but it may be useful for logging.
            </summary>
        </member>
        <member name="P:Orleans.Providers.IProviderRuntime.GrainFactory">
            <summary>
            Factory for getting references to grains.
            </summary>
        </member>
        <member name="P:Orleans.Providers.IProviderRuntime.ServiceProvider">
            <summary>
            Service provider for dependency injection
            </summary>
        </member>
        <member name="M:Orleans.Providers.IProviderRuntime.SetInvokeInterceptor(Orleans.Providers.InvokeInterceptor)">
            <summary>
            Sets the invocation interceptor which will be invoked on each request.
            </summary>
        </member>
        <member name="M:Orleans.Providers.IProviderRuntime.GetInvokeInterceptor">
            <summary>
            Gets the invocation interceptor which will be invoked on each request.
            </summary>
        </member>
        <member name="T:Orleans.Providers.IStorageProviderRuntime">
            <summary>
            Provider-facing interface for manager of storage providers
            </summary>
        </member>
        <member name="T:Orleans.Providers.ILogConsistencyProviderRuntime">
            <summary>
            Provider-facing interface for log consistency
            </summary>
        </member>
        <member name="T:Orleans.Providers.InvokeInterceptor">
            <summary>
            Handles the invocation of the provided <paramref name="request"/>.
            </summary>
            <param name="targetMethod">The method on <paramref name="target"/> being invoked.</param>
            <param name="request">The request.</param>
            <param name="target">The invocation target.</param>
            <param name="invoker">
            The invoker which is used to dispatch the provided <paramref name="request"/> to the provided
            <paramref name="target"/>.
            </param>
            <returns>The result of invocation, which will be returned to the client.</returns>
        </member>
        <member name="T:Orleans.Providers.ProviderLoader`1">
            <summary>
            Providers configuration and loading error semantics:
            1) We will only load the providers that were specified in the config. 
            If a provider is not specified in the config, we will not attempt to load it.
            Specificaly, it means both storage and streaming providers are loaded only if configured.
            2) If a provider is specified in the config, but was not loaded (no type found, or constructor failed, or Init failed), the silo will fail to start.
            
            Loading providers workflow and error handling implementation:
            1) Load ProviderCategoryConfiguration.
                a) If CategoryConfiguration not found - it is not an error, continue.
            2) Go over all assemblies and load all found providers and instantiate them via ProviderTypeManager.
                a) If a certain found provider type failed to get instantiated, it is not an error, continue.
            3) Validate all providers were loaded: go over all provider config and check that we could indeed load and instantiate all of them.
                a) If failed to load or instantiate at least one configured provider, fail the silo start.
            4) InitProviders: call Init on all loaded providers. 
                a) Failure to init a provider wil result in silo failing to start.
            </summary>
            <typeparam name="TProvider"></typeparam>
        </member>
        <member name="T:Orleans.Providers.StorageProviderAttribute">
            <summary>
            The [Orleans.Providers.StorageProvider] attribute is used to define which storage provider to use for persistence of grain state.
            <para>
            Specifying [Orleans.Providers.StorageProvider] property is recommended for all grains which extend Grain&lt;T&gt;.
            If no [Orleans.Providers.StorageProvider] attribute is  specified, then a "Default" strorage provider will be used.
            If a suitable storage provider cannot be located for this grain, then the grain will fail to load into the Silo.
            </para>
            </summary>
        </member>
        <member name="P:Orleans.Providers.StorageProviderAttribute.ProviderName">
            <summary>
            The name of the provider to be used for persisting of grain state
            </summary>
        </member>
        <member name="T:Orleans.Providers.LogConsistencyProviderAttribute">
            <summary>
            The [Orleans.Providers.LogConsistencyProvider] attribute is used to define which consistency provider to use for grains using the log-view state abstraction.
            <para>
            Specifying [Orleans.Providers.LogConsistencyProvider] property is recommended for all grains that derive
            from ILogConsistentGrain, such as JournaledGrain.
            If no [Orleans.Providers.LogConsistencyProvider] attribute is  specified, then the runtime tries to locate
            one as follows. First, it looks for a
            "Default" provider in the configuration file, then it checks if the grain type defines a default.
            If a consistency provider cannot be located for this grain, then the grain will fail to load into the Silo.
            </para>
            </summary>
        </member>
        <member name="P:Orleans.Providers.LogConsistencyProviderAttribute.ProviderName">
            <summary>
            The name of the provider to be used for consistency
            </summary>
        </member>
        <member name="T:Orleans.Storage.Internal.MemoryStorageEtagMismatchException">
            <summary>Exception used to communicate with the storage provider, so that it throws this exception to its caller.</summary>
        </member>
        <member name="P:Orleans.Storage.Internal.MemoryStorageEtagMismatchException.StoredEtag">
            <summary>The Etag value currently held in persistent storage.</summary>
        </member>
        <member name="P:Orleans.Storage.Internal.MemoryStorageEtagMismatchException.ReceivedEtag">
            <summary>The Etag value currently help in memory, and attempting to be updated.</summary>
        </member>
        <member name="T:Orleans.Storage.IMemoryStorageGrain">
            <summary>
            Grain interface for internal memory storage grain used by Orleans in-memory storage provider.
            </summary>
        </member>
        <member name="M:Orleans.Storage.IMemoryStorageGrain.ReadStateAsync(System.String,System.String)">
            <summary>Async method to cause retrieval of the specified grain state data from memory store.</summary>
            <param name="stateStore">The name of the store that is used to store this grain state.</param>
            <param name="grainStoreKey">Store key for this grain.</param>
            <returns>Value promise for the currently stored grain state for the specified grain.</returns>
        </member>
        <member name="M:Orleans.Storage.IMemoryStorageGrain.WriteStateAsync(System.String,System.String,Orleans.IGrainState)">
            <summary>Async method to cause update of the specified grain state data into memory store.</summary>
            <param name="grainType">Type of the grain</param>
            <param name="grainId">Grain ID.</param>
            <param name="grainState">New state data to be stored for this grain.</param>
            <returns>Completion promise with new eTag for the update operation for stored grain state for the specified grain.</returns>
        </member>
        <member name="M:Orleans.Storage.IMemoryStorageGrain.DeleteStateAsync(System.String,System.String,System.String)">
            <param name="stateStore">The name of the store that is used to store this grain state.</param>
            <param name="grainStoreKey">Store key for this grain.</param>
            <param name="eTag">The previous etag that was read.</param>
            <returns>Completion promise for the update operation for stored grain state for the specified grain.</returns>
        </member>
        <member name="T:Orleans.Storage.IStorageProvider">
            <summary>
            Interface to be implemented for a storage provider able to read and write Orleans grain state data.
            </summary>
        </member>
        <member name="P:Orleans.Storage.IStorageProvider.Log">
            <summary>Logger used by this storage provider instance.</summary>
            <returns>Reference to the Logger object used by this provider.</returns>
            <seealso cref="T:Orleans.Runtime.Logger"/>
        </member>
        <member name="M:Orleans.Storage.IStorageProvider.ReadStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary>Read data function for this storage provider instance.</summary>
            <param name="grainType">Type of this grain [fully qualified class name]</param>
            <param name="grainReference">Grain reference object for this grain.</param>
            <param name="grainState">State data object to be populated for this grain.</param>
            <returns>Completion promise for the Read operation on the specified grain.</returns>
        </member>
        <member name="M:Orleans.Storage.IStorageProvider.WriteStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary>Write data function for this storage provider instance.</summary>
            <param name="grainType">Type of this grain [fully qualified class name]</param>
            <param name="grainReference">Grain reference object for this grain.</param>
            <param name="grainState">State data object to be written for this grain.</param>
            <returns>Completion promise for the Write operation on the specified grain.</returns>
        </member>
        <member name="M:Orleans.Storage.IStorageProvider.ClearStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary>Delete / Clear data function for this storage provider instance.</summary>
            <param name="grainType">Type of this grain [fully qualified class name]</param>
            <param name="grainReference">Grain reference object for this grain.</param>
            <param name="grainState">Copy of last-known state data object for this grain.</param>
            <returns>Completion promise for the Delete operation on the specified grain.</returns>
        </member>
        <member name="T:Orleans.Storage.IRestExceptionDecoder">
            <summary>
            Interface to be optionally implemented by storage providers to return richer exception details.
            </summary>
        </member>
        <member name="M:Orleans.Storage.IRestExceptionDecoder.DecodeException(System.Exception,System.Net.HttpStatusCode@,System.String@,System.Boolean)">
            <summary>
            Decode details of the exceprion
            </summary>
            <param name="e">Excption to decode</param>
            <param name="httpStatusCode">HTTP status code for the error</param>
            <param name="restStatus">REST status for the error</param>
            <param name="getExtendedErrors">Whether or not to extract REST error code</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Storage.BadProviderConfigException">
            <summary>
            Exception thrown whenever a grain call is attempted with a bad / missing storage provider configuration settings for that grain.
            </summary>
        </member>
        <member name="T:Orleans.Storage.InconsistentStateException">
            <summary>
            Exception thrown when a storage provider detects an Etag inconsistency when attempting to perform a WriteStateAsync operation.
            </summary>
        </member>
        <member name="P:Orleans.Storage.InconsistentStateException.IsSourceActivation">
            <summary>
            Whether or not this exception occurred on the current activation.
            </summary>
        </member>
        <member name="P:Orleans.Storage.InconsistentStateException.StoredEtag">
            <summary>The Etag value currently held in persistent storage.</summary>
        </member>
        <member name="P:Orleans.Storage.InconsistentStateException.CurrentEtag">
            <summary>The Etag value currently help in memory, and attempting to be updated.</summary>
        </member>
        <member name="T:Orleans.Serialization.ILBasedExceptionSerializer">
            <summary>
            Methods for serializing instances of <see cref="T:System.Exception"/> and its subclasses.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ILBasedExceptionSerializer.serializers">
            <summary>
            The collection of serializers.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ILBasedExceptionSerializer.exceptionFieldFilter">
            <summary>
            The field filter used for generating serializers for subclasses of <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ILBasedExceptionSerializer.fallbackBaseExceptionSerializer">
            <summary>
            The serializer used as a fallback when the concrete exception type is unavailable.
            </summary>
            <remarks>
            This serializer operates on <see cref="T:Orleans.Serialization.RemoteNonDeserializableException"/> instances, however it 
            includes only fields from <see cref="T:System.Exception"/> and no sub-class fields.
            </remarks>
        </member>
        <member name="F:Orleans.Serialization.ILBasedExceptionSerializer.generator">
            <summary>
            The serializer generator.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ILBasedExceptionSerializer.DeepCopy(System.Object,Orleans.Serialization.ICopyContext)">
            <summary>
            Returns a copy of the provided instance.
            </summary>
            <param name="original">The object to copy.</param>
            <param name="context">The copy context.</param>
            <returns>A copy of the provided instance.</returns>
        </member>
        <member name="T:Orleans.Serialization.ILBasedExceptionSerializer.ExceptionFieldInfoComparer">
            <summary>
            Field comparer which sorts fields on the Exception class higher than fields on sub classes.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.ILBasedExceptionSerializer.ExceptionFieldInfoComparer.Instance">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.IExternalSerializer">
            <summary>
            Interface that allows third-party serializers to perform serialization, even when
            the types being serialized are not known (generics) at initialization time.
            
            Types that inherit this interface are discovered through dependency injection and 
            automatically incorporated in the Serialization Manager.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.IExternalSerializer.Initialize(Orleans.Runtime.Logger)">
            <summary>
            Initializes the external serializer. Called once when the serialization manager creates 
            an instance of this type
            </summary>
        </member>
        <member name="M:Orleans.Serialization.IExternalSerializer.IsSupportedType(System.Type)">
            <summary>
            Informs the serialization manager whether this serializer supports the type for serialization.
            </summary>
            <param name="itemType">The type of the item to be serialized</param>
            <returns>A value indicating whether the item can be serialized.</returns>
        </member>
        <member name="M:Orleans.Serialization.IExternalSerializer.DeepCopy(System.Object,Orleans.Serialization.ICopyContext)">
            <summary>
            Tries to create a copy of source.
            </summary>
            <param name="source">The item to create a copy of</param>
            <param name="context">The context in which the object is being copied.</param>
            <returns>The copy</returns>
        </member>
        <member name="M:Orleans.Serialization.IExternalSerializer.Serialize(System.Object,Orleans.Serialization.ISerializationContext,System.Type)">
            <summary>
            Tries to serialize an item.
            </summary>
            <param name="item">The instance of the object being serialized</param>
            <param name="context">The context in which the object is being serialized.</param>
            <param name="expectedType">The type that the deserializer will expect</param>
        </member>
        <member name="M:Orleans.Serialization.IExternalSerializer.Deserialize(System.Type,Orleans.Serialization.IDeserializationContext)">
            <summary>
            Tries to deserialize an item.
            </summary>
            <param name="context">The context in which the object is being deserialized.</param>
            <param name="expectedType">The type that should be deserialized</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="T:Orleans.Serialization.ILBasedSerializer">
            <summary>
            Fallback serializer to be used when other serializers are unavailable.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ILBasedSerializer.generator">
            <summary>
            The serializer generator.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ILBasedSerializer.serializers">
            <summary>
            The collection of generated serializers.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ILBasedSerializer.thisSerializer">
            <summary>
            The serializer used when a concrete type is not known.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ILBasedSerializer.namedTypeSerializer">
            <summary>
            The serializer used for implementations of <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ILBasedSerializer.Initialize(Orleans.Runtime.Logger)">
            <summary>
            Initializes the external serializer. Called once when the serialization manager creates 
            an instance of this type
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ILBasedSerializer.IsSupportedType(System.Type)">
            <summary>
            Informs the serialization manager whether this serializer supports the type for serialization.
            </summary>
            <param name="t">The type of the item to be serialized</param>
            <returns>A value indicating whether the item can be serialized.</returns>
        </member>
        <member name="M:Orleans.Serialization.ILBasedSerializer.DeepCopy(System.Object,Orleans.Serialization.ICopyContext)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.ILBasedSerializer.Serialize(System.Object,Orleans.Serialization.ISerializationContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.ILBasedSerializer.Deserialize(System.Type,Orleans.Serialization.IDeserializationContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.ILBasedSerializer.SerializerBundle">
            <summary>
            This class primarily exists as a means to hold a reference to a <see cref="T:Orleans.Serialization.SerializationManager.SerializerMethods"/> structure.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ILFieldBuilder.GetOrCreateStaticField``1(``0)">
            <summary>
            Gets or creates a <see langword="static"/>, <see langword="readonly"/> field which holds the specified
            <paramref name="value"/>.
            </summary>
            <typeparam name="T">The underlying type of the provided value.</typeparam>
            <param name="value">The value.</param>
            <returns>The field which holds the provided <paramref name="value"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.ILFieldBuilder.GetOrCreateStaticField(System.Object,System.Type)">
            <summary>
            Gets or creates a <see langword="static"/>, <see langword="readonly"/> field which holds the specified
            <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="fieldType">The type of the resulting field.</param>
            <returns>The field which holds the provided <paramref name="value"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.ILFieldBuilder.CreateField(System.Object,System.Type)">
            <summary>
            Creates a static field in a new class and initializes it with the provided <paramref name="value"/>.
            </summary>
            <param name="value">The value to initialize the field with.</param>
            <param name="fieldType">The type of the resulting field.</param>
            <returns>The newly created static field.</returns>
        </member>
        <member name="M:Orleans.Serialization.ILSerializerGenerator.IsSupportedType(System.Reflection.TypeInfo)">
            <summary>
            Returns a value indicating whether the provided <paramref name="type"/> is supported.
            </summary>
            <param name="type">The type.</param>
            <returns>A value indicating whether the provided <paramref name="type"/> is supported.</returns>
        </member>
        <member name="M:Orleans.Serialization.ILSerializerGenerator.GenerateSerializer(System.Type,System.Func{System.Reflection.FieldInfo,System.Boolean},System.Func{System.Reflection.FieldInfo,System.Boolean},System.Collections.Generic.IComparer{System.Reflection.FieldInfo})">
            <summary>
            Generates a serializer for the specified type.
            </summary>
            <param name="type">The type to generate the serializer for.</param>
            <param name="serializationFieldsFilter">
            The predicate used in addition to the default logic to select which fields are included in serialization and deserialization.
            </param>
            <param name="copyFieldsFilter">
            The predicate used in addition to the default logic to select which fields are included in copying.
            </param>
            <param name="fieldComparer">The comparer used to sort fields, or <see langword="null"/> to use the default.</param>
            <returns>The generated serializer.</returns>
        </member>
        <member name="M:Orleans.Serialization.ILSerializerGenerator.GetFields(System.Type,System.Func{System.Reflection.FieldInfo,System.Boolean},System.Collections.Generic.IComparer{System.Reflection.FieldInfo})">
            <summary>
            Returns a sorted list of the fields of the provided type.
            </summary>
            <param name="type">The type.</param>
            <param name="fieldFilter">The predicate used in addition to the default logic to select which fields are included.</param>
            <param name="fieldInfoComparer">The comparer used to sort fields, or <see langword="null"/> to use the default.</param>
            <returns>A sorted list of the fields of the provided type.</returns>
        </member>
        <member name="M:Orleans.Serialization.ILSerializerGenerator.IsSupportedFieldType(System.Reflection.TypeInfo)">
            <summary>
            Returns a value indicating whether the provided type is supported as a field by this class.
            </summary>
            <param name="type">The type.</param>
            <returns>A value indicating whether the provided type is supported as a field by this class.</returns>
        </member>
        <member name="T:Orleans.Serialization.ILSerializerGenerator.FieldInfoComparer">
            <summary>
            A comparer for <see cref="T:System.Reflection.FieldInfo"/> which compares by name.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.ILSerializerGenerator.FieldInfoComparer.Instance">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.#ctor(Orleans.Serialization.ILFieldBuilder,System.String,System.Reflection.MethodInfo)">
            <summary>Creates a new instance of the <see cref="T:Orleans.Serialization.ILDelegateBuilder`1"/> class.</summary>
            <param name="fields">The field builder.</param>
            <param name="name">The name of the new delegate.</param>
            <param name="methodInfo">
            The method info for <typeparamref name="TDelegate"/> delegates, used for determining parameter types.
            </param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.DeclareLocal(System.Type)">
            <summary>
            Declares a local variable with the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>The newly declared local.</returns>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.LoadArgument(System.UInt16)">
            <summary>
            Loads the argument at the given index onto the stack.
            </summary>
            <param name="index">
            The index of the argument to load.
            </param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.LoadReferenceElement">
            <summary>
            Loads the element from the array on the stack at the given index onto the stack.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.LoadConstant(System.Int32)">
            <summary>
            Loads the provided constant integer value onto the stack.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.StoreLocal(Orleans.Serialization.ILDelegateBuilder{`0}.Local)">
            <summary>
            Pops the stack and stores it in the specified local.
            </summary>
            <param name="local">The local variable to store into.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.LoadLocal(Orleans.Serialization.ILDelegateBuilder{`0}.Local)">
            <summary>
            Pushes the specified local onto the stack.
            </summary>
            <param name="local">The local variable to load from.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.LoadField(System.Reflection.FieldInfo)">
            <summary>
            Loads the specified field onto the stack from the referenced popped from the stack.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.Box(System.Type)">
            <summary>
            Boxes the value on the top of the stack.
            </summary>
            <param name="type">The value type.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.LoadType(System.Type)">
            <summary>
            Loads the specified type and pushes it onto the stack.
            </summary>
            <param name="type">The type to load.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.Call(System.Reflection.MethodInfo)">
            <summary>
            Calls the specified method.
            </summary>
            <param name="method">The method to call.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.Return">
            <summary>
            Returns from the current method.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.StoreField(System.Reflection.FieldInfo)">
            <summary>
            Pops the value on the top of the stack and stores it in the specified field on the object popped from the top of the stack.
            </summary>
            <param name="field">The field to store into.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.LoadLocalAddress(Orleans.Serialization.ILDelegateBuilder{`0}.Local)">
            <summary>
            Pushes the address of the specified local onto the stack.
            </summary>
            <param name="local">The local variable.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.UnboxAny(System.Type)">
            <summary>
            Unboxes the value on the top of the stack.
            </summary>
            <param name="type">The value type.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.CastClass(System.Type)">
            <summary>
            Casts the object on the top of the stack to the specified type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.InitObject(System.Type)">
            <summary>
            Initializes the value type on the stack, setting all fields to their default value.
            </summary>
            <param name="type">The value type.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.NewObject(System.Reflection.ConstructorInfo)">
            <summary>
            Constructs a new instance of the object with the specified constructor.
            </summary>
            <param name="constructor">The constructor to call.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.CreateDelegate">
            <summary>
            Builds a delegate from the previously emitted instructions.
            </summary>
            <returns>The delegate.</returns>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.LoadLocalAsReference(System.Type,Orleans.Serialization.ILDelegateBuilder{`0}.Local)">
            <summary>
            Pushes the specified local variable as a reference onto the stack.
            </summary>
            <param name="type">The type.</param>
            <param name="local">The local.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.BoxIfValueType(System.Type)">
            <summary>
            Boxes the value on the top of the stack if it's a value type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.CastOrUnbox(System.Type)">
            <summary>
            Casts or unboxes the value at the top of the stack into the specified type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.CreateInstance(System.Type,Orleans.Serialization.ILDelegateBuilder{`0}.Local,System.Reflection.MethodInfo)">
            <summary>
            Creates a new instance of the specified type and stores it in the specified local.
            </summary>
            <param name="type">The type.</param>
            <param name="local">The local.</param>
            <param name="getUninitializedObject">The method used to get an uninitialized instance of a type.</param>
        </member>
        <member name="T:Orleans.Serialization.ILDelegateBuilder`1.Local">
            <summary>
            Represents a local variable created via a call to <see cref="M:Orleans.Serialization.ILDelegateBuilder`1.DeclareLocal(System.Type)"/>.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.IOnDeserialized">
            <summary>
            Indicates that a class is to be notified when it has been deserialized.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.IOnDeserialized.OnDeserialized(Orleans.Serialization.ISerializerContext)">
            <summary>
            Notifies this instance that it has been fully deserialized.
            </summary>
            <param name="context">The serializer context.</param>
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializer.GetDefaultSerializerSettings(Orleans.Serialization.SerializationManager,Orleans.IGrainFactory)">
            <summary>
            Returns the default serializer settings.
            </summary>
            <returns>The default serializer settings.</returns>
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializer.UpdateSerializerSettings(Newtonsoft.Json.JsonSerializerSettings,Orleans.Providers.IProviderConfiguration)">
            <summary>
            Customises the given serializer settings using provider configuration.
            Can be used by any provider, allowing the users to use a standard set of configuration attributes.
            </summary>
            <param name="settings">The settings to update.</param>
            <param name="config">The provider config.</param>
            <returns>The updated <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.</returns>
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializer.Initialize(Orleans.Runtime.Logger)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializer.IsSupportedType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializer.DeepCopy(System.Object,Orleans.Serialization.ICopyContext)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializer.Deserialize(System.Type,Orleans.Serialization.IDeserializationContext)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializer.Serialize(System.Object,Orleans.Serialization.ISerializationContext,System.Type)">
            <summary>
            Serializes an object to a binary stream
            </summary>
            <param name="item">The object to serialize</param>
            <param name="context">The serialization context.</param>
            <param name="expectedType">The type the deserializer should expect</param>
        </member>
        <member name="T:Orleans.Serialization.BinaryFormatterSerializer.DynamicBinder">
            <summary>
            This appears necessary because the BinaryFormatter by default will not see types
            that are defined by the InvokerGenerator.
            Needs to be public since it used by generated client code.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.OrleansSerializer.IsTypeShallowCopyable(System.Type)">
            <summary>        
            Returns <see langword="true"/> if instances of the provided type can be safely shallow-copied;
            otherwise <see langword="false"/>, indicating that instances must instead be deep-copied.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            <see langword="true"/> if instances of the provided type can be safely shallow-copied; otherwise
            <see langword="false"/>, indicating that instances must instead be deep-copied.
            </returns>
        </member>
        <member name="T:Orleans.Serialization.RemoteNonDeserializableException">
            <summary>
            Represents an exception which cannot be fully deserialized.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.RemoteNonDeserializableException.OriginalTypeName">
            <summary>
            Gets the type name of the original <see cref="T:System.Exception"/> represented by this instance.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.RemoteNonDeserializableException.AdditionalData">
            <summary>
            Gets or sets the additional data deserialized alongside this instance, for example, exception subclass fields.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.RemoteNonDeserializableException.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> representation of this instance.</returns>
        </member>
        <member name="M:Orleans.Serialization.RemoteNonDeserializableException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.TypeSerializer.GetTypeFromName(System.String,System.Boolean)">
            <summary>
            The method used by this instance to retrieve a type from an assembly-qualified name.
            </summary>
            <param name="assemblyQualifiedTypeName">The type name.</param>
            <param name="throwOnError">Whether or not to throw if the type could not be loaded.</param>
            <returns>The type, or <see langword="null"/> if the type could not be loaded.</returns>
        </member>
        <member name="M:Orleans.Serialization.TypeSerializer.GetNameFromType(System.Type)">
            <summary>
            The method used by this instance to retrieve an assembly-qualified name from a type.
            </summary>
            <param name="type">The type.</param>
            <returns>The assembly-qualified name of <paramref name="type"/>.</returns>
        </member>
        <member name="T:Orleans.Serialization.TypeSerializer.TypeKey">
            <summary>
            Represents a named type for the purposes of serialization.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.ReflectedSerializationMethodInfo">
            <summary>
            Holds references to methods which are used during serialization.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.GetStreamFromSerializationContext">
            <summary>
            A reference to the <see cref="P:Orleans.Serialization.ISerializationContext.StreamWriter"/> getter.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.GetStreamFromDeserializationContext">
            <summary>
            A reference to the getter for <see cref="P:Orleans.Serialization.IDeserializationContext.StreamReader"/>.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.RecordObjectWhileCopying">
            <summary>
            A reference to the <see cref="M:Orleans.Serialization.ICopyContext.RecordCopy(System.Object,System.Object)"/> method.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.DeepCopyInner">
            <summary>
            A reference to <see cref="M:Orleans.Serialization.SerializationManager.DeepCopyInner(System.Object,Orleans.Serialization.ICopyContext)"/>
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.SerializeInner">
            <summary>
            A reference to the <see cref="M:Orleans.Serialization.SerializationManager.SerializeInner(System.Object,Orleans.Serialization.ISerializationContext,System.Type)"/> method.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.DeserializeInner">
            <summary>
            A reference to the <see cref="M:Orleans.Serialization.SerializationManager.DeserializeInner(System.Type,Orleans.Serialization.IDeserializationContext)"/> method.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.RecordObjectWhileDeserializing">
            <summary>
            A reference to the <see cref="M:Orleans.Serialization.IDeserializationContext.RecordObject(System.Object)"/> method.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.GetUninitializedObject">
            <summary>
            A reference to a method which returns an uninitialized object of the provided type.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.GetTypeFromHandle">
            <summary>
            A reference to <see cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)"/>.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.SerializerDelegate">
            <summary>
            The <see cref="T:System.Reflection.MethodInfo"/> for the <see cref="T:Orleans.Serialization.SerializationManager.Serializer"/> delegate.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.DeserializerDelegate">
            <summary>
            The <see cref="T:System.Reflection.MethodInfo"/> for the <see cref="T:Orleans.Serialization.SerializationManager.Deserializer"/> delegate.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.DeepCopierDelegate">
            <summary>
            The <see cref="T:System.Reflection.MethodInfo"/> for the <see cref="T:Orleans.Serialization.SerializationManager.DeepCopier"/> delegate.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.BinaryTokenStreamReader">
            <summary>
            Reader for Orleans binary token streams
            </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.#ctor(System.Byte[])">
            <summary>
            Create a new BinaryTokenStreamReader to read from the specified input byte array.
            </summary>
            <param name="input">Input binary data to be tokenized.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.#ctor(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Create a new BinaryTokenStreamReader to read from the specified input buffers.
            </summary>
            <param name="buffs">The list of ArraySegments to use for the data.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.Reset(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Resets this instance with the provided data.
            </summary>
            <param name="buffs">The underlying buffers.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.#ctor(System.ArraySegment{System.Byte})">
            <summary>
            Create a new BinaryTokenStreamReader to read from the specified input buffer.
            </summary>
            <param name="buff">ArraySegment to use for the data.</param>
        </member>
        <member name="P:Orleans.Serialization.BinaryTokenStreamReader.CurrentPosition">
            <summary> Current read position in the stream. </summary>
        </member>
        <member name="P:Orleans.Serialization.BinaryTokenStreamReader.Length">
            <summary>
            Gets the total length.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.Copy">
            <summary>
            Creates a copy of the current stream reader.
            </summary>
            <returns>The new copy</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadInt">
            <summary> Read an <c>Int32</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadUInt">
            <summary> Read an <c>UInt32</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadShort">
            <summary> Read an <c>Int16</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadUShort">
            <summary> Read an <c>UInt16</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadLong">
            <summary> Read an <c>Int64</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadULong">
            <summary> Read an <c>UInt64</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadFloat">
            <summary> Read an <c>float</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadDouble">
            <summary> Read an <c>double</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadDecimal">
            <summary> Read an <c>decimal</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadString">
            <summary> Read an <c>string</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadBytes(System.Int32)">
            <summary> Read the next bytes from the stream. </summary>
            <param name="count">Number of bytes to read.</param>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadByteArray(System.Byte[],System.Int32,System.Int32)">
            <summary> Read the next bytes from the stream. </summary>
            <param name="destination">Output array to store the returned data in.</param>
            <param name="offset">Offset into the destination array to write to.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadChar">
            <summary> Read an <c>char</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadByte">
            <summary> Read an <c>byte</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadSByte">
            <summary> Read an <c>sbyte</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadIPAddress">
            <summary> Read an <c>IPAddress</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadIPEndPoint">
            <summary> Read an <c>IPEndPoint</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadSiloAddress">
            <summary> Read an <c>SiloAddress</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadGrainId">
            <summary> Read an <c>GrainId</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadActivationId">
            <summary> Read an <c>ActivationId</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadActivationAddress">
            <summary> Read an <c>ActivationAddress</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadBlockInto(System.Array,System.Int32)">
            <summary>
            Read a block of data into the specified output <c>Array</c>.
            </summary>
            <param name="array">Array to output the data to.</param>
            <param name="n">Number of bytes to read.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.PeekToken">
            <summary>
            Peek at the next token in this input stream.
            </summary>
            <returns>Next token thatr will be read from the stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadToken">
            <summary> Read a <c>SerializationTokenType</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadFullTypeHeader(Orleans.Serialization.SerializationManager,System.Type)">
            <summary> Read a <c>Type</c> value from the stream. </summary>
            <param name="serializationManager">The serialization manager used to resolve type names.</param>
            <param name="expected">Expected Type, if known.</param>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadSpecifiedTypeHeader(Orleans.Serialization.SerializationManager)">
            <summary> Read a <c>Type</c> value from the stream. </summary>
        </member>
        <member name="T:Orleans.Serialization.BinaryTokenStreamWriter">
            <summary>
            Writer for Orleans binary token streams
            </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.ToBytes">
            <summary> Return the output stream as a set of <c>ArraySegment</c>. </summary>
            <returns>Data from this stream, converted to output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.ToByteArray">
            <summary> Return the output stream as a <c>byte[]</c>. </summary>
            <returns>Data from this stream, converted to output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.ReleaseBuffers">
            <summary> Release any serialization buffers being used by this stream. </summary>
        </member>
        <member name="P:Orleans.Serialization.BinaryTokenStreamWriter.CurrentOffset">
            <summary> Current write position in the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Int32)">
            <summary> Write an <c>Int32</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Int16)">
            <summary> Write an <c>Int16</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Int64)">
            <summary> Write an <c>Int64</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.SByte)">
            <summary> Write a <c>sbyte</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.UInt32)">
            <summary> Write a <c>UInt32</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.UInt16)">
            <summary> Write a <c>UInt16</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.UInt64)">
            <summary> Write a <c>UInt64</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Byte)">
            <summary> Write a <c>byte</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Single)">
            <summary> Write a <c>float</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Double)">
            <summary> Write a <c>double</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Decimal)">
            <summary> Write a <c>decimal</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.String)">
            <summary> Write a <c>string</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Char)">
            <summary> Write a <c>char</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Boolean)">
            <summary> Write a <c>bool</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.WriteNull">
            <summary> Write a <c>null</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.WriteTypeHeader(System.Type,System.Type)">
            <summary> Write a type header for the specified Type to the stream. </summary>
            <param name="t">Type to write header for.</param>
            <param name="expected">Currently expected Type for this stream.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Byte[])">
            <summary> Write a <c>byte[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Collections.Generic.List{System.ArraySegment{System.Byte}})">
            <summary> Write a list of byte array segments to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary> Write the specified number of bytes to the stream, starting at the specified offset in the input <c>byte[]</c>. </summary>
            <param name="b">The input data to be written.</param>
            <param name="offset">The offset into the inout byte[] to start writing bytes from.</param>
            <param name="count">The number of bytes to be written.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Int16[])">
            <summary> Write a <c>Int16[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Int32[])">
            <summary> Write a <c>Int32[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Int64[])">
            <summary> Write a <c>Int64[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.UInt16[])">
            <summary> Write a <c>UInt16[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.UInt32[])">
            <summary> Write a <c>UInt32[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.UInt64[])">
            <summary> Write a <c>UInt64[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.SByte[])">
            <summary> Write a <c>sbyte[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Char[])">
            <summary> Write a <c>char[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Boolean[])">
            <summary> Write a <c>bool[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Double[])">
            <summary> Write a <c>double[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Single[])">
            <summary> Write a <c>float[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(Orleans.Runtime.CorrelationId)">
            <summary> Write a <c>CorrelationId</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Net.IPEndPoint)">
            <summary> Write a <c>IPEndPoint</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Net.IPAddress)">
            <summary> Write a <c>IPAddress</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(Orleans.Runtime.ActivationAddress)">
            <summary> Write a <c>ActivationAddress</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(Orleans.Runtime.SiloAddress)">
            <summary> Write a <c>SiloAddress</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(Orleans.Runtime.ActivationId)">
            <summary> Write a <c>ActivationId</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(Orleans.Runtime.GrainId)">
            <summary> Write a <c>GrainId</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.TimeSpan)">
            <summary> Write a <c>TimeSpan</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.DateTime)">
            <summary> Write a <c>DataTime</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Guid)">
            <summary> Write a <c>Guid</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.TryWriteSimpleObject(System.Object)">
            <summary>
            Try to write a simple type (non-array) value to the stream.
            </summary>
            <param name="obj">Input object to be written to the output stream.</param>
            <returns>Returns <c>true</c> if the value was successfully written to the output stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.WriteArrayHeader(System.Array,System.Type)">
            <summary>
            Write header for an <c>Array</c> to the output stream.
            </summary>
            <param name="a">Data object for which header should be written.</param>
            <param name="expected">The most recent Expected Type currently active for this stream.</param>
        </member>
        <member name="M:Orleans.Serialization.TypeUtilities.IsAccessibleFromAssembly(System.Type,System.Reflection.Assembly)">
            <summary>
            Returns <see langword="true"/> if a type is accessible from C# code from the specified assembly, and <see langword="false"/> otherwise.
            </summary>
            <param name="type"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Serialization.TypeUtilities.AreInternalsVisibleTo(System.Reflection.Assembly,System.Reflection.Assembly)">
            <summary>
            Returns true if <paramref name="fromAssembly"/> has exposed its internals to <paramref name="toAssembly"/>, false otherwise.
            </summary>
            <param name="fromAssembly">The assembly containing internal types.</param>
            <param name="toAssembly">The assembly requiring access to internal types.</param>
            <returns>
            true if <paramref name="fromAssembly"/> has exposed its internals to <paramref name="toAssembly"/>, false otherwise
            </returns>
        </member>
        <member name="M:Orleans.Serialization.BuiltInTypes.SerializeGenericLinkedList(System.Object,Orleans.Serialization.ISerializationContext,System.Type)">
            <summary>
            
            </summary>
            <param name="original"></param>
            <param name="context"></param>
            <param name="expected"></param>
        </member>
        <member name="P:Orleans.Serialization.IDeserializationContext.StreamReader">
            <summary>
            The stream reader.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.IDeserializationContext.CurrentObjectOffset">
            <summary>
            The offset of the current object in <see cref="P:Orleans.Serialization.IDeserializationContext.StreamReader"/>.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.IDeserializationContext.CurrentPosition">
            <summary>
            Gets the current position in the stream.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.IDeserializationContext.RecordObject(System.Object,System.Int32)">
            <summary>
            Records deserialization of the provided object.
            </summary>
            <param name="obj"></param>
            <param name="offset">The offset within <see cref="P:Orleans.Serialization.IDeserializationContext.StreamReader"/>.</param>
        </member>
        <member name="M:Orleans.Serialization.IDeserializationContext.RecordObject(System.Object)">
            <summary>
            Records deserialization of the provided object at the current object offset.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Orleans.Serialization.IDeserializationContext.FetchReferencedObject(System.Int32)">
            <summary>
            Returns the object from the specified offset.
            </summary>
            <param name="offset">The offset within <see cref="P:Orleans.Serialization.IDeserializationContext.StreamReader"/>.</param>
            <returns>The object from the specified offset.</returns>
        </member>
        <member name="M:Orleans.Serialization.DeserializationContextExtensions.CreateNestedContext(Orleans.Serialization.IDeserializationContext,System.Int32,Orleans.Serialization.BinaryTokenStreamReader)">
            <summary>
            Returns a new nested context which begins at the specified position.
            </summary>
            <param name="context"></param>
            <param name="position"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="P:Orleans.Serialization.DeserializationContext.SerializationManager">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Serialization.DeserializationContext.StreamReader">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Serialization.DeserializationContext.CurrentObjectOffset">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.DeserializationContext.RecordObject(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.DeserializationContext.RecordObject(System.Object,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.DeserializationContext.FetchReferencedObject(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.DeserializationContext.NestedDeserializationContext.#ctor(Orleans.Serialization.IDeserializationContext,System.Int32,Orleans.Serialization.BinaryTokenStreamReader)">
            <summary>
            Initializes a new <see cref="T:Orleans.Serialization.DeserializationContext.NestedDeserializationContext"/> instance.
            </summary>
            <param name="parent"></param>
            <param name="position">The position, relative to the outer-most context, at which this context begins.</param>
            <param name="reader"></param>
        </member>
        <member name="P:Orleans.Serialization.ISerializerContext.SerializationManager">
            <summary>
            Gets the serialization manager.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.ISerializerContext.ServiceProvider">
            <summary>
            Gets the service provider.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.ISerializerContext.AdditionalContext">
            <summary>
            Gets additional context associated with this instance.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ICopyContext.RecordCopy(System.Object,System.Object)">
            <summary>
            Record an object-to-copy mapping into the current serialization context.
            Used for maintaining the .NET object graph during serialization operations.
            Used in generated code.
            </summary>
            <param name="original">Original object.</param>
            <param name="copy">Copy object that will be the serialized form of the original.</param>
        </member>
        <member name="P:Orleans.Serialization.ISerializationContext.StreamWriter">
            <summary>
            Gets the stream writer.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ISerializationContext.RecordObject(System.Object,System.Int32)">
            <summary>
            Records the provided object at the specified offset into <see cref="P:Orleans.Serialization.ISerializationContext.StreamWriter"/>.
            </summary>
            <param name="original"></param>
            <param name="offset"></param>
        </member>
        <member name="T:Orleans.Serialization.SerializationContext">
            <summary>
            Maintains context information for current thread during serialization operations.
            </summary>
            <remarks>
            DeepCopier functions in Orleans generated code use the RecordObject method to 
            record the mapping of original object to the copied instance of that object
            so that object identity can be preserved when serializing .NET object graphs.
            </remarks>
        </member>
        <member name="P:Orleans.Serialization.SerializationContext.SerializationManager">
            <summary>
            Gets the serialization manager.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.SerializationContext.RecordCopy(System.Object,System.Object)">
            <summary>
            Record an object-to-copy mapping into the current serialization context.
            Used for maintaining the .NET object graph during serialization operations.
            Used in generated code.
            </summary>
            <param name="original">Original object.</param>
            <param name="copy">Copy object that will be the serialized form of the original.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationContext.NestedSerializationContext.#ctor(Orleans.Serialization.ISerializationContext,System.Int32,Orleans.Serialization.BinaryTokenStreamWriter)">
            <summary>
            Creates a new instance of the <see cref="T:Orleans.Serialization.SerializationContext.NestedSerializationContext"/> class.
            </summary>
            <param name="parent">The parent context.</param>
            <param name="offset">The absolute offset at which this stream begins.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Orleans.Serialization.SerializationManager">
            <summary>
            SerializationManager to oversee the Orleans serializer system.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.SerializationManager.DeepCopier">
            <summary>
            Deep copier function.
            </summary>
            <param name="original">Original object to be deep copied.</param>
            <param name="context">The serialization context.</param>
            <returns>Deep copy of the original object.</returns>
        </member>
        <member name="T:Orleans.Serialization.SerializationManager.Serializer">
            <summary> Serializer function. </summary>
            <param name="raw">Input object to be serialized.</param>
            <param name="context">The context under which this object is being serialized.</param>
            <param name="expected">Current Type active in this stream.</param>
        </member>
        <member name="T:Orleans.Serialization.SerializationManager.Deserializer">
            <summary>
            Deserializer function.
            </summary>
            <param name="expected">Expected Type to receive.</param>
            <param name="context">The context under which this object is being deserialized.</param>
            <returns>Rehydrated object of the specified Type read from the current position in the input stream.</returns>
        </member>
        <member name="T:Orleans.Serialization.SerializationManager.ValueTypeSetter`2">
            <summary>
            The delegate used to set fields in value types.
            </summary>
            <typeparam name="TDeclaring">The declaring type of the field.</typeparam>
            <typeparam name="TField">The field type.</typeparam>
            <param name="instance">The instance having its field set.</param>
            <param name="value">The value being set.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Register(System.Type,Orleans.Serialization.SerializationManager.DeepCopier,Orleans.Serialization.SerializationManager.Serializer,Orleans.Serialization.SerializationManager.Deserializer)">
            <summary>
            Register a Type with the serialization system to use the specified DeepCopier, Serializer and Deserializer functions.
            </summary>
            <param name="t">Type to be registered.</param>
            <param name="cop">DeepCopier function for this type.</param>
            <param name="ser">Serializer function for this type.</param>
            <param name="deser">Deserializer function for this type.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Register(System.Type,Orleans.Serialization.SerializationManager.DeepCopier,Orleans.Serialization.SerializationManager.Serializer,Orleans.Serialization.SerializationManager.Deserializer,System.Boolean)">
            <summary>
            Register a Type with the serialization system to use the specified DeepCopier, Serializer and Deserializer functions.
            If <c>forcOverride == true</c> then this definition will replace any any previous functions registered for this Type.
            </summary>
            <param name="t">Type to be registered.</param>
            <param name="cop">DeepCopier function for this type.</param>
            <param name="ser">Serializer function for this type.</param>
            <param name="deser">Deserializer function for this type.</param>
            <param name="forceOverride">Whether these functions should replace any previously registered functions for this Type.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Register(System.Type)">
            <summary>
            This method registers a type that has no specific serializer or deserializer.
            For instance, abstract base types and interfaces need to be registered this way.
            </summary>
            <param name="t">Type to be registered.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Register(System.Type,System.Type)">
            <summary>
            Registers <paramref name="serializerType"/> as the serializer for <paramref name="type"/>.
            </summary>
            <param name="type">The type serialized by the provided serializer type.</param>
            <param name="serializerType">The type containing serialization methods for <paramref name="type"/>.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.FindSerializationInfo(System.Type)">
            <summary>
            Looks for types with marked serializer and deserializer methods, and registers them if necessary.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.IsGeneratedGrainReference(System.Reflection.MemberInfo)">
            <summary>
            Returns <see langword="true"/> if the type is a generated <see cref="T:Orleans.Runtime.GrainReference"/>,
            <see langword="false"/> otherwise.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            <see langword="true"/> if the type is a generated <see cref="T:Orleans.Runtime.GrainReference"/>,
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.RegisterGrainReferenceSerializers(System.Type)">
            <summary>
            Registers <see cref="T:Orleans.Runtime.GrainReference"/> serializers for the provided <paramref name="type"/>.
            </summary>
            <param name="type">
            The type.
            </param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.DeepCopy(System.Object)">
            <summary>
            Deep copy the specified object, using DeepCopier functions previously registered for this type.
            </summary>
            <param name="original">The input data to be deep copied.</param>
            <returns>Deep copied clone of the original input object.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.DeepCopyInner(System.Object,Orleans.Serialization.ICopyContext)">
            <summary>
            <para>
            This method makes a deep copy of the object passed to it.
            </para>
            </summary>
            <param name="original">The input data to be deep copied.</param>
            <param name="context">The context.</param>
            <returns>Deep copied clone of the original input object.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.HasSerializer(System.Type)">
            <summary>
            Returns true if <paramref name="t"/> is serializable, false otherwise.
            </summary>
            <param name="t">The type.</param>
            <returns>true if <paramref name="t"/> is serializable, false otherwise.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Serialize(System.Object,Orleans.Serialization.BinaryTokenStreamWriter)">
            <summary>
            Serialize the specified object, using Serializer functions previously registered for this type.
            </summary>
            <param name="raw">The input data to be serialized.</param>
            <param name="stream">The output stream to write to.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.SerializeInner(System.Object,Orleans.Serialization.ISerializationContext,System.Type)">
            <summary>
            Encodes the object to the provided binary token stream.
            </summary>
            <param name="obj">The input data to be serialized.</param>
            <param name="context">The serialization context.</param>
            <param name="expected">Current expected Type on this stream.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.SerializeToByteArray(System.Object)">
            <summary>
            Serialize data into byte[].
            </summary>
            <param name="raw">Input data.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Deserialize(Orleans.Serialization.BinaryTokenStreamReader)">
            <summary>
            Deserialize the next object from the input binary stream.
            </summary>
            <param name="stream">Input stream.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Deserialize``1(Orleans.Serialization.BinaryTokenStreamReader)">
            <summary>
            Deserialize the next object from the input binary stream.
            </summary>
            <typeparam name="T">Type to return.</typeparam>
            <param name="stream">Input stream.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Deserialize(System.Type,Orleans.Serialization.BinaryTokenStreamReader)">
            <summary>
            Deserialize the next object from the input binary stream.
            </summary>
            <param name="t">Type to return.</param>
            <param name="stream">Input stream.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.DeserializeInner``1(Orleans.Serialization.IDeserializationContext)">
            <summary>
            Deserialize the next object from the input binary stream.
            </summary>
            <typeparam name="T">Type to return.</typeparam>
            <param name="context">Deserialization context.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.DeserializeInner(System.Type,Orleans.Serialization.IDeserializationContext)">
            <summary>
            Deserialize the next object from the input binary stream.
            </summary>
            <param name="expected">Type to return.</param>
            <param name="context">The deserialization context.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.DeserializeFromByteArray``1(System.Byte[])">
            <summary>
            Deserialize data from the specified byte[] and rehydrate backi into objects.
            </summary>
            <typeparam name="T">Type of data to be returned.</typeparam>
            <param name="data">Input data.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.GetGetDelegate(System.Reflection.FieldInfo,System.Type,System.Type[])">
            <summary>
            Returns a delegate to get the value of a specified field.
            </summary>
            <param name="field">
            The field.
            </param>
            <param name="delegateType">The delegate type.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>A delegate to get the value of a specified field.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.GetReferenceSetter(System.Reflection.FieldInfo)">
            <summary>
            Returns a delegate to set the value of this field for an instance.
            </summary>
            <returns>A delegate to set the value of this field for an instance.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.GetValueSetter(System.Reflection.FieldInfo)">
            <summary>
            Returns a delegate to set the value of this field for an instance.
            </summary>
            <returns>A delegate to set the value of this field for an instance.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.GetSetDelegate(System.Reflection.FieldInfo,System.Type,System.Type[])">
            <summary>
            Returns a delegate to set the value of a specified field.
            </summary>
            <param name="field">
            The field.
            </param>
            <param name="delegateType">The delegate type.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>A delegate to set the value of a specified field.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.RoundTripSerializationForTesting``1(``0)">
            <summary>
            Internal test method to do a round-trip Serialize+Deserialize loop
            </summary>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.RegisterSerializationProviders(System.Collections.Generic.List{System.Reflection.TypeInfo})">
            <summary>
            Loads the external srializers and places them into a hash set
            </summary>
            <param name="providerTypes">The list of types that implement <see cref="T:Orleans.Serialization.IExternalSerializer"/></param>
        </member>
        <member name="M:Orleans.Core.GrainStateStorageBridge.ReadStateAsync">
            <summary>
            Async method to cause refresh of the current grain state data from backing store.
            Any previous contents of the grain state data will be overwritten.
            </summary>
        </member>
        <member name="M:Orleans.Core.GrainStateStorageBridge.WriteStateAsync">
            <summary>
            Async method to cause write of the current grain state data into backing store.
            </summary>
        </member>
        <member name="M:Orleans.Core.GrainStateStorageBridge.ClearStateAsync">
            <summary>
            Async method to cause write of the current grain state data into backing store.
            </summary>
        </member>
        <member name="M:Orleans.Core.IStorage.ClearStateAsync">
            <summary>
            Async method to cause the current grain state data to be cleared and reset. 
            This will usually mean the state record is deleted from backing store, but the specific behavior is defined by the storage provider instance configured for this grain.
            If Etags do not match, then this operation will fail; Set Etag = <c>null</c> to indicate "always delete".
            </summary>
        </member>
        <member name="M:Orleans.Core.IStorage.WriteStateAsync">
            <summary>
            Async method to cause write of the current grain state data into backing store.
            If Etags do not match, then this operation will fail; Set Etag = <c>null</c> to indicate "always overwrite".
            </summary>
        </member>
        <member name="M:Orleans.Core.IStorage.ReadStateAsync">
            <summary>
            Async method to cause refresh of the current grain state data from backing store.
            Any previous contents of the grain state data will be overwritten.
            </summary>
        </member>
        <member name="T:Orleans.Messaging.GatewayManager">
             <summary>
             The GatewayManager class holds the list of known gateways, as well as maintaining the list of "dead" gateways.
            
             The known list can come from one of two places: the full list may appear in the client configuration object, or
             the config object may contain an IGatewayListProvider delegate. If both appear, then the delegate takes priority.
             </summary>
        </member>
        <member name="M:Orleans.Messaging.GatewayManager.GetLiveGateway">
             <summary>
             Selects a gateway to use for a new bucket.
            
             Note that if a list provider delegate was given, the delegate is invoked every time this method is called.
             This method performs caching to avoid hammering the ultimate data source.
            
             This implementation does a simple round robin selection. It assumes that the gateway list from the provider
             is in the same order every time.
             </summary>
             <returns></returns>
        </member>
        <member name="T:Orleans.Messaging.GatewayClientReceiver">
            <summary>
            The Receiver class is used by the GatewayConnection to receive messages. It runs its own thread, but it performs all i/o operations synchronously.
            </summary>
        </member>
        <member name="T:Orleans.Messaging.GatewayConnection">
            <summary>
            The GatewayConnection class does double duty as both the manager of the connection itself (the socket) and the sender of messages
            to the gateway. It uses a single instance of the Receiver class to handle messages from the gateway.
            
            Note that both sends and receives are synchronous.
            </summary>
        </member>
        <member name="T:Orleans.Messaging.IGatewayListProvider">
            <summary>
            Interface that provides Orleans gateways information.
            </summary>
        </member>
        <member name="M:Orleans.Messaging.IGatewayListProvider.InitializeGatewayListProvider(Orleans.Runtime.Configuration.ClientConfiguration,Orleans.Runtime.Logger)">
            <summary>
            Initializes the provider, will be called before all other methods
            </summary>
            <param name="clientConfiguration">the given client configuration</param>
            <param name="logger">the logger to be used by the provider</param>
        </member>
        <member name="M:Orleans.Messaging.IGatewayListProvider.GetGateways">
            <summary>
            Returns the list of gateways (silos) that can be used by a client to connect to Orleans cluster.
            The Uri is in the form of: "gwy.tcp://IP:port/Generation". See Utils.ToGatewayUri and Utils.ToSiloAddress for more details about Uri format.
            </summary>
        </member>
        <member name="P:Orleans.Messaging.IGatewayListProvider.MaxStaleness">
            <summary>
            Specifies how often this IGatewayListProvider is refreshed, to have a bound on max staleness of its returned information.
            </summary>
        </member>
        <member name="P:Orleans.Messaging.IGatewayListProvider.IsUpdatable">
            <summary>
            Specifies whether this IGatewayListProvider ever refreshes its returned information, or always returns the same gw list.
            (currently only the static config based StaticGatewayListProvider is not updatable. All others are.)
            </summary>
        </member>
        <member name="T:Orleans.Messaging.IGatewayListListener">
            <summary>
            A listener interface for optional GatewayList notifications provided by the IGatewayListObservable interface.
            </summary>
        </member>
        <member name="T:Orleans.Messaging.IGatewayListObservable">
            <summary>
            An optional interface that GatewayListProvider may implement if it support out of band gw update notifications.
            By default GatewayListProvider should suppport pull based queries (GetGateways).
            Optionally, some GatewayListProviders may be able to notify a listener if an updated gw information is available.
            This is optional and not required.
            </summary>
        </member>
        <member name="M:Orleans.Messaging.ProxiedMessageCenter.Disconnect">
            <summary>
            For testing use only
            </summary>
        </member>
        <member name="M:Orleans.Messaging.ProxiedMessageCenter.Reconnect">
            <summary>
            For testing use only.
            </summary>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain``1(System.Guid,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface to get.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns>A reference to the specified grain.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain``1(System.Int64,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface to get.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns>A reference to the specified grain.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain``1(System.String,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface to get.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns>A reference to the specified grain.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain``1(System.Guid,System.String,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface to get.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="keyExtension">The key extension of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns>A reference to the specified grain.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain``1(System.Int64,System.String,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface to get.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="keyExtension">The key extension of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns>A reference to the specified grain.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.CreateObjectReference``1(Orleans.IGrainObserver)">
            <summary>
            Creates a reference to the provided <paramref name="obj"/>.
            </summary>
            <typeparam name="TGrainObserverInterface">
            The specific <see cref="T:Orleans.IGrainObserver"/> type of <paramref name="obj"/>.
            </typeparam>
            <param name="obj">The object to create a reference to.</param>
            <returns>The reference to <paramref name="obj"/>.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.DeleteObjectReference``1(Orleans.IGrainObserver)">
            <summary>
            Deletes the provided object reference.
            </summary>
            <typeparam name="TGrainObserverInterface">
            The specific <see cref="T:Orleans.IGrainObserver"/> type of <paramref name="obj"/>.
            </typeparam>
            <param name="obj">The reference being deleted.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.BindGrainReference(Orleans.Runtime.IAddressable)">
            <summary>
            Binds the provided grain reference to this instance.
            </summary>
            <param name="grain">The grain reference.</param>
        </member>
        <member name="T:Orleans.Streams.ImplicitConsumerGrainExtensions">
            <summary>
            Extension methods for grains implicitly subscribed to streams.
            </summary>
        </member>
        <member name="M:Orleans.Streams.ImplicitConsumerGrainExtensions.GetImplicitStreamIdentity(Orleans.IGrainWithGuidCompoundKey)">
            <summary>
            Constructs <see cref="T:Orleans.Streams.StreamIdentity"/> of the stream that the grain is implicitly subscribed to.
            </summary>
            <param name="grain">The implicitly subscribed grain.</param>
            <returns>The stream identity (key + namespace).</returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionChangeHandler.HandleNewSubscription(Orleans.Runtime.GuidId,Orleans.Streams.StreamId,System.Type)">
            <summary>
            This method finds the correct IStreamSubscriptionObserver based on item's type, and invoke its OnNewSubscription method
            </summary>
            <param name="subscriptionId"></param>
            <param name="streamId"></param>
            <param name="messageType"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.StreamSubscriptionObserverProxy`1">
            <summary>
            Decorator class for a IStreamSubscriptionObserver. Created mainly to avoid using reflection to invoke
            methods on IStreamSubscriptionObserver.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Orleans.Streams.RegexStreamNamespacePredicate">
            <summary>
            <see cref="T:Orleans.Streams.IStreamNamespacePredicate"/> implementation allowing to filter stream namespaces by regular
            expression.
            </summary>
        </member>
        <member name="M:Orleans.Streams.RegexStreamNamespacePredicate.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Creates an instance of <see cref="T:Orleans.Streams.RegexStreamNamespacePredicate"/> with the specified regular expression.
            </summary>
            <param name="regex">The stream namespace regular expression.</param>
        </member>
        <member name="M:Orleans.Streams.RegexStreamNamespacePredicate.IsMatch(System.String)">
            <inheritdoc cref="T:Orleans.Streams.IStreamNamespacePredicate"/>
        </member>
        <member name="T:Orleans.Streams.IStreamNamespacePredicate">
            <summary>
            Stream namespace predicate used for filtering implicit subscriptions using 
            <see cref="T:Orleans.ImplicitStreamSubscriptionAttribute"/>.
            </summary>
            <remarks>All implementations must be serializable.</remarks>
        </member>
        <member name="M:Orleans.Streams.IStreamNamespacePredicate.IsMatch(System.String)">
            <summary>
            Defines if the consumer grain should subscribe to the specified namespace.
            </summary>
            <param name="streamNamespace">The target stream namespace to check.</param>
            <returns><c>true</c>, if the grain should subscribe to the specified namespace; <c>false</c>, otherwise.
            </returns>
        </member>
        <member name="T:Orleans.Streams.StreamIdentity">
            <summary>
            Stream identity contains the public stream information use to uniquely identify a stream.
            Stream identities are only unique per stream provider.
            </summary>
        </member>
        <member name="P:Orleans.Streams.StreamIdentity.Guid">
            <summary>
            Stream primary key guid.
            </summary>
        </member>
        <member name="P:Orleans.Streams.StreamIdentity.Namespace">
            <summary>
            Stream namespace.
            </summary>
        </member>
        <member name="T:Orleans.Streams.IDeploymentConfiguration">
            <summary>
            Interface for accessing the deployment configuration.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IDeploymentConfiguration.GetAllSiloNames">
            <summary>
            Get the silo instance names for all configured silos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.NoOpStreamDeliveryFailureHandler.OnDeliveryFailure(Orleans.Runtime.GuidId,System.String,Orleans.Streams.IStreamIdentity,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Should be called when an event could not be delivered to a consumer, after exhausting retry attempts.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamFailureHandler.OnDeliveryFailure(Orleans.Runtime.GuidId,System.String,Orleans.Streams.IStreamIdentity,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Should be called once all measures to deliver an event to a consumer have been exhausted.
            </summary>
            <param name="subscriptionId"></param>
            <param name="streamProviderName"></param>
            <param name="streamIdentity"></param>
            <param name="sequenceToken"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IStreamFailureHandler.OnSubscriptionFailure(Orleans.Runtime.GuidId,System.String,Orleans.Streams.IStreamIdentity,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Should be called when establishing a subsription failed.
            </summary>
            <param name="subscriptionId"></param>
            <param name="streamProviderName"></param>
            <param name="streamIdentity"></param>
            <param name="sequenceToken"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.StreamEventDeliveryFailureException">
            <summary>
            This exception indicates that a stream event was not successfully delivered to the consumer.
            </summary>
        </member>
        <member name="T:Orleans.Streams.FaultedSubscriptionException">
            <summary>
            This exception indicates that an error has occured on a stream subscription that has placed the subscription into
             a faulted state.  Work on faulted subscriptions should be abandoned.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueFlowController.GetMaxAddCount">
            <summary>
            The limit of the maximum number of items that can be added
            </summary>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegte that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="onCompletedAsync">Delegte that is called for IAsyncObserver.OnCompletedAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.</returns>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegte that is called for IAsyncObserver.OnErrorAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.</returns>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onCompletedAsync">Delegte that is called for IAsyncObserver.OnCompletedAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.</returns>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.</returns>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegte that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="onCompletedAsync">Delegte that is called for IAsyncObserver.OnCompletedAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <param name="filterFunc">Filter to be applied for this subscription</param>
            <param name="filterData">Data object that will be passed in to the filterFunc.
            This will usually contain any paramaters required by the filterFunc to make it's filtering decision.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegte that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <param name="filterFunc">Filter to be applied for this subscription</param>
            <param name="filterData">Data object that will be passed in to the filterFunc.
            This will usually contain any paramaters required by the filterFunc to make it's filtering decision.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onCompletedAsync">Delegte that is called for IAsyncObserver.OnCompletedAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <param name="filterFunc">Filter to be applied for this subscription</param>
            <param name="filterData">Data object that will be passed in to the filterFunc.
            This will usually contain any paramaters required by the filterFunc to make it's filtering decision.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <param name="filterFunc">Filter to be applied for this subscription</param>
            <param name="filterData">Data object that will be passed in to the filterFunc.
            This will usually contain any paramaters required by the filterFunc to make it's filtering decision.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resumes consumption of a stream using delegates.
            This method is a helper for the StreamSubscriptionHandle.ResumeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="handle">The subscription handle.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegte that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="onCompletedAsync">Delegte that is called for IAsyncObserver.OnCompletedAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resumes consumption of a stream using delegates.
            This method is a helper for the StreamSubscriptionHandle.ResumeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="handle">The subscription handle.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegte that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resumes consumption of a stream using delegates.
            This method is a helper for the StreamSubscriptionHandle.ResumeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="handle">The subscription handle.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onCompletedAsync">Delegte that is called for IAsyncObserver.OnCompletedAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="handle">The subscription handle.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
        </member>
        <member name="T:Orleans.Streams.GenericAsyncObserver`1">
            <summary>
            Class used by the IAsyncObservable extension methods to allow observation via delegate.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
        </member>
        <member name="T:Orleans.Streams.IStreamQueueBalancer">
            <summary>
            The stream queue balancer is responsible for load balancing queues across all other related queue balancers.  It
            notifies any listeners (<code>IStreamQueueBalanceListener</code>) of changes to the distribution of queues.
            Method GetMyQueues, SubscribeToQueueDistributionChangeEvents, and UnSubscribeFromQueueDistributionChangeEvents will 
            likely be called in the IStreamQueueBalanceListener's thread so they need to be thread safe
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalancer.Initialize(System.String,Orleans.Streams.IStreamQueueMapper,System.TimeSpan)">
            <summary>
            Initialize this instance
            </summary>
            <param name="strProviderName"></param>
            <param name="queueMapper"></param>
            <param name="siloMaturityPeriod"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalancer.GetMyQueues">
            <summary>
            Retrieves the latest queue distribution for this balancer.
            </summary>
            <returns>Queue allocated to this balancer.</returns>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalancer.SubscribeToQueueDistributionChangeEvents(Orleans.Streams.IStreamQueueBalanceListener)">
            <summary>
            Subscribe to receive queue distribution change notifications
            </summary>
            <param name="observer">An observer interface to receive queue distribution change notifications.</param>
            <returns>Bool value indicating that subscription succeeded or not.</returns>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalancer.UnSubscribeFromQueueDistributionChangeEvents(Orleans.Streams.IStreamQueueBalanceListener)">
            <summary>
            Unsubscribe from receiving queue distribution notifications
            </summary>
            <param name="observer">An observer interface to receive queue distribution change notifications.</param>
            <returns>Bool value indicating that unsubscription succeeded or not</returns>
        </member>
        <member name="T:Orleans.Streams.IStreamQueueBalanceListener">
            <summary>
            The stream queue balancer listener receives notifications from a stream queue balancer (<code>IStreamQueueBalancer</code>)
            indicating that the balance of queues has changed.
            It should be implemented by components interested in stream queue load balancing.
            When change notification is received, listener should request updated list of queues from the queue balancer.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalanceListener.QueueDistributionChangeNotification">
            <summary>
            Receive notifications about adapter queue responsibility changes. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.FilterPredicateWrapperData">
            <summary>
            This class is a [Serializable] function pointer to a static predicate method, used for stream filtering.
            The predicate function / lamda is not directly serialized, only the class / method info details required to reconstruct the function reference on the other side.
            Predicate filter functions must be staic (non-abstract) methods, so full class name and method name are sufficient info to rehydrate.
            </summary>
        </member>
        <member name="M:Orleans.Streams.FilterPredicateWrapperData.CheckFilterPredicateFunc(Orleans.Streams.StreamFilterPredicate)">
            <summary>
            Check that the user-supplied stream predicate function is valid.
            Stream predicate functions must be static and not abstract.
            </summary>
        </member>
        <member name="T:Orleans.Streams.IStreamFilterPredicateWrapper">
            <summary>
            Filter predicate for streams. 
            Classes implementing this interface MUST be [Serializable]
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamFilterPredicateWrapper.ShouldReceive(Orleans.Streams.IStreamIdentity,System.Object,System.Object)">
            <summary>
            Should this item be delivered to the intended receiver?
            </summary>
            <param name="stream"></param>
            <param name="filterData"></param>
            <param name="item">Item sent through the stream.</param>
            <returns>Return <c>true</c> if this item should be delivered to the intended recipient.</returns>
        </member>
        <member name="T:Orleans.Streams.IAsyncObservable`1">
            <summary>
            This interface generalizes the standard .NET IObserveable interface to allow asynchronous consumption of items.
            Asynchronous here means that the consumer can process items asynchronously and signal item completion to the 
            producer by completing the returned Task.
            <para>
            Note that this interface is invoked (used) by item consumers and implemented by item producers.
            This means that the producer endpoint of a stream implements this interface.
            </para>
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
        </member>
        <member name="M:Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0})">
            <summary>
            Subscribe a consumer to this observable.
            </summary>
            <param name="observer">The asynchronous observer to subscribe.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)">
            <summary>
            Subscribe a consumer to this observable.
            </summary>
            <param name="observer">The asynchronous observer to subscribe.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <param name="filterFunc">Filter to be applied for this subscription</param>
            <param name="filterData">Data object that will be passed in to the filterFunc.
            This will usually contain any paramaters required by the filterFunc to make it's filtering decision.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
        </member>
        <member name="T:Orleans.Streams.IStreamControl">
            <summary>
            Stream control interface to allow stream runtime to perform management operations on streams 
            without needing to worry about concrete generic types used by this stream
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamControl.Cleanup(System.Boolean,System.Boolean)">
            <summary>
            Perform cleanup functions for this stream.
            </summary>
            <returns>Completion promise for the cleanup operstions for this stream.</returns>
        </member>
        <member name="P:Orleans.Streams.IStreamIdentity.Guid">
            <summary> Stream primary key guid. </summary>
        </member>
        <member name="P:Orleans.Streams.IStreamIdentity.Namespace">
            <summary> Stream namespace. </summary>
        </member>
        <member name="T:Orleans.Streams.ProviderStartException">
            <summary>
            Exception thrown whenever a provider has failed to be started.
            </summary>
        </member>
        <member name="T:Orleans.Streams.IStreamProviderRuntime">
            <summary>
            Provider-facing interface for manager of streaming providers
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamProviderRuntime.ExecutingEntityIdentity">
            <summary>
            Retrieves the opaque identity of currently executing grain or client object. 
            </summary>
            <remarks>Exposed for logging purposes.</remarks>
        </member>
        <member name="M:Orleans.Streams.IStreamProviderRuntime.GetStreamDirectory">
            <summary>
            Returns the stream directory.
            </summary>
            <returns>The stream directory.</returns>
        </member>
        <member name="M:Orleans.Streams.IStreamProviderRuntime.BindExtension``2(System.Func{``0})">
            <summary>
            Binds an extension to an addressable object, if not already done.
            </summary>
            <typeparam name="TExtension">The type of the extension (e.g. StreamConsumerExtension).</typeparam>
            <typeparam name="TExtensionInterface">The public interface type of the implementation.</typeparam>
            <param name="newExtensionFunc">A factory function that constructs a new extension object.</param>
            <returns>A tuple, containing first the extension and second an addressable reference to the extension's interface.</returns>
        </member>
        <member name="M:Orleans.Streams.IStreamProviderRuntime.PubSub(Orleans.Streams.StreamPubSubType)">
            <summary>
            A Pub Sub runtime interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IStreamProviderRuntime.GetConsistentRingProvider(System.Int32,System.Int32)">
            <summary>A consistent ring interface.</summary>
            <param name="mySubRangeIndex">Index of the silo in the ring.</param>
            <param name="numSubRanges">Total number of sub ranges within this silo range.</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.ISiloSideStreamProviderRuntime">
            <summary>
            Provider-facing interface for manager of streaming providers
            </summary>
        </member>
        <member name="M:Orleans.Streams.ISiloSideStreamProviderRuntime.InitializePullingAgents(System.String,Orleans.Streams.IQueueAdapterFactory,Orleans.Streams.IQueueAdapter,Orleans.Streams.PersistentStreamProviderConfig)">
            <summary>Start the pulling agents for a given persistent stream provider.</summary>
        </member>
        <member name="P:Orleans.Streams.PersistentStreamProviderConfig.BalancerType">
            <summary>
            The queue balancer type for your stream provider. If you are using a custom queue balancer by injecting IStreamQueueBalancer as a transient service into DI,
            you should use your custom balancer's type
            </summary>
        </member>
        <member name="M:Orleans.Streams.PersistentStreamProviderConfig.WriteProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Utility function to convert config to property bag for use in stream provider configuration
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.DataNotAvailableException">
            <summary>
            Exception indicates that the requested data is not available.
            </summary>
        </member>
        <member name="T:Orleans.Streams.IConsistentRingStreamQueueMapper">
            <summary>
            The stream queue mapper is responsible for mapping ring ranges from the load balancing ring provider to stream queues.
            Implementation must be thread safe.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueCache.AddToCache(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer})">
            <summary>
            Add messages to the cache
            </summary>
            <param name="messages"></param>
        </member>
        <member name="M:Orleans.Streams.IQueueCache.TryPurgeFromCache(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer}@)">
            <summary>
            Ask the cache if it has items that can be purged from the cache 
            (so that they can be subsequently released them the underlying queue).
            </summary>
            <param name="purgedItems"></param>
        </member>
        <member name="M:Orleans.Streams.IQueueCache.GetCacheCursor(Orleans.Streams.IStreamIdentity,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Acquire a stream message cursor.  This can be used to retreave messages from the
              cache starting at the location indicated by the provided token.
            </summary>
            <param name="streamIdentity"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueCache.IsUnderPressure">
            <summary>
            Returns true if this cache is under pressure.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterCache.CreateQueueCache(Orleans.Streams.QueueId)">
            <summary>
            Create a cache for a given queue id
            </summary>
            <param name="queueId"></param>
        </member>
        <member name="T:Orleans.Streams.IQueueAdapterReceiver">
            <summary>
            Receives batches of messages from a single partition of a message queue.  
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterReceiver.Initialize(System.TimeSpan)">
            <summary>
            Initialize this receiver.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterReceiver.GetQueueMessagesAsync(System.Int32)">
            <summary>
            Retrieves batches from a message queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterReceiver.MessagesDeliveredAsync(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer})">
            <summary>
            Notifies the adapter receiver that the mesages were delivered to all consumers,
            so the receiver can take an appropriate action (e.g., delete the messages from a message queue).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterReceiver.Shutdown(System.TimeSpan)">
            <summary>
            Receiver is no longer used.  Shutdown and clean up.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.IQueueCacheCursor">
            <summary>
            Enumerates the messages in a stream
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueCacheCursor.GetCurrent(System.Exception@)">
            <summary>
            Get the current value.
            </summary>
            <param name="exception"></param>
            <returns>
            Returns the current batch container.
            If null then the stream has completed or there was a stream error.  
            If there was a stream error, an error exception will be provided in the output.
            </returns>
        </member>
        <member name="M:Orleans.Streams.IQueueCacheCursor.MoveNext">
            <summary>
            Move to next message in the stream.
            If it returns false, there are no more messages.  The enumerator is still
             valid howerver and can be called again when more data has come in on this
             stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueCacheCursor.Refresh(Orleans.Streams.StreamSequenceToken)">
            <summary>
            Refresh that cache cursor. Called when new data is added into a cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueCacheCursor.RecordDeliveryFailure">
            <summary>
            Record that delivery of the current event has failed
            </summary>
        </member>
        <member name="T:Orleans.Streams.OrFilter">
            <summary>
            This class is a [Serializable] holder for a logical-or composite predicate function.
            </summary>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.InitImplicitStreamSubscribers(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Initializes any implicit stream subscriptions specified for a grain class type. If the grain class specified does not have any associated namespaces, then nothing is done.</summary>
            <param name="grainClasses">A grain class type.</param>
            <exception cref="T:System.ArgumentException">
            Duplicate specification of namespace "...".
            </exception>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.GetImplicitSubscribers(Orleans.Streams.StreamId,Orleans.IInternalGrainFactory)">
            <summary>
            Retrieve a map of implicit subscriptionsIds to implicit subscribers, given a stream ID. This method throws an exception if there's no namespace associated with the stream ID.
            </summary>
            <param name="streamId">A stream ID.</param>
            <param name="grainFactory">The grain factory used to get consumer references.</param>
            <returns>A set of references to implicitly subscribed grains. They are expected to support the streaming consumer extension.</returns>
            <exception cref="T:System.ArgumentException">The stream ID doesn't have an associated namespace.</exception>
            <exception cref="T:System.InvalidOperationException">Internal invariant violation.</exception>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.IsImplicitSubscriber(Orleans.Runtime.GrainId,Orleans.Streams.StreamId)">
            <summary>
            Determines whether the specified grain is an implicit subscriber of a given stream.
            </summary>
            <param name="grainId">The grain identifier.</param>
            <param name="streamId">The stream identifier.</param>
            <returns>true if the grain id describes an implicit subscriber of the stream described by the stream id.</returns>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.TryGetImplicitSubscriptionGuid(Orleans.Runtime.GrainId,Orleans.Streams.StreamId,System.Guid@)">
            <summary>
            Try to get the implicit subscriptionId.
            If an implicit subscription exists, return a subscription Id that is unique per grain type, grainId, namespace combination.
            </summary>
            <param name="grainId"></param>
            <param name="streamId"></param>
            <param name="subscriptionId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.MakeSubscriptionGuid(Orleans.Runtime.GrainId,Orleans.Streams.StreamId)">
            <summary>
            Create a subscriptionId that is unique per grainId, grainType, namespace combination.
            </summary>
            <param name="grainId"></param>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.MakeSubscriptionGuid(System.Int32,Orleans.Streams.StreamId)">
            <summary>
            Create a subscriptionId that is unique per grainId, grainType, namespace combination.
            </summary>
            <param name="grainIdTypeCode"></param>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.FindImplicitSubscriberTypeCodes(System.String)">
            <summary>
            Finds all implicit subscribed for the given stream namespace.
            </summary>
            <param name="streamNamespace">The stream namespace to find subscribers too.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.MakeConsumerReference(Orleans.IInternalGrainFactory,Orleans.Streams.StreamId,System.Int32)">
            <summary>
            Create a reference to a grain that we expect to support the stream consumer extension.
            </summary>
            <param name="grainFactory">The grain factory used to get consumer references.</param>
            <param name="streamId">The stream ID to use for the grain ID construction.</param>
            <param name="implTypeCode">The type code of the grain interface.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.GetPredicatesFromAttributes(System.Type)">
            <summary>
            Collects the namespace predicates associated with a grain class type through the use of
            <see cref="T:Orleans.ImplicitStreamSubscriptionAttribute"/>.
            </summary>
            <param name="grainClass">A grain class type that might have
            attributes of type <see cref="T:Orleans.ImplicitStreamSubscriptionAttribute"/>  associated with it.</param>
            <returns>The list of stream namespace predicates.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="grainClass"/> does not describe a grain class.</exception>
        </member>
        <member name="T:Orleans.Streams.QueueCacheMissException">
            <summary>
            Exception indicates that the requested message is not in the queue cache.
            </summary>
        </member>
        <member name="T:Orleans.Streams.SubscriptionMarker">
            <summary>
            Mark a subscriptionId as either an implicit subscription Id, or a explicit subscription Id.
            high bit of last byte in guild is the subscription type flag.
            1: implicit subscription
            0: explicit subscription
            </summary>
        </member>
        <member name="T:Orleans.Streams.IBatchContainer">
            <summary>
            Each queue message is allowed to be a heterogeneous  ordered set of events.  IBatchContainer contains these events and allows users to query the batch for a specific type of event.
            </summary>
        </member>
        <member name="P:Orleans.Streams.IBatchContainer.StreamGuid">
            <summary>
            Stream identifier for the stream this batch is part of.
            </summary>
        </member>
        <member name="P:Orleans.Streams.IBatchContainer.StreamNamespace">
            <summary>
            Stream namespace for the stream this batch is part of.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IBatchContainer.GetEvents``1">
            <summary>
            Gets events of a specific type from the batch.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Orleans.Streams.IBatchContainer.SequenceToken">
            <summary>
            Stream Sequence Token for the start of this batch.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IBatchContainer.ImportRequestContext">
            <summary>
            Gives an opportunity to IBatchContainer to set any data in the RequestContext before this IBatchContainer is sent to consumers.
            It can be the data that was set at the time event was generated and enqueued into the persistent provider or any other data.
            </summary>
            <returns>True if the RequestContext was indeed modified, false otherwise.</returns>
        </member>
        <member name="M:Orleans.Streams.IBatchContainer.ShouldDeliver(Orleans.Streams.IStreamIdentity,System.Object,Orleans.Streams.StreamFilterPredicate)">
            <summary>
            Decide whether this batch should be sent to the specified target.
            </summary>
        </member>
        <member name="T:Orleans.Streams.IQueueAdapter">
            <summary>
            Stream queue storage adapter.  This is an abstraction layer that hides the implementation details of the underlying queuing system.
            </summary>
        </member>
        <member name="P:Orleans.Streams.IQueueAdapter.Name">
            <summary>
            Name of the adapter. Primarily for logging purposes
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapter.QueueMessageBatchAsync``1(System.Guid,System.String,System.Collections.Generic.IEnumerable{``0},Orleans.Streams.StreamSequenceToken,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Writes a set of events to the queue as a single batch associated with the provided streamId.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="streamGuid"></param>
            <param name="streamNamespace"></param>
            <param name="events"></param>
            <param name="token"></param>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapter.CreateReceiver(Orleans.Streams.QueueId)">
            <summary>
            Creates a quere receiver for the specificed queueId
            </summary>
            <param name="queueId"></param>
            <returns></returns>
        </member>
        <member name="P:Orleans.Streams.IQueueAdapter.IsRewindable">
            <summary>
            Determines whether this is a rewindable stream adapter - supports subscribing from previous point in time.
            </summary>
            <returns>True if this is a rewindable stream adapter, false otherwise.</returns>
        </member>
        <member name="P:Orleans.Streams.IQueueAdapter.Direction">
            <summary>
            Direction of this queue adapter: Read, Write or ReadWrite.
            </summary>
            <returns>The direction in which this adapter provides data.</returns>
        </member>
        <member name="M:Orleans.Streams.QueueAdapterExtensions.QueueMessageAsync``1(Orleans.Streams.IQueueAdapter,System.Guid,System.String,``0,Orleans.Streams.StreamSequenceToken,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Writes a set of events to the queue as a single batch associated with the provided streamId.</summary>
        </member>
        <member name="T:Orleans.Streams.IQueueAdapterFactory">
            <summary>
            Adapter factory.  This should create an adapter from the stream provider configuration
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterFactory.CreateAdapter">
            <summary>
            Create queue adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterFactory.GetQueueAdapterCache">
            <summary>
            Create queue message cache adapter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterFactory.GetStreamQueueMapper">
            <summary>
            Create queue mapper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterFactory.GetDeliveryFailureHandler(Orleans.Streams.QueueId)">
            <summary>
            Aquire delivery failure handler for a queue
            </summary>
            <param name="queueId"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.StreamConsumerExtension">
            <summary>
            The extesion multiplexes all stream related messages to this grain between different streams and their stream observers.
            
            On the silo, we have one extension object per activation and this extesion multiplexes all streams on this activation 
                (streams of all types and ids: different stream ids and different stream providers).
            On the client, we have one extension per stream (we bind an extesion for every StreamConsumer, therefore every stream has its own extension).
            </summary>
        </member>
        <member name="T:Orleans.Streams.StreamDirectory">
            <summary>
            Stores all streams associated with a specific silo
            </summary>
        </member>
        <member name="M:Orleans.Streams.StreamImpl`1.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called by BinaryFormatter after deserialization has completed.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Orleans.Streams.IStreamQueueMapper">
            <summary>
            The stream queue mapper returns a list of all queues and is also responsible for mapping streams to queues.
            Implementation must be thread safe.
            </summary>
        </member>
        <member name="T:Orleans.Streams.QueueId">
            <summary>
            Identifier of a durable queue.
            Used by Orlens streaming extensions.
            </summary>
        </member>
        <member name="T:Orleans.Streams.StreamId">
            <summary>
            Identifier of an Orleans virtual stream.
            </summary>
        </member>
        <member name="T:Orleans.Streams.StreamSequenceToken">
            <summary>
            Handle representing stream sequence number/token.
            Consumer may subsribe to the stream while specifying the start of the subsription sequence token.
            That means that the stream infarstructure will deliver stream events starting from this sequence token.
            </summary>
        </member>
        <member name="T:Orleans.Streams.StreamSubscriptionHandle`1">
            <summary>
            Handle representing this subsription.
            Consumer may serialize and store the handle in order to unsubsribe later, for example
            in another activation on this grain.
            </summary>
        </member>
        <member name="P:Orleans.Streams.StreamSubscriptionHandle`1.HandleId">
            <summary>
            Unique identifier for this StreamSubscriptionHandle
            </summary>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandle`1.UnsubscribeAsync">
            <summary>
            Unsubscribe a stream consumer from this observable.
            </summary>
            <returns>A promise to unsubscription action.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandle`1.ResumeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resumed consumption from a subscription to a stream.
            </summary>
            <param name="observer">The Observer object.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise with an updates subscription handle.
            </returns>
        </member>
        <member name="T:Orleans.Streams.IAsyncObserver`1">
            <summary>
            This interface generalizes the standard .NET IObserver interface to allow asynchronous production of items.
            <para>
            Note that this interface is implemented by item consumers and invoked (used) by item producers.
            This means that the consumer endpoint of a stream implements this interface.
            </para>
            </summary>
            <typeparam name="T">The type of object consumed by the observer.</typeparam>
        </member>
        <member name="M:Orleans.Streams.IAsyncObserver`1.OnNextAsync(`0,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Passes the next item to the consumer.
            <para>
            The Task returned from this method should be completed when the item's processing has been
            sufficiently processed by the consumer to meet any behavioral guarantees.
            </para>
            <para>
            When the consumer is the (producer endpoint of) a stream, the Task is completed when the stream implementation
            has accepted responsibility for the item and is assured of meeting its delivery guarantees.
            For instance, a stream based on a durable queue would complete the Task when the item has been durably saved.
            A stream that provides best-effort at most once delivery would return a Task that is already complete.
            </para>
            <para>
            When the producer is the (consumer endpoint of) a stream, the Task should be completed by the consumer code
            when it has accepted responsibility for the item. 
            In particular, if the stream provider guarantees at-least-once delivery, then the item should not be considered
            delivered until the Task returned by the consumer has been completed.
            </para>
            </summary>
            <param name="item">The item to be passed.</param>
            <param name="token">The stream sequence token of this item.</param>
            <returns>A Task that is completed when the item has been accepted.</returns>
        </member>
        <member name="M:Orleans.Streams.IAsyncObserver`1.OnCompletedAsync">
            <summary>
            Notifies the consumer that the stream was completed.
            <para>
            The Task returned from this method should be completed when the consumer is done processing the stream closure.
            </para>
            </summary>
            <returns>A Task that is completed when the stream-complete operation has been accepted.</returns>
        </member>
        <member name="M:Orleans.Streams.IAsyncObserver`1.OnErrorAsync(System.Exception)">
            <summary>
            Notifies the consumer that the stream had an error.
            <para>
            The Task returned from this method should be completed when the consumer is done processing the stream closure.
            </para>
            </summary>
            <param name="ex">An Exception that describes the error that occured on the stream.</param>
            <returns>A Task that is completed when the close has been accepted.</returns>
        </member>
        <member name="T:Orleans.Streams.IAsyncBatchObserver`1">
            <summary>
            This interface generalizes the IAsyncObserver interface to allow production and consumption of batches of items.
            <para>
            Note that this interface is implemented by item consumers and invoked (used) by item producers.
            This means that the consumer endpoint of a stream implements this interface.
            </para>
            </summary>
            <typeparam name="T">The type of object consumed by the observer.</typeparam>
        </member>
        <member name="M:Orleans.Streams.IAsyncBatchObserver`1.OnNextBatchAsync(System.Collections.Generic.IEnumerable{`0},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Passes the next batch of items to the consumer.
            <para>
            The Task returned from this method should be completed when all items in the batch have been
            sufficiently processed by the consumer to meet any behavioral guarantees.
            </para>
            <para>
            That is, the semantics of the returned Task is the same as for <code>OnNextAsync</code>,
            extended for all items in the batch.
            </para>
            </summary>
            <param name="batch">The items to be passed.</param>
            <param name="token">The stream sequence token of this batch of items.</param>
            <returns>A Task that is completed when the batch has been accepted.</returns>
        </member>
        <member name="T:Orleans.Streams.IAsyncStream`1">
            <summary>
            This interface represents an object that serves as a distributed rendevous between producers and consumers.
            It is similar to a Reactive Framework <code>Subject</code> and implements
            <code>IObserver</code> nor <code>IObservable</code> interfaces.
            </summary>
            <typeparam name="T">The type of object that flows through the stream.</typeparam>
        </member>
        <member name="P:Orleans.Streams.IAsyncStream`1.IsRewindable">
            <summary>
            Determines whether this is a rewindable stream - supports subscribing from previous point in time.
            </summary>
            <returns>True if this is a rewindable stream, false otherwise.</returns>
        </member>
        <member name="P:Orleans.Streams.IAsyncStream`1.ProviderName">
            <summary> Stream Provider Name. </summary>
        </member>
        <member name="M:Orleans.Streams.IAsyncStream`1.GetAllSubscriptionHandles">
            <summary>
            Retrieves a list of all active subscriptions created by the caller for this stream.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orleans.Streams.IStreamProvider.Name">
            <summary>Name of the stream provider.</summary>
        </member>
        <member name="P:Orleans.Streams.IStreamProvider.IsRewindable">
            <summary>
            Determines whether this is a rewindable provider - supports creating rewindable streams 
            (streams that allow subscribing from previous point in time).
            </summary>
            <returns>True if this is a rewindable provider, false otherwise.</returns>
        </member>
        <member name="M:Orleans.IVersionManager.SetCompatibilityStrategy(Orleans.Versions.Compatibility.CompatibilityStrategy)">
            <summary>
            Set the compatibility strategy
            </summary>
            <param name="strategy">The strategy to set. Set to null to revert to the default strategy provided in configuration</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.IVersionManager.SetSelectorStrategy(Orleans.Versions.Selector.VersionSelectorStrategy)">
            <summary>
            Set the selector strategy
            </summary>
            <param name="strategy">The strategy to set. Set to null to revert to the default strategy provided in configuration</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.IVersionManager.SetCompatibilityStrategy(System.Int32,Orleans.Versions.Compatibility.CompatibilityStrategy)">
            <summary>
            Set the compatibility strategy for a specific interface
            </summary>
            <param name="interfaceId">The ID of the interface</param>
            <param name="strategy">The strategy to set. Set to null to revert to the default strategy provided in configuration</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.IVersionManager.SetSelectorStrategy(System.Int32,Orleans.Versions.Selector.VersionSelectorStrategy)">
            <summary>
            Set the selector strategy for a specific interface
            </summary>
            <param name="interfaceId">The ID of the interface</param>
            <param name="strategy">The strategy to set. Set to null to revert to the default strategy provided in configuration</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Utilities.CachedReadConcurrentDictionary`2">
            <summary>
            A thread-safe dictionary for read-heavy workloads.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="F:Orleans.Utilities.CachedReadConcurrentDictionary`2.CacheMissesBeforeCaching">
            <summary>
            The number of cache misses which are tolerated before the cache is regenerated.
            </summary>
        </member>
        <member name="F:Orleans.Utilities.CachedReadConcurrentDictionary`2.cacheMissReads">
            <summary>
            Approximate number of reads which did not hit the cache since it was last invalidated.
            This is used as a heuristic that the dictionary is not being modified frequently with respect to the read volume.
            </summary>
        </member>
        <member name="F:Orleans.Utilities.CachedReadConcurrentDictionary`2.readCache">
            <summary>
            Cached version of <see cref="F:Orleans.Utilities.CachedReadConcurrentDictionary`2.dictionary"/>.
            </summary>
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Utilities.CachedReadConcurrentDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Utilities.CachedReadConcurrentDictionary`2"/> class
            that contains elements copied from the specified collection.
            </summary>
            <param name="collection">
            The <see cref="T:IEnumerable{KeyValuePair{TKey,TValue}}"/> whose elements are copied to the new instance.
            </param>
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Utilities.CachedReadConcurrentDictionary`2"/> class
            that contains elements copied from the specified collection and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer{TKey}"/>.
            </summary>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys.
            </param>
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Utilities.CachedReadConcurrentDictionary`2"/>
            class that contains elements copied from the specified collection and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer{TKey}"/>.
            </summary>
            <param name="collection">
            The <see cref="T:IEnumerable{KeyValuePair{TKey,TValue}}"/> whose elements are copied to the new instance.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys.
            </param>
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Utilities.CachedReadConcurrentDictionary`2.Count">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Utilities.CachedReadConcurrentDictionary`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.Add(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            dds a key/value pair to the <see cref="T:Orleans.Utilities.CachedReadConcurrentDictionary`2"/> if the key does not exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key</param>
            <returns>The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.</returns>
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.TryAdd(`0,`1)">
            <summary>
            Attempts to add the specified key and value.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be a null reference (Nothing
            in Visual Basic) for reference types.</param>
            <returns>true if the key/value pair was added successfully; otherwise, false.</returns>
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.ContainsKey(`0)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Utilities.CachedReadConcurrentDictionary`2.Item(`0)">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Utilities.CachedReadConcurrentDictionary`2.Keys">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Utilities.CachedReadConcurrentDictionary`2.Values">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Utilities.RuntimeTypeNameFormatter">
            <summary>
            Utility methods for formatting <see cref="T:System.Type"/> and <see cref="T:System.Reflection.TypeInfo"/> instances in a way which can be parsed by
            <see cref="M:System.Type.GetType(System.String)"/>.
            </summary>
        </member>
        <member name="M:Orleans.Utilities.RuntimeTypeNameFormatter.Format(System.Type)">
            <summary>
            Returns a <see cref="T:System.String"/> form of <paramref name="type"/> which can be parsed by <see cref="M:System.Type.GetType(System.String)"/>.
            </summary>
            <param name="type">The type to format.</param>
            <returns>
            A <see cref="T:System.String"/> form of <paramref name="type"/> which can be parsed by <see cref="M:System.Type.GetType(System.String)"/>.
            </returns>
        </member>
        <member name="M:Orleans.Utilities.RuntimeTypeNameFormatter.Format(System.Reflection.TypeInfo)">
            <summary>
            Returns a <see cref="T:System.String"/> form of <paramref name="type"/> which can be parsed by <see cref="M:System.Type.GetType(System.String)"/>.
            </summary>
            <param name="type">The type to format.</param>
            <returns>
            A <see cref="T:System.String"/> form of <paramref name="type"/> which can be parsed by <see cref="M:System.Type.GetType(System.String)"/>.
            </returns>
        </member>
        <member name="T:Orleans.Factory`1">
            <summary>
            Creates an instance of <typeparamref name="TInstance"/>.
            </summary>
            <typeparam name="TInstance"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Orleans.Factory`2">
            <summary>
            Creates an instance of <typeparamref name="TInstance"/>.
            </summary>
            <typeparam name="TInstance"></typeparam>
            <typeparam name="TParam1"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Orleans.Factory`3">
            <summary>
            Creates an instance of <typeparamref name="TInstance"/>.
            </summary>
            <typeparam name="TInstance"></typeparam>
            <typeparam name="TParam1"></typeparam>
            <typeparam name="TParam2"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Orleans.Factory`4">
            <summary>
            Creates an instance of <typeparamref name="TInstance"/>.
            </summary>
            <typeparam name="TInstance"></typeparam>
            <typeparam name="TParam1"></typeparam>
            <typeparam name="TParam2"></typeparam>
            <typeparam name="TParam3"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Orleans.ReferenceEqualsComparer.Instance">
            <summary>
            Gets an instance of this class.
            </summary>
        </member>
        <member name="M:Orleans.ReferenceEqualsComparer.Equals(System.Object,System.Object)">
            <summary>
            Defines object equality by reference equality (eq, in LISP).
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param>
        </member>
        <member name="T:Orleans.SystemTargetInterfaces.RemoteClusterActivationResponse">
            <summary>
            Reponse message used by Global Single Instance Protocol
            </summary>
        </member>
        <member name="M:Orleans.SystemTargetInterfaces.IClusterGrainDirectory.ProcessActivationRequest(Orleans.Runtime.GrainId,System.String,System.Int32)">
            <summary>
            Called on remote clusters to process a global-single-instance round
            </summary>
            <param name="grain">the grain to process</param>
            <param name="requestClusterId">the id of the origin cluster</param>
            <param name="hopCount">how many times this request has been forwarded within the cluster</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.SystemTargetInterfaces.IClusterGrainDirectory.ProcessActivationRequestBatch(Orleans.Runtime.GrainId[],System.String)">
            <summary>
            Called on remote clusters to process a global-single-instance round
            </summary>
            <param name="grains">the grains to process</param>
            <param name="sendingClusterId">the id of the origin cluster</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.SystemTargetInterfaces.IClusterGrainDirectory.ProcessDeactivations(System.Collections.Generic.List{Orleans.Runtime.ActivationAddress})">
            <summary>
            Called on remote clusters after deactivating a owned or doubtful grain activation,
            to give them the opportunity to remove the cached registration
            </summary>
            <param name="addresses">the list of activations</param>
        </member>
        <member name="M:Orleans.SystemTargetInterfaces.IClusterGrainDirectory.ProcessDeletion(Orleans.Runtime.GrainId)">
            <summary>
            Called on remote clusters when deletion of all grain registrations is asked for.
            </summary>
            <param name="grainId"></param>
        </member>
        <member name="T:Orleans.SystemTargetInterfaces.ILogConsistencyProtocolGateway">
            <summary>
            The  protocol gateway is a relay that forwards incoming protocol messages from other clusters
            to the appropriate grain in this cluster.
            </summary>
        </member>
        <member name="T:Orleans.GrainCancellationTokenSource">
            <summary>
            Distributed version of the CancellationTokenSource
            </summary>
        </member>
        <member name="M:Orleans.GrainCancellationTokenSource.#ctor">
            <summary>
            Initializes the <see cref="T:Orleans.GrainCancellationTokenSource"/>.
            </summary>
        </member>
        <member name="P:Orleans.GrainCancellationTokenSource.Token">
            <summary>
            Gets the <see cref="T:Orleans.GrainCancellationTokenSource">CancellationToken</see>
            associated with this <see cref="T:Orleans.GrainCancellationTokenSource"/>.
            </summary>
            <value>The <see cref="T:Orleans.GrainCancellationToken">CancellationToken</see>
            associated with this <see cref="T:Orleans.GrainCancellationToken"/>.</value>
        </member>
        <member name="P:Orleans.GrainCancellationTokenSource.IsCancellationRequested">
            <summary>
            Gets whether cancellation has been requested for this <see
            cref="T:Orleans.GrainCancellationTokenSource">CancellationTokenSource</see>.
            </summary>
            <value>Whether cancellation has been requested for this <see
            cref="T:Orleans.GrainCancellationTokenSource">CancellationTokenSource</see>.</value>
            <remarks>
            <para>
            This property indicates whether cancellation has been requested for this token source, such as
            due to a call to its
            <see cref="M:Orleans.GrainCancellationTokenSource.Cancel">Cancel</see> method.
            </para>
            <para>
            If this property returns true, it only guarantees that cancellation has been requested. It does not
            guarantee that every handler registered with the corresponding token has finished executing, nor
            that cancellation requests have finished propagating to all registered handlers and remote targets. Additional
            synchronization may be required, particularly in situations where related objects are being
            canceled concurrently.
            </para>
            </remarks>
        </member>
        <member name="M:Orleans.GrainCancellationTokenSource.Cancel">
            <summary>
            Communicates a request for cancellation.
            </summary>
            <remarks>
            <para>
            The associated <see cref="T:Orleans.Async.GrainCancellationToken" /> will be
            notified of the cancellation and will transition to a state where
            <see cref="P:Orleans.GrainCancellationToken.CancellationToken">IsCancellationRequested</see> returns true.
            Any callbacks or cancelable operations
            registered with the <see cref="T:Orleans.Threading.CancellationToken"/>  will be executed.
            </para>
            <para>
            Cancelable operations and callbacks registered with the token should not throw exceptions.
            However, this overload of Cancel will aggregate any exceptions thrown into a <see cref="T:System.AggregateException"/>,
            such that one callback throwing an exception will not prevent other registered callbacks from being executed.
            </para>
            <para>
            The <see cref="T:System.Threading.ExecutionContext"/> that was captured when each callback was registered
            will be reestablished when the callback is invoked.
            </para>
            </remarks>
            <exception cref="T:System.AggregateException">An aggregate exception containing all the exceptions thrown
            by the registered callbacks on the associated <see cref="T:Orleans.Async.GrainCancellationToken"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">This <see
            cref="T:Orleans.Async.GrainCancellationTokenSource"/> has been disposed.</exception>
        </member>
        <member name="M:Orleans.GrainCancellationTokenSource.Dispose">
            <summary>
            Releases the resources used by this <see cref="T:Orleans.Async.GrainCancellationTokenSource" />.
            </summary>
            <remarks>
            This method is not thread-safe for any other concurrent calls.
            </remarks>
        </member>
        <member name="T:Orleans.GrainFactory">
            <summary>
            Factory for accessing grains.
            </summary>
        </member>
        <member name="F:Orleans.GrainFactory.casters">
            <summary>
            The mapping between concrete grain interface types and delegate
            </summary>
        </member>
        <member name="F:Orleans.GrainFactory.invokers">
            <summary>
            The collection of <see cref="T:Orleans.CodeGeneration.IGrainMethodInvoker"/>s for their corresponding grain interface type.
            </summary>
        </member>
        <member name="F:Orleans.GrainFactory.typedSystemTargetReferenceCache">
            <summary>
            The cache of typed system target references.
            </summary>
        </member>
        <member name="F:Orleans.GrainFactory.typeCache">
            <summary>
            The cache of type metadata.
            </summary>
        </member>
        <member name="F:Orleans.GrainFactory.runtimeClient">
            <summary>
            The runtime client.
            </summary>
        </member>
        <member name="T:Orleans.GrainFactory.GrainReferenceCaster">
            <summary>
            Casts an <see cref="T:Orleans.Runtime.IAddressable"/> to a concrete <see cref="T:Orleans.Runtime.GrainReference"/> implementation.
            </summary>
            <param name="existingReference">The existing <see cref="T:Orleans.Runtime.IAddressable"/> reference.</param>
            <returns>The concrete <see cref="T:Orleans.Runtime.GrainReference"/> implementation.</returns>
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.Guid,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.Int64,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.BindGrainReference(Orleans.Runtime.IAddressable)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrainFromKeyString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.CreateObjectReference``1(Orleans.IGrainObserver)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.DeleteObjectReference``1(Orleans.IGrainObserver)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.CreateObjectReference``1(Orleans.Runtime.IAddressable)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.Cast``1(Orleans.Runtime.IAddressable)">
            <summary>
            Casts the provided <paramref name="grain"/> to the specified interface
            </summary>
            <typeparam name="TGrainInterface">The target grain interface type.</typeparam>
            <param name="grain">The grain reference being cast.</param>
            <returns>
            A reference to <paramref name="grain"/> which implements <typeparamref name="TGrainInterface"/>.
            </returns>
        </member>
        <member name="M:Orleans.GrainFactory.Cast(Orleans.Runtime.IAddressable,System.Type)">
            <summary>
            Casts the provided <paramref name="grain"/> to the provided <paramref name="interfaceType"/>.
            </summary>
            <param name="grain">The grain.</param>
            <param name="interfaceType">The resulting interface type.</param>
            <returns>A reference to <paramref name="grain"/> which implements <paramref name="interfaceType"/>.</returns>
        </member>
        <member name="M:Orleans.GrainFactory.MakeCaster(System.Type)">
            <summary>
            Creates and returns a new grain reference caster.
            </summary>
            <param name="interfaceType">The interface which the result will cast to.</param>
            <returns>A new grain reference caster.</returns>
        </member>
        <member name="M:Orleans.GrainFactory.GetSystemTarget``1(Orleans.Runtime.GrainId,Orleans.Runtime.SiloAddress)">
            <summary>
            Gets a reference to the specified system target.
            </summary>
            <typeparam name="TGrainInterface">The system target interface.</typeparam>
            <param name="grainId">The id of the target.</param>
            <param name="destination">The destination silo.</param>
            <returns>A reference to the specified system target.</returns>
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(Orleans.Runtime.GrainId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain(Orleans.Runtime.GrainId,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.GrainExtensions">
            <summary>
            Extension methods for grains.
            </summary>
        </member>
        <member name="M:Orleans.GrainExtensions.AsReference``1(Orleans.Runtime.IAddressable)">
            <summary>
            Converts this grain to a specific grain interface.
            </summary>
            <typeparam name="TGrainInterface">The type of the grain interface.</typeparam>
            <param name="grain">The grain to convert.</param>
            <returns>A strongly typed <c>GrainReference</c> of grain interface type TGrainInterface.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.Cast``1(Orleans.Runtime.IAddressable)">
            <summary>
            Casts a grain to a specific grain interface.
            </summary>
            <typeparam name="TGrainInterface">The type of the grain interface.</typeparam>
            <param name="grain">The grain to cast.</param>
        </member>
        <member name="M:Orleans.GrainExtensions.BindGrainReference(Orleans.Runtime.IAddressable,Orleans.IGrainFactory)">
            <summary>
            Binds the grain reference to the provided <see cref="T:Orleans.IGrainFactory"/>.
            </summary>
            <param name="grain">The grain reference.</param>
            <param name="grainFactory">The grain factory.</param>
        </member>
        <member name="M:Orleans.GrainExtensions.IsPrimaryKeyBasedOnLong(Orleans.Runtime.IAddressable)">
            <summary>
            Returns whether part of the primary key is of type long.
            </summary>
            <param name="grain">The target grain.</param>
        </member>
        <member name="M:Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable,System.String@)">
            <summary>
            Returns the long representation of a grain primary key.
            </summary>
            <param name="grain">The grain to find the primary key for.</param>
            <param name="keyExt">The output paramater to return the extended key part of the grain primary key, if extened primary key was provided for that grain.</param>
            <returns>A long representing the primary key for this grain.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable)">
            <summary>
            Returns the long representation of a grain primary key.
            </summary>
            <param name="grain">The grain to find the primary key for.</param>
            <returns>A long representing the primary key for this grain.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable,System.String@)">
            <summary>
            Returns the Guid representation of a grain primary key.
            </summary>
            <param name="grain">The grain to find the primary key for.</param>
            <param name="keyExt">The output paramater to return the extended key part of the grain primary key, if extened primary key was provided for that grain.</param>
            <returns>A Guid representing the primary key for this grain.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable)">
            <summary>
            Returns the Guid representation of a grain primary key.
            </summary>
            <param name="grain">The grain to find the primary key for.</param>
            <returns>A Guid representing the primary key for this grain.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.GetPrimaryKeyString(Orleans.Runtime.IAddressable)">
            <summary>
            Returns the string primary key of the grain.
            </summary>
            <param name="grain">The grain to find the primary key for.</param>
            <returns>A string representing the primary key for this grain.</returns>
        </member>
        <member name="M:Orleans.SetExtensions.ToSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Shortcut to create HashSet from IEnumerable that supports type inference
            (which the standard constructor does not)
            </summary>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Orleans.SetExtensions.Synchronize``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1},System.Func{``1,``1},System.Action{``1,``1})">
            <summary>
            Synchronize contents of two dictionaries with mutable values
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="a">Dictionary</param>
            <param name="b">Dictionary</param>
            <param name="copy">Return a copy of a value</param>
            <param name="sync">Synchronize two mutable values</param>
        </member>
        <member name="M:Orleans.SetExtensions.Synchronize``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1},System.Func{``1,``1,``1})">
            <summary>
            Synchronize contents of two dictionaries with immutable values
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="a">Dictionary</param>
            <param name="b">Dictionary</param>
            <param name="sync">Synchronize two values, return synced value</param>
        </member>
        <member name="M:Orleans.SetExtensions.Synchronize2``3(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},System.Func{``2,``2},System.Action{``2,``2})">
            <summary>
            Synchronize contents of two nested dictionaries with mutable values
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TKey2">Nested key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="a">Dictionary</param>
            <param name="b">Dictionary</param>
            <param name="copy">Return a copy of a value</param>
            <param name="sync">Synchronize two mutable values</param>
        </member>
        <member name="M:Orleans.SetExtensions.Synchronize2``3(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},System.Func{``2,``2,``2})">
            <summary>
            Synchronize contents of two nested dictionaries with immutable values
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TKey2">Nested key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="a">Dictionary</param>
            <param name="b">Dictionary</param>
            <param name="sync">Synchronize two immutable values</param>
        </member>
        <member name="M:Orleans.SetExtensions.Copy``2(System.Collections.Generic.Dictionary{``0,``1},System.Func{``1,``1})">
            <summary>
            Copy a dictionary with mutable values
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="original"></param>
            <param name="copy"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.SetExtensions.ToStrings``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object},System.String)">
            <summary>
            ToString every element of an enumeration
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="toString">Can supply null to use Object.ToString()</param>
            <param name="separator">Before each element, or space if unspecified</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Concurrency.Immutable`1">
            <summary>
            Wrapper class for carrying immutable data.
            </summary>
            <remarks>
            Objects that are known to be immutable are given special fast-path handling by the Orleans serializer 
            -- which in a nutshell allows the DeepCopy step to be skipped during message sends where the sender and reveiving grain are in the same silo.
            
            One very common usage pattern for Immutable is when passing byte[] parameters to a grain. 
            If a program knows it will not alter the contents of the byte[] (for example, if it contains bytes from a static image file read from disk)
            then considerable savings in memory usage and message throughput can be obtained by marking that byte[] argument as <c>Immutable</c>.
            </remarks>
            <typeparam name="T">Type of data to be wrapped by this Immutable</typeparam>
        </member>
        <member name="P:Orleans.Concurrency.Immutable`1.Value">
            <summary> Return reference to the original value stored in this Immutable wrapper. </summary>
        </member>
        <member name="M:Orleans.Concurrency.Immutable`1.#ctor(`0)">
            <summary>
            Constructor to wrap the specified data object in new Immutable wrapper.
            </summary>
            <param name="value">Value to be wrapped and marked as immutable.</param>
        </member>
        <member name="T:Orleans.Concurrency.ImmutableExt">
            <summary>
            Utility class to add the .AsImmutable method to all objects.
            </summary>
        </member>
        <member name="M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)">
            <summary>
            Extension method to return this value wrapped in <c>Immutable</c>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">Value to be wrapped.</param>
            <returns>Immutable wrapper around the original object.</returns>
            <seealso cref="T:Orleans.Concurrency.Immutable`1"/>"/>
        </member>
        <member name="T:Orleans.Concurrency.ReadOnlyAttribute">
            <summary>
            The ReadOnly attribute is used to mark methods that do not modify the state of a grain.
            <para>
            Marking methods as ReadOnly allows the run-time system to perform a number of optimizations
            that may significantly improve the performance of your application.
            </para>
            </summary>
        </member>
        <member name="T:Orleans.Concurrency.ReentrantAttribute">
            <summary>
            The Reentrant attribute is used to mark grain implementation classes that allow request interleaving within a task.
            <para>
            This is an advanced feature and should not be used unless the implications are fully understood.
            That said, allowing request interleaving allows the run-time system to perform a number of optimizations
            that may significantly improve the performance of your application.
            </para>
            </summary>
        </member>
        <member name="T:Orleans.Concurrency.UnorderedAttribute">
            <summary>
            The Unordered attribute is used to mark grain interface in which the delivery order of
            messages is not significant.
            </summary>
        </member>
        <member name="T:Orleans.Concurrency.StatelessWorkerAttribute">
            <summary>
            The StatelessWorker attribute is used to mark grain class in which there is no expectation
            of preservation of grain state between requests and where multiple activations of the same grain are allowed to be created by the runtime.
            </summary>
        </member>
        <member name="P:Orleans.Concurrency.StatelessWorkerAttribute.MaxLocalWorkers">
            <summary>
            Maximal number of local StatelessWorkers in a single silo.
            </summary>
        </member>
        <member name="T:Orleans.Concurrency.AlwaysInterleaveAttribute">
            <summary>
            The AlwaysInterleaveAttribute attribute is used to mark methods that can interleave with any other method type, including write (non ReadOnly) requests.
            </summary>
            <remarks>
            Note that this attribute is applied to method declaration in the grain interface,
            and not to the method in the implementation class itself.
            </remarks>
        </member>
        <member name="T:Orleans.Concurrency.MayInterleaveAttribute">
            <summary>
            The MayInterleaveAttribute attribute is used to mark classes
            that want to control request interleaving via supplied method callback.
            </summary>
            <remarks>
            The callback method name should point to a public static function declared on the same class
            and having the following signature: <c>public static bool MayInterleave(InvokeMethodRequest req)</c>
            </remarks>
        </member>
        <member name="P:Orleans.Concurrency.MayInterleaveAttribute.CallbackMethodName">
            <summary>
            The name of the callback method
            </summary>
        </member>
        <member name="T:Orleans.Concurrency.ImmutableAttribute">
            <summary>
            The Immutable attribute indicates that instances of the marked class or struct are never modified
            after they are created.
            </summary>
            <remarks>
            Note that this implies that sub-objects are also not modified after the instance is created.
            </remarks>
        </member>
        <member name="T:Orleans.Concurrency.OneWayAttribute">
            <summary>
            Indicates that a method on a grain interface is one-way and that no response message will be sent to the caller.
            </summary>
        </member>
        <member name="T:Orleans.IMembershipTable">
            <summary>
            Interface for Membership Table.
            </summary>
        </member>
        <member name="M:Orleans.IMembershipTable.InitializeMembershipTable(Orleans.Runtime.Configuration.GlobalConfiguration,System.Boolean,Orleans.Runtime.Logger)">
            <summary>
            Initializes the membership table, will be called before all other methods
            </summary>
            <param name="globalConfiguration">the give global configuration</param>
            <param name="tryInitTableVersion">whether an attempt will be made to init the underlying table</param>
            <param name="logger">the logger used by the membership table</param>
        </member>
        <member name="M:Orleans.IMembershipTable.DeleteMembershipTableEntries(System.String)">
            <summary>
            Deletes all table entries of the given deploymentId
            </summary>
        </member>
        <member name="M:Orleans.IMembershipTable.ReadRow(Orleans.Runtime.SiloAddress)">
            <summary>
            Atomically reads the Membership Table information about a given silo.
            The returned MembershipTableData includes one MembershipEntry entry for a given silo and the 
            TableVersion for this table. The MembershipEntry and the TableVersion have to be read atomically.
            </summary>
            <param name="key">The address of the silo whose membership information needs to be read.</param>
            <returns>The membership information for a given silo: MembershipTableData consisting one MembershipEntry entry and
            TableVersion, read atomically.</returns>
        </member>
        <member name="M:Orleans.IMembershipTable.ReadAll">
            <summary>
            Atomically reads the full content of the Membership Table.
            The returned MembershipTableData includes all MembershipEntry entry for all silos in the table and the 
            TableVersion for this table. The MembershipEntries and the TableVersion have to be read atomically.
            </summary>
            <returns>The membership information for a given table: MembershipTableData consisting multiple MembershipEntry entries and
            TableVersion, all read atomically.</returns>
        </member>
        <member name="M:Orleans.IMembershipTable.InsertRow(Orleans.MembershipEntry,Orleans.TableVersion)">
            <summary>
            Atomically tries to insert (add) a new MembershipEntry for one silo and also update the TableVersion.
            If operation succeeds, the following changes would be made to the table:
            1) New MembershipEntry will be added to the table.
            2) The newly added MembershipEntry will also be added with the new unique automatically generated eTag.
            3) TableVersion.Version in the table will be updated to the new TableVersion.Version.
            4) TableVersion etag in the table will be updated to the new unique automatically generated eTag.
            All those changes to the table, insert of a new row and update of the table version and the associated etags, should happen atomically, or fail atomically with no side effects.
            The operation should fail in each of the following conditions:
            1) A MembershipEntry for a given silo already exist in the table
            2) Update of the TableVersion failed since the given TableVersion etag (as specified by the TableVersion.VersionEtag property) did not match the TableVersion etag in the table.
            </summary>
            <param name="entry">MembershipEntry to be inserted.</param>
            <param name="tableVersion">The new TableVersion for this table, along with its etag.</param>
            <returns>True if the insert operation succeeded and false otherwise.</returns>
        </member>
        <member name="M:Orleans.IMembershipTable.UpdateRow(Orleans.MembershipEntry,System.String,Orleans.TableVersion)">
            <summary>
            Atomically tries to update the MembershipEntry for one silo and also update the TableVersion.
            If operation succeeds, the following changes would be made to the table:
            1) The MembershipEntry for this silo will be updated to the new MembershipEntry (the old entry will be fully substitued by the new entry) 
            2) The eTag for the updated MembershipEntry will also be eTag with the new unique automatically generated eTag.
            3) TableVersion.Version in the table will be updated to the new TableVersion.Version.
            4) TableVersion etag in the table will be updated to the new unique automatically generated eTag.
            All those changes to the table, update of a new row and update of the table version and the associated etags, should happen atomically, or fail atomically with no side effects.
            The operation should fail in each of the following conditions:
            1) A MembershipEntry for a given silo does not exist in the table
            2) A MembershipEntry for a given silo exist in the table but its etag in the table does not match the provided etag.
            3) Update of the TableVersion failed since the given TableVersion etag (as specified by the TableVersion.VersionEtag property) did not match the TableVersion etag in the table.
            </summary>
            <param name="entry">MembershipEntry to be updated.</param>
            <param name="etag">The etag  for the given MembershipEntry.</param>
            <param name="tableVersion">The new TableVersion for this table, along with its etag.</param>
            <returns>True if the update operation succeeded and false otherwise.</returns>
        </member>
        <member name="M:Orleans.IMembershipTable.UpdateIAmAlive(Orleans.MembershipEntry)">
            <summary>
            Updates the IAmAlive part (column) of the MembershipEntry for this silo.
            This operation should only update the IAmAlive collumn and not change other columns.
            This operation is a "dirty write" or "in place update" and is performed without etag validation. 
            With regards to eTags update:
            This operation may automatically update the eTag associated with the given silo row, but it does not have to. It can also leave the etag not changed ("dirty write").
            With regards to TableVersion:
            this operation should not change the TableVersion of the table. It should leave it untouched.
            There is no scenario where this operation could fail due to table semantical reasons. It can only fail due to network problems or table unavailability.
            </summary>
            <param name="entry"></param>
            <returns>Task representing the successful execution of this operation. </returns>
        </member>
        <member name="T:Orleans.IMembershipTableGrain">
            <summary>
            Membership table interface for grain based implementation.
            </summary>
        </member>
        <member name="P:Orleans.TableVersion.Version">
            <summary>
            The version part of this TableVersion. Monotonically increasing number.
            </summary>
        </member>
        <member name="P:Orleans.TableVersion.VersionEtag">
            <summary>
            The etag of this TableVersion, used for validation of table update operations.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.SiloAddress">
            <summary>
            The silo unique identity (ip:port:epoch). Used mainly by the Membership Protocol.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.Status">
            <summary>
            The silo status. Managed by the Membership Protocol.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.SuspectTimes">
            <summary>
            The list of silos that suspect this silo. Managed by the Membership Protocol.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.ProxyPort">
            <summary>
            Silo to clients TCP port. Set on silo startup.
            </summary>    
        </member>
        <member name="P:Orleans.MembershipEntry.HostName">
            <summary>
            The DNS host name of the silo. Equals to Dns.GetHostName(). Set on silo startup.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.SiloName">
            <summary>
            the name of the specific silo instance within a cluster. 
            If running in Azure - the name of this role instance. Set on silo startup.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.StartTime">
            <summary>
            Time this silo was started. For diagnostics and troubleshooting only.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.IAmAliveTime">
            <summary>
            the last time this silo reported that it is alive. For diagnostics and troubleshooting only.
            </summary>
        </member>
        <member name="T:Orleans.IReminderTable">
            <summary>
            Interface for multiple implementations of the underlying storage for reminder data:
            Azure Table, SQL, development emulator grain, and a mock implementation.
            Defined as a grain interface for the development emulator grain case.
            </summary>  
        </member>
        <member name="M:Orleans.IReminderTable.ReadRows(System.UInt32,System.UInt32)">
            <summary>
            Return all rows that have their GrainReference's.GetUniformHashCode() in the range (start, end]
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.IReminderTable.RemoveRow(Orleans.Runtime.GrainReference,System.String,System.String)">
            <summary>
            Remove a row from the table.
            </summary>
            <param name="grainRef"></param>
            <param name="reminderName"></param>
            /// <param name="eTag"></param>
            <returns>true if a row with <paramref name="grainRef"/> and <paramref name="reminderName"/> existed and was removed successfully, false otherwise</returns>
        </member>
        <member name="T:Orleans.IReminderTableGrain">
            <summary>
            Reminder table interface for grain based implementation.
            </summary>
        </member>
        <member name="P:Orleans.ReminderEntry.GrainRef">
            <summary>
            The grain reference of the grain that created the reminder. Forms the reminder
            primary key together with <see cref="P:Orleans.ReminderEntry.ReminderName"/>.
            </summary>
        </member>
        <member name="P:Orleans.ReminderEntry.ReminderName">
            <summary>
            The name of the reminder. Forms the reminder primary key together with 
            <see cref="P:Orleans.ReminderEntry.GrainRef"/>.
            </summary>
        </member>
        <member name="P:Orleans.ReminderEntry.StartAt">
            <summary>
            the time when the reminder was supposed to tick in the first time
            </summary>
        </member>
        <member name="P:Orleans.ReminderEntry.Period">
            <summary>
            the time period for the reminder
            </summary>
        </member>
        <member name="M:Orleans.IReminderService.RegisterOrUpdateReminder(Orleans.Runtime.GrainReference,System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            Registers a new reminder or updates an existing one
            </summary>
            <param name="grainRef"></param>
            <param name="reminderName"></param>
            <param name="dueTime"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.ISystemTarget">
            <summary>
            This is a markup interface for system targets.
            System target are internal runtime objects that share some behaivior with grains, but also impose certain restrictions. In particular:
            System target are asynchronusly addressable actors.
            Proxy class is being generated for ISystemTarget, just like for IGrain
            System target are scheduled by the runtime scheduler and follow turn based concurrency.
            </summary> 
        </member>
        <member name="T:Orleans.ISystemTargetBase">
            <summary>
            Internal interface implemented by SystemTarget classes to expose the necessary internal info that allows this.AsReference to for for SystemTarget's same as it does for a grain class.
            </summary>
        </member>
        <member name="T:Orleans.IRemindable">
            <summary>
            Callback interface that grains must implement inorder to be able to register and receive Reminders.
            </summary>
        </member>
        <member name="M:Orleans.IRemindable.ReceiveReminder(System.String,Orleans.Runtime.TickStatus)">
            <summary>
            Receive a new Reminder.
            </summary>
            <param name="reminderName">Name of this Reminder</param>
            <param name="status">Status of this Reminder tick</param>
            <returns>Completion promise which the grain will resolve when it has finished processing this Reminder tick.</returns>
        </member>
        <member name="T:Orleans.ErrorCode">
            <summary>
            The set of error types used by the Orleans runtime libraries for logging errors.
            </summary>
        </member>
        <member name="T:Orleans.ConnectionToClusterLostHandler">
            <summary>
            Handler for client disconnection from a cluster.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Orleans.ClientInvokeCallback">
            <summary>
            The delegate called before every request to a grain.
            </summary>
            <param name="request">The request.</param>
            <param name="grain">The grain.</param>
        </member>
        <member name="T:Orleans.GrainClient">
            <summary>
            Client runtime for connecting to Orleans system
            </summary>
            TODO: Make this class non-static and inject it where it is needed.
        </member>
        <member name="P:Orleans.GrainClient.IsInitialized">
            <summary>
            Whether the client runtime has already been initialized
            </summary>
            <returns><c>true</c> if client runtime is already initialized</returns>
        </member>
        <member name="M:Orleans.GrainClient.Initialize">
            <summary>
            Initializes the client runtime from the standard client configuration file.
            </summary>
        </member>
        <member name="M:Orleans.GrainClient.Initialize(System.String)">
            <summary>
            Initializes the client runtime from the provided client configuration file.
            If an error occurs reading the specified configuration file, the initialization fails.
            </summary>
            <param name="configFilePath">A relative or absolute pathname for the client configuration file.</param>
        </member>
        <member name="M:Orleans.GrainClient.Initialize(System.IO.FileInfo)">
            <summary>
            Initializes the client runtime from the provided client configuration file.
            If an error occurs reading the specified configuration file, the initialization fails.
            </summary>
            <param name="configFile">The client configuration file.</param>
        </member>
        <member name="M:Orleans.GrainClient.Initialize(Orleans.Runtime.Configuration.ClientConfiguration)">
            <summary>
            Initializes the client runtime from the provided client configuration object.
            If the configuration object is null, the initialization fails.
            </summary>
            <param name="config">A ClientConfiguration object.</param>
        </member>
        <member name="M:Orleans.GrainClient.Initialize(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Initializes the client runtime from the standard client configuration file using the provided gateway address.
            Any gateway addresses specified in the config file will be ignored and the provided gateway address wil be used instead.
            </summary>
            <param name="gatewayAddress">IP address and port of the gateway silo</param>
            <param name="overrideConfig">Whether the specified gateway endpoint should override / replace the values from config file, or be additive</param>
        </member>
        <member name="M:Orleans.GrainClient.DoInternalInitialize(Orleans.IInternalClusterClient)">
            <summary>
            Initializes client runtime from client configuration object.
            </summary>
        </member>
        <member name="M:Orleans.GrainClient.Uninitialize">
            <summary>
            Uninitializes client runtime.
            </summary>
        </member>
        <member name="M:Orleans.GrainClient.HardKill">
            <summary>
            Test hook to uninitialize client without cleanup
            </summary>
        </member>
        <member name="M:Orleans.GrainClient.InternalUninitialize(System.Boolean)">
            <summary>
            This is the lock free version of uninitilize so we can share
            it between the public method and error paths inside initialize.
            This should only be called inside a lock(initLock) block.
            </summary>
        </member>
        <member name="M:Orleans.GrainClient.CheckInitialized">
            <summary>
            Check that the runtime is intialized correctly, and throw InvalidOperationException if not
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if Orleans runtime is not correctly initialized before this call.</exception>
        </member>
        <member name="P:Orleans.GrainClient.Logger">
            <summary>
            Provides logging facility for applications.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if Orleans runtime is not correctly initialized before this call.</exception>
        </member>
        <member name="M:Orleans.GrainClient.SetResponseTimeout(System.TimeSpan)">
            <summary>
            Set a timeout for responses on this Orleans client.
            </summary>
            <param name="timeout"></param>
            <exception cref="T:System.InvalidOperationException">Thrown if Orleans runtime is not correctly initialized before this call.</exception>
        </member>
        <member name="M:Orleans.GrainClient.GetResponseTimeout">
            <summary>
            Get a timeout of responses on this Orleans client.
            </summary>
            <returns>The response timeout.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if Orleans runtime is not correctly initialized before this call.</exception>
        </member>
        <member name="P:Orleans.GrainClient.ClientInvokeCallback">
            <summary>
            Global pre-call interceptor function
            Synchronous callback made just before a message is about to be constructed and sent by a client to a grain.
            This call will be made from the same thread that constructs the message to be sent, so any thread-local settings
            such as <c>Orleans.RequestContext</c> will be picked up.
            The action receives an <see cref="T:Orleans.CodeGeneration.InvokeMethodRequest"/> with details of the method to be invoked, including InterfaceId and MethodId,
            and a <see cref="T:Orleans.IGrain"/> which is the GrainReference this request is being sent through
            </summary>
            <remarks>This callback method should return promptly and do a minimum of work, to avoid blocking calling thread or impacting throughput.</remarks>
        </member>
        <member name="F:Orleans.OutsideRuntimeClient.responseTimeout">
            <summary>
            Response timeout.
            </summary>
        </member>
        <member name="M:Orleans.OutsideRuntimeClient.Disconnect">
            <summary>
            For testing only.
            </summary>
        </member>
        <member name="M:Orleans.OutsideRuntimeClient.Reconnect">
            <summary>
            For testing only.
            </summary>
        </member>
        <member name="P:Orleans.OutsideRuntimeClient.ClientInvokeCallback">
            <inheritdoc />
        </member>
        <member name="E:Orleans.OutsideRuntimeClient.ClusterConnectionLost">
            <inheritdoc />
        </member>
        <member name="M:Orleans.OutsideRuntimeClient.NotifyClusterConnectionLost">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Placement.PlacementAttribute">
            <summary>
            Base for all placement policy marker attributes.
            </summary>
        </member>
        <member name="T:Orleans.Placement.RandomPlacementAttribute">
            <summary>
            Marks a grain class as using the <c>RandomPlacement</c> policy.
            </summary>
            <remarks>
            This is the default placement policy, so this attribute does not need to be used for normal grains.
            </remarks>
        </member>
        <member name="T:Orleans.Placement.HashBasedPlacementAttribute">
            <summary>
            Marks a grain class as using the <c>HashBasedPlacement</c> policy.
            </summary>
        </member>
        <member name="T:Orleans.Placement.PreferLocalPlacementAttribute">
            <summary>
            Marks a grain class as using the <c>PreferLocalPlacement</c> policy.
            </summary>
        </member>
        <member name="T:Orleans.Placement.ActivationCountBasedPlacementAttribute">
            <summary>
            Marks a grain class as using the <c>ActivationCountBasedPlacement</c> policy.
            </summary>
        </member>
        <member name="T:Orleans.ImplicitStreamSubscriptionAttribute">
            <summary>
            The [Orleans.ImplicitStreamSubscription] attribute is used to mark grains as implicit stream subscriptions.
            </summary>
        </member>
        <member name="P:Orleans.ImplicitStreamSubscriptionAttribute.Predicate">
            <summary>
            Gets the stream namespace filter predicate.
            </summary>
        </member>
        <member name="M:Orleans.ImplicitStreamSubscriptionAttribute.#ctor">
            <summary>
            Used to subscribe to all stream namespaces.
            </summary>
        </member>
        <member name="M:Orleans.ImplicitStreamSubscriptionAttribute.#ctor(System.String)">
            <summary>
            Used to subscribe to the specified stream namespace.
            </summary>
            <param name="streamNamespace">The stream namespace to subscribe.</param>
        </member>
        <member name="M:Orleans.ImplicitStreamSubscriptionAttribute.#ctor(System.Type)">
            <summary>
            Allows to pass an arbitrary predicate type to filter stream namespaces to subscribe. The predicate type 
            must have a constructor without parameters.
            </summary>
            <param name="predicateType">The stream namespace predicate type.</param>
        </member>
        <member name="M:Orleans.ImplicitStreamSubscriptionAttribute.#ctor(Orleans.Streams.IStreamNamespacePredicate)">
            <summary>
            Allows to pass an instance of the stream namespace predicate. To be used mainly as an extensibility point
            via inheriting attributes.
            </summary>
            <param name="predicate">The stream namespace predicate.</param>
        </member>
        <member name="T:Orleans.RegexImplicitStreamSubscriptionAttribute">
            <summary>
            The [Orleans.RegexImplicitStreamSubscription] attribute is used to mark grains as implicit stream
            subscriptions by filtering stream namespaces to subscribe using a regular expression.
            </summary>
        </member>
        <member name="M:Orleans.RegexImplicitStreamSubscriptionAttribute.#ctor(System.String)">
            <summary>
            Allows to pass a regular expression to filter stream namespaces to subscribe to.
            </summary>
            <param name="pattern">The stream namespace regular expression filter.</param>
        </member>
        <member name="T:Orleans.IGrainObserver">
            <summary>
            The IGrainObserver interface is a marker interface for observers.
            Observers are used to receive notifications from grains; that is, they represent the subscriber side of a 
            publisher/subscriber interface.
            Note that all observer methods should be void, since they do not return a value to the observed grain.
            </summary>
        </member>
        <member name="T:Orleans.IGrain">
            <summary>
            Marker interface for grains
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithGuidKey">
            <summary>
            Marker interface for grains with <see cref="T:System.Guid"/> keys.
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithIntegerKey">
            <summary>
            Marker interface for grains with <see cref="T:System.Int64"/> keys.
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithStringKey">
            <summary>
            Marker interface for grains with <see cref="T:System.String"/> keys.
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithGuidCompoundKey">
            <summary>
            Marker interface for grains with compound keys.
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithIntegerCompoundKey">
            <summary>
            Marker interface for grains with compound keys.
            </summary>
        </member>
        <member name="T:Orleans.ObserverSubscriptionManager`1">
            <summary>
            The ObserverSubscriptionManager class is a helper class for grains that support observers.
            It provides methods for tracking subscribing observers and for sending notifications.
            </summary>
            <typeparam name="T">The observer interface type to be managed.</typeparam>
        </member>
        <member name="P:Orleans.ObserverSubscriptionManager`1.Count">
            <summary>
            Number of subscribers currently registered
            </summary>
        </member>
        <member name="F:Orleans.ObserverSubscriptionManager`1.observers">
            <summary>
            The set of currently-subscribed observers.
            This is implemented as a HashSet of IGrainObserver so that if the same observer subscribes multiple times,
            it will still only get invoked once per notification.
            </summary>
        </member>
        <member name="M:Orleans.ObserverSubscriptionManager`1.#ctor">
            <summary>
            Constructs an empty subscription manager.
            </summary>
        </member>
        <member name="M:Orleans.ObserverSubscriptionManager`1.Subscribe(`0)">
            <summary>
            Records a new subscribing observer.
            </summary>
            <param name="observer">The new subscriber.</param>
            <returns>A promise that resolves when the subscriber is added.
            <para>This promise will be broken if the observer is already a subscriber.
            In this case, the existing subscription is unaffected.</para></returns>
        </member>
        <member name="M:Orleans.ObserverSubscriptionManager`1.IsSubscribed(`0)">
            <summary>
            Determines if the SubscriptionManager has the input observer
            </summary>
            <param name="observer">True if the the observer is already subscribed, otherwise False.</param>
            <returns>True is the SubscriptionManager has the input observer.</returns>
        </member>
        <member name="M:Orleans.ObserverSubscriptionManager`1.Unsubscribe(`0)">
            <summary>
            Removes a (former) subscriber.
            </summary>
            <param name="observer">The unsubscribing observer.</param>
            <returns>A promise that resolves when the subscriber is removed.
            This promise will be broken if the observer is not a subscriber.</returns>
        </member>
        <member name="M:Orleans.ObserverSubscriptionManager`1.Clear">
            <summary>
            Removes all subscriptions.
            </summary>
        </member>
        <member name="M:Orleans.ObserverSubscriptionManager`1.Notify(System.Action{`0})">
            <summary>
            Sends a notification to all subscribers.
            </summary>
            <param name="notification">An action that sends the notification by invoking the proper method on the provided subscriber.
            This action is called once for each current subscriber.</param>
        </member>
        <member name="T:Orleans.Interner`2">
            <summary>
            Provide a weakly-referenced cache of interned objects.
            Interner is used to optimise garbage collection.
            We use it to store objects that are allocated frequently and may have long timelife. 
            This means those object may quickly fill gen 2 and cause frequent costly full heap collections.
            Specificaly, a message that arrives to a silo and all the headers and ids inside it may stay alive long enough to reach gen 2.
            Therefore, we store all ids in interner to re-use their memory accros different messages.
            </summary>
            <typeparam name="K">Type of objects to be used for intern keys</typeparam>
            <typeparam name="T">Type of objects to be interned / cached</typeparam>
        </member>
        <member name="M:Orleans.Interner`2.FindOrCreate(`0,System.Func{`0,`1})">
            <summary>
            Find cached copy of object with specified key, otherwise create new one using the supplied creator-function.
            </summary>
            <param name="key">key to find</param>
            <param name="creatorFunc">function to create new object and store for this key if no cached copy exists</param>
            <returns>Object with specified key - either previous cached copy or newly created</returns>
        </member>
        <member name="M:Orleans.Interner`2.TryFind(`0,`1@)">
            <summary>
            Find cached copy of object with specified key, otherwise create new one using the supplied creator-function.
            </summary>
            <param name="key">key to find</param>
            <param name="obj">The existing value if the key is found</param>
        </member>
        <member name="M:Orleans.Interner`2.Intern(`0,`1)">
            <summary>
            Find cached copy of object with specified key, otherwise store the supplied one. 
            </summary>
            <param name="key">key to find</param>
            <param name="obj">The new object to store for this key if no cached copy exists</param>
            <returns>Object with specified key - either previous cached copy or justed passed in</returns>
        </member>
        <member name="T:Orleans.Grain">
            <summary>
            The abstract base class for all grain classes.
            </summary>
        </member>
        <member name="P:Orleans.Grain.GrainFactory">
            <summary>
            Gets an object which can be used to access other grains. Null if this grain is not associated with a Runtime, such as when created directly for unit testing.
            </summary>
        </member>
        <member name="P:Orleans.Grain.ServiceProvider">
            <summary>
            Gets the IServiceProvider managed by the runtime. Null if this grain is not associated with a Runtime, such as when created directly for unit testing.
            </summary>
        </member>
        <member name="M:Orleans.Grain.#ctor">
            <summary>
            This constructor should never be invoked. We expose it so that client code (subclasses of Grain) do not have to add a constructor.
            Client code should use the GrainFactory property to get a reference to a Grain.
            </summary>
        </member>
        <member name="M:Orleans.Grain.#ctor(Orleans.Core.IGrainIdentity,Orleans.Runtime.IGrainRuntime)">
            <summary>
            Grain implementers do NOT have to expose this constructor but can choose to do so.
            This constructor is particularly useful for unit testing where test code can create a Grain and replace
            the IGrainIdentity and IGrainRuntime with test doubles (mocks/stubs).
            </summary>
        </member>
        <member name="P:Orleans.Grain.IdentityString">
            <summary>
            String representation of grain's SiloIdentity including type and primary key.
            </summary>
        </member>
        <member name="P:Orleans.Grain.RuntimeIdentity">
            <summary>
            A unique identifier for the current silo.
            There is no semantic content to this string, but it may be useful for logging.
            </summary>
        </member>
        <member name="M:Orleans.Grain.RegisterTimer(System.Func{System.Object,System.Threading.Tasks.Task},System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            Registers a timer to send periodic callbacks to this grain.
            </summary>
            <remarks>
            <para>
            This timer will not prevent the current grain from being deactivated.
            If the grain is deactivated, then the timer will be discarded.
            </para>
            <para>
            Until the Task returned from the asyncCallback is resolved, 
            the next timer tick will not be scheduled. 
            That is to say, timer callbacks never interleave their turns.
            </para>
            <para>
            The timer may be stopped at any time by calling the <c>Dispose</c> method 
            on the timer handle returned from this call.
            </para>
            <para>
            Any exceptions thrown by or faulted Task's returned from the asyncCallback 
            will be logged, but will not prevent the next timer tick from being queued.
            </para>
            </remarks>
            <param name="asyncCallback">Callback function to be invoked when timr ticks.</param>
            <param name="state">State object that will be passed as argument when calling the asyncCallback.</param>
            <param name="dueTime">Due time for first timer tick.</param>
            <param name="period">Period of subsequent timer ticks.</param>
            <returns>Handle for this Timer.</returns>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Orleans.Grain.RegisterOrUpdateReminder(System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            Registers a persistent, reliable reminder to send regular notifications (reminders) to the grain.
            The grain must implement the <c>Orleans.IRemindable</c> interface, and reminders for this grain will be sent to the <c>ReceiveReminder</c> callback method.
            If the current grain is deactivated when the timer fires, a new activation of this grain will be created to receive this reminder.
            If an existing reminder with the same name already exists, that reminder will be overwritten with this new reminder.
            Reminders will always be received by one activation of this grain, even if multiple activations exist for this grain.
            </summary>
            <param name="reminderName">Name of this reminder</param>
            <param name="dueTime">Due time for this reminder</param>
            <param name="period">Frequence period for this reminder</param>
            <returns>Promise for Reminder handle.</returns>
        </member>
        <member name="M:Orleans.Grain.UnregisterReminder(Orleans.Runtime.IGrainReminder)">
            <summary>
            Unregisters a previously registered reminder.
            </summary>
            <param name="reminder">Reminder to unregister.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Grain.GetReminder(System.String)">
            <summary>
            Returns a previously registered reminder.
            </summary>
            <param name="reminderName">Reminder to return</param>
            <returns>Promise for Reminder handle.</returns>
        </member>
        <member name="M:Orleans.Grain.GetReminders">
            <summary>
            Returns a list of all reminders registered by the grain.
            </summary>
            <returns>Promise for list of Reminders registered for this grain.</returns>
        </member>
        <member name="M:Orleans.Grain.DeactivateOnIdle">
            <summary>
            Deactivate this activation of the grain after the current grain method call is completed.
            This call will mark this activation of the current grain to be deactivated and removed at the end of the current method.
            The next call to this grain will result in a different activation to be used, which typical means a new activation will be created automatically by the runtime.
            </summary>
        </member>
        <member name="M:Orleans.Grain.DelayDeactivation(System.TimeSpan)">
            <summary>
            Delay Deactivation of this activation at least for the specified time duration.
            A positive <c>timeSpan</c> value means “prevent GC of this activation for that time span”.
            A negative <c>timeSpan</c> value means “cancel the previous setting of the DelayDeactivation call and make this activation behave based on the regular Activation Garbage Collection settings”.
            DeactivateOnIdle method would undo / override any current “keep alive” setting, 
            making this grain immediately available for deactivation.
            </summary>
        </member>
        <member name="M:Orleans.Grain.OnActivateAsync">
            <summary>
            This method is called at the end of the process of activating a grain.
            It is called before any messages have been dispatched to the grain.
            For grains with declared persistent state, this method is called after the State property has been populated.
            </summary>
        </member>
        <member name="M:Orleans.Grain.OnDeactivateAsync">
            <summary>
            This method is called at the begining of the process of deactivating a grain.
            </summary>
        </member>
        <member name="M:Orleans.Grain.GetLogger(System.String)">
            <summary>
            Returns a logger object that this grain's code can use for tracing.
            </summary>
            <returns>Name of the logger to use.</returns>
        </member>
        <member name="M:Orleans.Grain.GetLogger">
            <summary>
            Returns a logger object that this grain's code can use for tracing.
            The name of the logger will be derived from the grain class name.
            </summary>
            <returns>A logger for this grain.</returns>
        </member>
        <member name="T:Orleans.Grain`1">
            <summary>
            Base class for a Grain with declared persistent state.
            </summary>
            <typeparam name="TGrainState">The class of the persistent state object</typeparam>
        </member>
        <member name="M:Orleans.Grain`1.#ctor">
            <summary>
            This constructor should never be invoked. We expose it so that client code (subclasses of this class) do not have to add a constructor.
            Client code should use the GrainFactory to get a reference to a Grain.
            </summary>
        </member>
        <member name="M:Orleans.Grain`1.#ctor(Orleans.Core.IGrainIdentity,Orleans.Runtime.IGrainRuntime,`0,Orleans.Core.IStorage)">
            <summary>
            Grain implementers do NOT have to expose this constructor but can choose to do so.
            This constructor is particularly useful for unit testing where test code can create a Grain and replace
            the IGrainIdentity, IGrainRuntime and State with test doubles (mocks/stubs).
            </summary>
        </member>
        <member name="P:Orleans.Grain`1.State">
            <summary>
            Strongly typed accessor for the grain state 
            </summary>
        </member>
        <member name="M:Orleans.Grain`1.ClearStateAsync">
            <summary>Clear the current grain state data from backing store.</summary>
        </member>
        <member name="M:Orleans.Grain`1.WriteStateAsync">
            <summary>Write of the current grain state data into backing store.</summary>
        </member>
        <member name="M:Orleans.Grain`1.ReadStateAsync">
            <summary>Read the current grain state data from backing store.</summary>
            <remarks>Any previous contents of the grain state data will be overwritten.</remarks>
        </member>
    </members>
</doc>
