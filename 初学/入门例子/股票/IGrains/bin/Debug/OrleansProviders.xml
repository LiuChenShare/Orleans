<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrleansProviders</name>
    </assembly>
    <members>
        <member name="T:Orleans.Runtime.Configuration.BuiltInProvidersConfigurationExtensions">
            <summary>
            Extension methods for configuration classes specific to OrleansProviders.dll 
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.BuiltInProvidersConfigurationExtensions.AddMemoryStorageProvider(Orleans.Runtime.Configuration.ClusterConfiguration,System.String,System.Int32)">
            <summary>
            Adds a storage provider of type <see cref="T:Orleans.Storage.MemoryStorage"/>
            </summary>
            <param name="config">The cluster configuration object to add provider to.</param>
            <param name="providerName">The provider name.</param>
            <param name="numStorageGrains">The number of storage grains to use.</param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.RecoverableStreamProviderSettings">
            <summary>
            Common stream provider settings shared by EventHubStreamProvider, MemoryStreamProvider and GeneratorStreamProvider
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.RecoverableStreamProviderSettings.DataMinTimeInCacheName">
            <summary>
            DataMinTimeInCache setting name.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.RecoverableStreamProviderSettings.DefaultDataMinTimeInCache">
            <summary>
            Drfault DataMinTimeInCache
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.RecoverableStreamProviderSettings.DataMinTimeInCache">
            <summary>
            Minimum time message will stay in cache before it is available for time based purge.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.RecoverableStreamProviderSettings.DataMaxAgeInCacheName">
            <summary>
            DataMaxAgeInCache setting name.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.RecoverableStreamProviderSettings.DefaultDataMaxAgeInCache">
            <summary>
            Default DataMaxAgeInCache
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.RecoverableStreamProviderSettings.DataMaxAgeInCache">
            <summary>
            Difference in time between the newest and oldest messages in the cache.  Any messages older than this will be purged from the cache.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.RecoverableStreamProviderSettings.StatisticMonitorWriteIntervalName">
            <summary>
            Name of StatisticMonitorWriteInterval
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.RecoverableStreamProviderSettings.DefaultStatisticMonitorWriteInterval">
            <summary>
            Default statistic monitor write interval
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.RecoverableStreamProviderSettings.StatisticMonitorWriteInterval">
            <summary>
            Statistic monitor write interval
            Statistics generation is triggered by activity.  Interval will be ignored when streams are inactive.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.RecoverableStreamProviderSettings.PopulateFromProviderConfig(Orleans.Providers.IProviderConfiguration)">
            <summary>
            Read settings from provider configuration.
            </summary>
            <param name="providerConfiguration"></param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.EventSequenceTokenV2">
            <summary>
            Stream sequence token that tracks sequence number and event index
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.EventSequenceTokenV2.SequenceNumber">
            <summary>
            Number of event batches in stream prior to this event batch
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.EventSequenceTokenV2.EventIndex">
            <summary>
            Number of events in batch prior to this event
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceTokenV2.#ctor(System.Int64)">
            <summary>
            Sequence token constructor
            </summary>
            <param name="seqNumber"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceTokenV2.#ctor(System.Int64,System.Int32)">
            <summary>
            Sequence token constructor
            </summary>
            <param name="seqNumber"></param>
            <param name="eventInd"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceTokenV2.CreateSequenceTokenForEvent(System.Int32)">
            <summary>
            Creates a sequence token for a specific event in the current batch
            </summary>
            <param name="eventInd"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceTokenV2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceTokenV2.Equals(Orleans.Streams.StreamSequenceToken)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceTokenV2.CompareTo(Orleans.Streams.StreamSequenceToken)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceTokenV2.GetHashCode">
            <summary>
            GetHashCode method for current EventSequenceToken
            </summary>
            <returns> Hash code for current EventSequenceToken object </returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceTokenV2.ToString">
            <summary>
            ToString method
            </summary>
            <returns> A string which represent current EventSequenceToken object </returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.DefaultBlockPoolMonitor">
            <summary>
            block pool monitor used as a default option in GeneratorStreamprovider and MemoryStreamProvider
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultBlockPoolMonitor.Report(System.Int64,System.Int64,System.Int64)">
            <inheritdoc cref="T:Orleans.Providers.Streams.Common.IBlockPoolMonitor"/>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultBlockPoolMonitor.TrackMemoryReleased(System.Int64)">
            <inheritdoc cref="T:Orleans.Providers.Streams.Common.IBlockPoolMonitor"/>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultBlockPoolMonitor.TrackMemoryAllocated(System.Int64)">
            <inheritdoc cref="T:Orleans.Providers.Streams.Common.IBlockPoolMonitor"/>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.DefaultCacheMonitor">
            <summary>
            cache monitor used as a default option in GeneratorStreamprovider and MemoryStreamProvider
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultCacheMonitor.TrackCachePressureMonitorStatusChange(System.String,System.Boolean,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <inheritdoc cref="T:Orleans.Providers.Streams.Common.ICacheMonitor"/>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultCacheMonitor.ReportCacheSize(System.Int64)">
            <inheritdoc cref="T:Orleans.Providers.Streams.Common.ICacheMonitor"/>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultCacheMonitor.ReportMessageStatistics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int64)">
            <inheritdoc cref="T:Orleans.Providers.Streams.Common.ICacheMonitor"/>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultCacheMonitor.TrackMemoryAllocated(System.Int32)">
            <inheritdoc cref="T:Orleans.Providers.Streams.Common.ICacheMonitor"/>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultCacheMonitor.TrackMemoryReleased(System.Int32)">
            <inheritdoc cref="T:Orleans.Providers.Streams.Common.ICacheMonitor"/>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultCacheMonitor.TrackMessagesAdded(System.Int64)">
            <inheritdoc cref="T:Orleans.Providers.Streams.Common.ICacheMonitor"/>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultCacheMonitor.TrackMessagesPurged(System.Int64)">
            <inheritdoc cref="T:Orleans.Providers.Streams.Common.ICacheMonitor"/>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.DefaultQueueAdapterReceiverMonitor">
            <summary>
            Queue adapter receiver monitor used as a default option in GeneratorStreamprovider and MemoryStreamProvider
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultQueueAdapterReceiverMonitor.TrackInitialization(System.Boolean,System.TimeSpan,System.Exception)">
            <summary>
            Track attempts to initialize the receiver.
            </summary>
            <param name="success">True if read succeeded, false if read failed.</param>
            <param name="callTime"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultQueueAdapterReceiverMonitor.TrackRead(System.Boolean,System.TimeSpan,System.Exception)">
            <summary>
            Track attempts to read from the queue.    Tracked per queue read operation.
            </summary>
            <param name="success">True if read succeeded, false if read failed.</param>
            <param name="callTime"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultQueueAdapterReceiverMonitor.TrackMessagesReceived(System.Int64,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Tracks messages read and time taken per successful read.  Tracked per successful queue read operation.
            </summary>
            <param name="count">Messages read.</param>
            <param name="oldestMessageEnqueueTimeUtc"></param>
            <param name="newestMessageEnqueueTimeUtc"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.DefaultQueueAdapterReceiverMonitor.TrackShutdown(System.Boolean,System.TimeSpan,System.Exception)">
            <summary>
            Track attempts to shutdown the receiver.
            </summary>
            <param name="success">True if read succeeded, false if read failed.</param>
            <param name="callTime"></param>
            <param name="exception"></param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.IBlockPoolMonitor">
            <summary>
            Monitor track block pool related metrics. Block pool is used in cache system for memory management 
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IBlockPoolMonitor.TrackMemoryAllocated(System.Int64)">
            <summary>
            Track memory newly allocated by cache
            </summary>
            <param name="allocatedMemoryInByte"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IBlockPoolMonitor.TrackMemoryReleased(System.Int64)">
            <summary>
            Track memory relased from cache
            </summary>
            <param name="releasedMemoryInByte"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IBlockPoolMonitor.Report(System.Int64,System.Int64,System.Int64)">
            <summary>
            Periodically report block pool status
            </summary>
            <param name="totalSizeInByte">total memory this block pool allocated</param>
            <param name="availableMemoryInByte">memory which is available for allocating to caches</param>
            <param name="claimedMemoryInByte">memory is in use by caches</param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.ObjectPoolMonitorBridge">
            <summary>
            ObjectPoolMonitor report metrics for ObjectPool, which are based on object count. BlockPoolMonitor report metrics for BlockPool, which are based on memory size. 
            These two monitor converge in orleans cache infrastructure, where ObjectPool is used as block pool to allocate memory, where each object represent a block of memory
            which has a size. ObjectPoolMonitorBridge is the bridge between these two monitors in cache infrastructure. When ObjectPoolMonitor is reporting a metric, 
            the user configured BlockPoolMonitor will call its counterpart method and reporting metric based on the math: memoryInByte = objectCount*objectSizeInByte
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ObjectPoolMonitorBridge.#ctor(Orleans.Providers.Streams.Common.IBlockPoolMonitor,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="blockPoolMonitor"></param>
            <param name="blockSizeInByte"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ObjectPoolMonitorBridge.TrackObjectAllocated">
            <summary>
            Track object allocated event and also call its blcokPoolMonitor to report TrackMemoryAllocatedByCache
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ObjectPoolMonitorBridge.TrackObjectReleased">
            <summary>
            Track object released, and also call its blockPoolMonitor to report TrackMemoryReleasedFromCache
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ObjectPoolMonitorBridge.Report(System.Int64,System.Int64,System.Int64)">
            <summary>
            Periodically report object pool status, and also call its blockPoolMonitor to report its counter part metrics 
            </summary>
            <param name="totalObjects"></param>
            <param name="availableObjects"></param>
            <param name="claimedObjects"></param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.IObjectPoolMonitor">
            <summary>
            Monitor track object pool related metrics
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IObjectPoolMonitor.TrackObjectAllocated">
            <summary>
            Track every time when an object is allocated
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IObjectPoolMonitor.TrackObjectReleased">
            <summary>
            Track every time an object was released back to the pool
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IObjectPoolMonitor.Report(System.Int64,System.Int64,System.Int64)">
            <summary>
            Periodically report object pool status
            </summary>
            <param name="totalObjects">Total size of object pool</param>
            <param name="availableObjects">Count for objects in the pool which is available for allocating</param>
            <param name="claimedObjects">Count for objects which are claimed, hence not available</param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.ICacheMonitor">
            <summary>
            Responsible for monitoring cache related metrics
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheMonitor.TrackCachePressureMonitorStatusChange(System.String,System.Boolean,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Track cache pressure metrics when cache pressure monitor encounter a status change
            </summary>
            <param name="pressureMonitorType"></param>
            <param name="underPressure"></param>
            <param name="cachePressureContributionCount"></param>
            <param name="currentPressure"></param>
            <param name="flowControlThreshold"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheMonitor.TrackMessagesAdded(System.Int64)">
            <summary>
            Track message added to the cache, and newest and oldest messsges among them 
            </summary>
            <param name="messageAdded"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheMonitor.TrackMessagesPurged(System.Int64)">
            <summary>
            Track message purged from the cache, and the newest and oldest messages among them
            </summary>
            <param name="messagePurged"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheMonitor.TrackMemoryAllocated(System.Int32)">
            <summary>
            Track new memory allocated by the cache
            </summary>
            <param name="memoryInByte"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheMonitor.TrackMemoryReleased(System.Int32)">
            <summary>
            Track memory returned to block pool
            </summary>
            <param name="memoryInByte"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheMonitor.ReportMessageStatistics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int64)">
            <summary>
            Periodically report cache status metrics
            </summary>
            <param name="oldestMessageEnqueueTimeUtc">The time in Utc when oldest message enqueued the queue.</param>
            <param name="oldestMessageDequeueTimeUtc">The time in Utc when oldest message was read from the queue and put in cache.</param>
            <param name="newestMessageEnqueueTimeUtc">The time in Utc when newest message enqueued the queue.</param>
            <param name="totalMessageCount"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheMonitor.ReportCacheSize(System.Int64)">
            <summary>
            report total cache size
            </summary>
            <param name="totalCacheSizeInByte"></param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.IQueueAdapterReceiverMonitor">
            <summary>
            Responsible for monitoring receiver performance metrics.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IQueueAdapterReceiverMonitor.TrackInitialization(System.Boolean,System.TimeSpan,System.Exception)">
            <summary>
            Track attempts to initialize the receiver.
            </summary>
            <param name="success">True if read succeeded, false if read failed.</param>
            <param name="callTime">Init operation time</param>
            <param name="exception">Exception caught if initialize fail</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IQueueAdapterReceiverMonitor.TrackRead(System.Boolean,System.TimeSpan,System.Exception)">
            <summary>
            Track attempts to read from the partition.    Tracked per partition read operation.
            </summary>
            <param name="success">True if read succeeded, false if read failed.</param>
            <param name="callTime">Time spent in read operation.</param>
            <param name="exception">The exception caught if read failed.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IQueueAdapterReceiverMonitor.TrackMessagesReceived(System.Int64,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Tracks messages read and time taken per successful read.  Tracked per successful partition read operation.
            </summary>
            <param name="count">Messages read.</param>
            <param name="oldestMessageEnqueueTimeUtc"></param>
            <param name="newestMessageEnqueueTimeUtc"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IQueueAdapterReceiverMonitor.TrackShutdown(System.Boolean,System.TimeSpan,System.Exception)">
            <summary>
            Track attempts to shutdown the receiver.
            </summary>
            <param name="success">True if read succeeded, false if read failed.</param>
            <param name="callTime">Shutdown operation time</param>
            <param name="exception">Exception caught if shutdown fail</param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.MonitorAggregationDimensions">
            <summary>
            Base class for holding monitor aggregation dimensions
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.MonitorAggregationDimensions.GlobalConfig">
            <summary>
            Data object holding Silo global configuration parameters.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.MonitorAggregationDimensions.NodeConfig">
            <summary>
            Individual node-specific silo configuration parameters.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.MonitorAggregationDimensions.#ctor(Orleans.Runtime.Configuration.GlobalConfiguration,Orleans.Runtime.Configuration.NodeConfiguration)">
            <summary>
            Constructor
            </summary>
            <param name="globalConfig"></param>
            <param name="nodeConfig"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.MonitorAggregationDimensions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.ReceiverMonitorDimensions">
            <summary>
            Aggregation dimensions for receiver monitor
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.ReceiverMonitorDimensions.QueueId">
            <summary>
            Eventhub partition
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ReceiverMonitorDimensions.#ctor(Orleans.Providers.Streams.Common.MonitorAggregationDimensions,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="dimensions"></param>
            <param name="queueId"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ReceiverMonitorDimensions.#ctor">
            <summary>
            Zero parameter constructor
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.CacheMonitorDimensions">
            <summary>
            Aggregation dimensions for cache monitor
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CacheMonitorDimensions.BlockPoolId">
            <summary>
            Block pool Id
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.BlockPoolMonitorDimensions">
            <summary>
            Aggregation dimensions for block pool monitors
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.BlockPoolMonitorDimensions.BlockPoolId">
            <summary>
            Block pool Id
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy`1">
            <summary>
            Eviction strategy that evicts data based off of age.
            </summary>
            <typeparam name="TCachedMessage"></typeparam>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy`1.inUseBuffers">
            <summary>
            Buffers which are currently in use in the cache
            Protected for test purposes
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy`1.#ctor(Orleans.Runtime.Logger,Orleans.Providers.Streams.Common.TimePurgePredicate,Orleans.Providers.Streams.Common.ICacheMonitor,System.Nullable{System.TimeSpan})">
            <summary>
            Constructor
            </summary>
            <param name="logger"></param>
            <param name="timePurage"></param>
            <param name="cacheMonitor"></param>
            <param name="monitorWriteInterval">"Interval to write periodic statistics.  Only triggered for active caches.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy`1.GetBlockId(System.Nullable{`0})">
            <summary>
            Get block pool block id for message
            </summary>
            <param name="cachedMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy`1.GetEnqueueTimeUtc(`0@)">
            <summary>
            Get message enqueue time
            </summary>
            <param name="cachedMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy`1.GetDequeueTimeUtc(`0@)">
            <summary>
            Get message dequeue time
            </summary>
            <param name="cachedMessage"></param>
            <returns></returns>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy`1.PurgeObservable">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy`1.OnPurged">
            <summary>
            Called with the newest item in the cache and last item purged after a cache purge has run.
            For ordered reliable queues we shouldn't need to notify on every purged event, only on the last event 
              of every set of events that get purged.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy`1.OnBlockAllocated(Orleans.Providers.Streams.Common.FixedSizeBuffer)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy`1.PerformPurge(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy`1.ReportPurge(Orleans.Runtime.Logger,Orleans.Providers.Streams.Common.IPurgeObservable{`0},System.Int32)">
            <summary>
            Logs cache purge activity
            </summary>
            <param name="logger"></param>
            <param name="purgeObservable"></param>
            <param name="itemsPurged"></param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.IEvictionStrategy`1">
            <summary>
            Eviction strategy for the PooledQueueCache
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.IEvictionStrategy`1.PurgeObservable">
            <summary>
            IPurgeObservable is implemented by the cache to do purge related actions, and invoked by EvictionStrategy
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.IEvictionStrategy`1.OnPurged">
            <summary>
            Method which will be called when purge is finished
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IEvictionStrategy`1.PerformPurge(System.DateTime)">
            <summary>
            Method which should be called when pulling agent try to do a purge on the cache
            </summary>
            <param name="utcNow"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IEvictionStrategy`1.OnBlockAllocated(Orleans.Providers.Streams.Common.FixedSizeBuffer)">
            <summary>
            Method which should be called when data adapter allocated a new block
            </summary>
            <param name="newBlock"></param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.IPurgeObservable`1">
            <summary>
            IPurgeObservable is implemented by the cache to do purge related actions, and invoked by EvictionStrategy
            </summary>
            <typeparam name="TCachedMessage"></typeparam>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IPurgeObservable`1.RemoveOldestMessage">
            <summary>
            Remove oldest message in the cache
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.IPurgeObservable`1.Newest">
            <summary>
            Newest message in the cache
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.IPurgeObservable`1.Oldest">
            <summary>
            Oldest message in the cache
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.IPurgeObservable`1.ItemCount">
            <summary>
            Message count
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.IPurgeObservable`1.IsEmpty">
            <summary>
            Determine if the cache is empty
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.TimePurgePredicate">
            <summary>
            Determines if data should be purged based off time.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.TimePurgePredicate.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Contructor
            </summary>
            <param name="minTimeInCache">minimum time data should be keept in cache, unless purged due to data size.</param>
            <param name="maxRelativeMessageAge">maximum age of data to keep in the cache</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.TimePurgePredicate.ShouldPurgFromTime(System.TimeSpan,System.TimeSpan)">
            <summary>
            Checks to see if the message should be purged.
            Message should be purged if its relative age is greater than maxRelativeMessageAge and has been in the cache longer than the minTimeInCache.
            </summary>
            <param name="timeInCache">amount of time message has been in this cache</param>
            <param name="relativeAge">Age of message relative to the most recent events read</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.CachedMessageBlock`1">
            <summary>
            CachedMessageBlock is a block of tightly packed structures containing tracking data for cached messages.  This data is 
              tightly packed to reduced GC pressure.  The tracking data is used by the queue cache to walk the cache serving ordered
              queue messages by stream.
            </summary>
            <typeparam name="TCachedMessage">Tightly packed structure.  Struct should contain only value types.</typeparam>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CachedMessageBlock`1.Node">
            <summary>
            Linked list node, so this message block can be kept in a linked list
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CachedMessageBlock`1.HasCapacity">
            <summary>
            More messages can be added to the blocks
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CachedMessageBlock`1.IsEmpty">
            <summary>
            Block is empty
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CachedMessageBlock`1.NewestMessageIndex">
            <summary>
            Index of most recent message added to the block
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CachedMessageBlock`1.OldestMessageIndex">
            <summary>
            Index of oldest message in this block
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CachedMessageBlock`1.OldestMessage">
            <summary>
            Oldest message in the block
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CachedMessageBlock`1.NewestMessage">
            <summary>
            Newest message in this block
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CachedMessageBlock`1.ItemCount">
            <summary>
            Message count in this block
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock`1.#ctor(System.Int32)">
            <summary>
            Block of cached messages
            </summary>
            <param name="blockSize"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock`1.Remove">
            <summary>
            Removes a message from the start of the block (oldest data).  Returns true if more items are still available.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock`1.Add``1(``0,System.DateTime,Orleans.Providers.Streams.Common.ICacheDataAdapter{``0,`0})">
            <summary>
            Add a message from the queue to the block.
            Converts the queue message to a cached message and stores it at the end of the block.
            </summary>
            <typeparam name="TQueueMessage"></typeparam>
            <param name="queueMessage"></param>
            <param name="dequeueTimeUtc"></param>
            <param name="dataAdapter"></param>
            <returns>Returns the position of the queued message in the stream</returns>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.CachedMessageBlock`1.Item(System.Int32)">
            <summary>
            Access the cached message at the provdied index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock`1.GetSequenceToken``1(System.Int32,Orleans.Providers.Streams.Common.ICacheDataAdapter{``0,`0})">
            <summary>
            Gets the sequence token of the cached message a the provided index
            </summary>
            <typeparam name="TQueueMessage"></typeparam>
            <param name="index"></param>
            <param name="dataAdapter"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock`1.GetNewestSequenceToken``1(Orleans.Providers.Streams.Common.ICacheDataAdapter{``0,`0})">
            <summary>
            Gets the sequence token of the newest message in this block
            </summary>
            <typeparam name="TQueueMessage"></typeparam>
            <param name="dataAdapter"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock`1.GetOldestSequenceToken``1(Orleans.Providers.Streams.Common.ICacheDataAdapter{``0,`0})">
            <summary>
            Gets the sequence token of the oldest message in this block
            </summary>
            <typeparam name="TQueueMessage"></typeparam>
            <param name="dataAdapter"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock`1.GetIndexOfFirstMessageLessThanOrEqualTo(Orleans.Streams.StreamSequenceToken,Orleans.Providers.Streams.Common.ICacheDataComparer{`0})">
            <summary>
            Gets the index of the first message in this block that has a sequence token at or before the provided token
            </summary>
            <param name="token"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock`1.TryFindFirstMessage(Orleans.Streams.IStreamIdentity,Orleans.Providers.Streams.Common.ICacheDataComparer{`0},System.Int32@)">
            <summary>
            Tries to find the first message in the block that is part of the provided stream.
            </summary>
            <param name="streamIdentity"></param>
            <param name="comparer"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock`1.TryFindNextMessage(System.Int32,Orleans.Streams.IStreamIdentity,Orleans.Providers.Streams.Common.ICacheDataComparer{`0},System.Int32@)">
            <summary>
            Tries to get the next message from the provided stream, starting at the start index.
            </summary>
            <param name="start"></param>
            <param name="streamIdentity"></param>
            <param name="comparer"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessageBlock`1.OnResetState">
            <summary>
            Resets this blocks state to that of an empty block.
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.FixedSizeBuffer">
            <summary>
            Manages a contiguous block of memory.
            Calls purge action with itself as the purge request when it's signaled to purge.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.FixedSizeBuffer.SizeInByte">
            <summary>
            Buffer size in Byte
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.FixedSizeBuffer.Id">
            <summary>
            Unique identifier of this buffer
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.FixedSizeBuffer.#ctor(System.Int32)">
            <summary>
            Manages access to a fixed size byte buffer.
            </summary>
            <param name="blockSizeInByte"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.FixedSizeBuffer.TryGetSegment(System.Int32,System.ArraySegment{System.Byte}@)">
            <summary>
            Try to get a segment with a buffer of the specified size from this block.
            Fail if there is not enough space available
            </summary>
            <param name="size"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.FixedSizeBuffer.OnResetState">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Providers.Streams.Common.ICacheDataAdapter`2">
            <summary>
            Pooled queue cache stores data in tightly packed structures that need to be transformed to various
              other formats quickly.  Since the data formats may change by queue type and data format,
              this interface allows adapter developers to build custom data transforms appropriate for 
              the various types of queue data.
            </summary>
            <typeparam name="TQueueMessage"></typeparam>
            <typeparam name="TCachedMessage"></typeparam>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheDataAdapter`2.QueueMessageToCachedMessage(`1@,`0,System.DateTime)">
            <summary>
            Converts a TQueueMessage message from the queue to a TCachedMessage cachable structures.
            </summary>
            <param name="cachedMessage"></param>
            <param name="queueMessage"></param>
            <param name="dequeueTimeUtc"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheDataAdapter`2.GetBatchContainer(`1@)">
            <summary>
            Converts a cached message to a batch container for delivery
            </summary>
            <param name="cachedMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheDataAdapter`2.GetSequenceToken(`1@)">
            <summary>
            Gets the stream sequence token from a cached message.
            </summary>
            <param name="cachedMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheDataAdapter`2.GetStreamPosition(`0)">
            <summary>
            Gets the stream position from a queue message
            </summary>
            <param name="queueMessage"></param>
            <returns></returns>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.ICacheDataAdapter`2.OnBlockAllocated">
            <summary>
            Should be set to OnBlockAllocated method of the cache's EvicationStrategy
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheDataAdapter`2.GetMessageEnqueueTimeUtc(`1@)">
            <summary>
            Get cached message enqueueTime
            </summary>
            <param name="message"></param>
            <returns>Return message's enqueue time Utc, return null if message didn't keep a enqueue time</returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheDataAdapter`2.GetMessageDequeueTimeUtc(`1@)">
            <summary>
            Get cached message dequeue time
            </summary>
            <param name="message"></param>
            <returns>Return message's dequeue time Utc, return null if the message didn't keep a dequeue time</returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.ICacheDataComparer`1">
            <summary>
            Compares cached messages with various stream details
            </summary>
            <typeparam name="TCachedMessage"></typeparam>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheDataComparer`1.Compare(`0,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Compare a cached message with a sequence token to determine if it message is before or after the token
            </summary>
            <param name="cachedMessage"></param>
            <param name="streamToken"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ICacheDataComparer`1.Equals(`0,Orleans.Streams.IStreamIdentity)">
            <summary>
            Checks to see if the cached message is part of the provided stream
            </summary>
            <param name="cachedMessage"></param>
            <param name="streamIdentity"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.CacheDataComparerExtensions">
            <summary>
            Cache data comparer exstension functions that switch argument order
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CacheDataComparerExtensions.Compare``1(Orleans.Providers.Streams.Common.ICacheDataComparer{``0},Orleans.Streams.StreamSequenceToken,``0)">
            <summary>
            Compare a cached message with a sequence token to determine if it message is before or after the token
            </summary>
            <param name="cachedMessage"></param>
            <param name="comparer"></param>
            <param name="streamToken"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CacheDataComparerExtensions.Equals``1(Orleans.Providers.Streams.Common.ICacheDataComparer{``0},Orleans.Streams.IStreamIdentity,``0)">
            <summary>
            Checks to see if the cached message is part of the provided stream
            </summary>
            <param name="cachedMessage"></param>
            <param name="comparer"></param>
            <param name="streamIdentity"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.IObjectPool`1">
            <summary>
            Simple object pool Interface.
            Objects allocated should be returned to the pool when disposed.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IObjectPool`1.Allocate">
            <summary>
            Allocates a pooled resource
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.IObjectPool`1.Free(`0)">
            <summary>
            Returns a resource to the pool
            </summary>
            <param name="resource"></param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.PooledResource`1">
            <summary>
            Utility class to support pooled objects by allowing them to track the pook they came from and return to it when disposed
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.PooledResource`1.Pool">
            <summary>
            The pool to return this resource to upon disposal.
            A pool must set this property upon resource allocation.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.PooledResource`1.SignalPurge">
            <summary>
            If this object is to be used in a fixed size object pool, this call should be
              overridden with the purge implementation that returns the object to the pool.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.PooledResource`1.Dispose">
            <summary>
            Returns item to pool
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.PooledResource`1.OnResetState">
            <summary>
            Notifies the object that it has been purged, so it can reset itself to
              the state of a newly allocated object.
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.PooledQueueCache`2">
            <summary>
            The PooledQueueCache is a cache that is intended to serve as a message cache in an IQueueCache.
            It is capable of storing large numbers of messages (gigs worth of messages) for extended periods
              of time (minutes to indefinite), while incurring a minimal performance hit due to garbage collection.
            This pooled cache allocates memory and never releases it. It keeps freed resources available in pools 
              that remain in application use through the life of the service. This means these objects go to gen2,
              are compacted, and then stay there. This is relatively cheap, as the only cost they now incur is
              the cost of checking to see if they should be freed in each collection cycle. Since this cache uses
              small numbers of large objects with relatively simple object graphs, they are less costly to check
              then large numbers of smaller objects with more complex object graphs.
            For performance reasons this cache is designed to more closely align with queue specific data.  This is,
              in part, why, unlike the SimpleQueueCache, this cache does not implement IQueueCache.  It is intended
              to be used in queue specific implementations of IQueueCache.
            </summary>
            <typeparam name="TQueueMessage">Queue specific data</typeparam>
            <typeparam name="TCachedMessage">Tightly packed cached structure.  Should only contain value types.</typeparam>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.PooledQueueCache`2.Newest">
            <summary>
            Cached message most recently added
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.PooledQueueCache`2.Oldest">
            <summary>
            Oldest message in cache
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.PooledQueueCache`2.ItemCount">
            <summary>
            Cached message count
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.PooledQueueCache`2.#ctor(Orleans.Providers.Streams.Common.ICacheDataAdapter{`0,`1},Orleans.Providers.Streams.Common.ICacheDataComparer{`1},Orleans.Runtime.Logger,Orleans.Providers.Streams.Common.ICacheMonitor,System.Nullable{System.TimeSpan})">
            <summary>
            Pooled queue cache is a cache of message that obtains resource from a pool
            </summary>
            <param name="cacheDataAdapter"></param>
            <param name="comparer"></param>
            <param name="logger"></param>
            <param name="cacheMonitor"></param>
            <param name="cacheMonitorWriteInterval">cache monitor write interval.  Only triggered for active caches.</param>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.PooledQueueCache`2.IsEmpty">
            <summary>
            Indicates whether the cach is empty
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.PooledQueueCache`2.GetCursor(Orleans.Streams.IStreamIdentity,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Acquires a cursor to enumerate through the messages in the cache at the provided sequenceToken, 
              filtered on the specified stream.
            </summary>
            <param name="streamIdentity">stream identity</param>
            <param name="sequenceToken"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.PooledQueueCache`2.TryGetNextMessage(System.Object,Orleans.Streams.IBatchContainer@)">
            <summary>
            Acquires the next message in the cache at the provided cursor
            </summary>
            <param name="cursorObj"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.PooledQueueCache`2.Add(System.Collections.Generic.List{`0},System.DateTime)">
            <summary>
            Add a list of queue message to the cache 
            </summary>
            <param name="messages"></param>
            <param name="dequeueTime"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.PooledQueueCache`2.RemoveOldestMessage">
            <summary>
            Remove oldest message in the cache, remove oldest block too if the block is empty
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.CachedMessagePool`2">
            <summary>
            Pool of tightly packed cached messages that are kept in large blocks to reduce GC pressure.
            </summary>
            <typeparam name="TQueueMessage">Type of message read from the queue</typeparam>
            <typeparam name="TCachedMessage">Tightly packed structure.  Struct should contain only value types.</typeparam>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessagePool`2.#ctor(Orleans.Providers.Streams.Common.ICacheDataAdapter{`0,`1})">
            <summary>
            Allocates a pool of cached message blocks.
            </summary>
            <param name="cacheDataAdapter"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.CachedMessagePool`2.AllocateMessage(`0,System.DateTime,Orleans.Providers.Streams.Common.StreamPosition@)">
            <summary>
            Allocates a message in a block and returns the block the message is in.
            </summary>
            <param name="queueMessage"></param>
            <param name="dequeueTimeUtc"></param>
            <param name="streamPosition"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.ObjectPool`1">
            <summary>
            Simple object pool that uses a stack to store available objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.ObjectPool`1.monitor">
            <summary>
            monitor to report statistics for current object pool
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ObjectPool`1.#ctor(System.Func{`0},Orleans.Providers.Streams.Common.IObjectPoolMonitor,System.Nullable{System.TimeSpan})">
            <summary>
            Simple object pool
            </summary>
            <param name="factoryFunc">Function used to create new resources of type T</param>
            <param name="monitor">monitor to report statistics for object pool</param>
            <param name="monitorWriteInterval"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ObjectPool`1.Allocate">
            <summary>
            Allocates a pooled resource
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.ObjectPool`1.Free(`0)">
            <summary>
            Returns a resource to the pool
            </summary>
            <param name="resource"></param>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.StreamPosition">
            <summary>
            Stream position uniquely identifies the position of an event in a stream.
            If acquiring a stream position for a batch of events, the stream position will be of the first event in the batch.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.StreamPosition.#ctor(Orleans.Streams.IStreamIdentity,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Stream position consists of the stream identity and the sequence token
            </summary>
            <param name="streamIdentity"></param>
            <param name="sequenceToken"></param>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.StreamPosition.StreamIdentity">
            <summary>
            Identity of the stream
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.StreamPosition.SequenceToken">
            <summary>
            Position in the stream
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.SimpleQueueCache">
            <summary>
            A queue cache that keeps items in memory
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.SimpleQueueCache.Size">
            <summary>
            Number of items in the cache
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCache.GetMaxAddCount">
            <summary>
            The limit of the maximum number of items that can be added
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCache.#ctor(System.Int32,Orleans.Runtime.Logger)">
            <summary>
            SimpleQueueCache Constructor
            </summary>
            <param name="cacheSize"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCache.IsUnderPressure">
            <summary>
            Returns true if this cache is under pressure.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCache.TryPurgeFromCache(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer}@)">
            <summary>
            Ask the cache if it has items that can be purged from the cache 
            (so that they can be subsequently released them the underlying queue).
            </summary>
            <param name="purgedItems"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCache.AddToCache(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer})">
            <summary>
            Add a list of message to the cache
            </summary>
            <param name="msgs"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCache.GetCacheCursor(Orleans.Streams.IStreamIdentity,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Acquire a stream message cursor.  This can be used to retreave messages from the
              cache starting at the location indicated by the provided token.
            </summary>
            <param name="streamIdentity"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCache.TryGetNextMessage(Orleans.Providers.Streams.Common.SimpleQueueCacheCursor,Orleans.Streams.IBatchContainer@)">
            <summary>
            Aquires the next message in the cache at the provided cursor
            </summary>
            <param name="cursor"></param>
            <param name="batch"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.SimpleQueueCacheCursor">
            <summary>
            Cursor into a simple queue cache
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCacheCursor.#ctor(Orleans.Providers.Streams.Common.SimpleQueueCache,Orleans.Streams.IStreamIdentity,Orleans.Runtime.Logger)">
            <summary>
            Cursor into a simple queue cache
            </summary>
            <param name="cache"></param>
            <param name="streamIdentity"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCacheCursor.GetCurrent(System.Exception@)">
            <summary>
            Get the current value.
            </summary>
            <param name="exception"></param>
            <returns>
            Returns the current batch container.
            If null then the stream has completed or there was a stream error.  
            If there was a stream error, an error exception will be provided in the output.
            </returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCacheCursor.MoveNext">
            <summary>
            Move to next message in the stream.
            If it returns false, there are no more messages.  The enumerator is still
             valid howerver and can be called again when more data has come in on this
             stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCacheCursor.Refresh(Orleans.Streams.StreamSequenceToken)">
            <summary>
            Refresh that cache cursor. Called when new data is added into a cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCacheCursor.RecordDeliveryFailure">
            <summary>
            Record that delivery of the current event has failed
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCacheCursor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCacheCursor.Dispose(System.Boolean)">
            <summary>
            Clean up cache data when done
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueCacheCursor.ToString">
            <summary>
            Convert object to string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.SimpleQueueAdapterCache">
            <summary>
            Adapter for simple queue caches
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Common.SimpleQueueAdapterCache.CacheSizePropertyName">
            <summary>
            Cache size propery name for configuration
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueAdapterCache.#ctor(System.Int32,Orleans.Runtime.Logger)">
            <summary>
            Adapter for simple queue caches
            </summary>
            <param name="cacheSize"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueAdapterCache.CreateQueueCache(Orleans.Streams.QueueId)">
            <summary>
            Create a cache for a given queue id
            </summary>
            <param name="queueId"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.SimpleQueueAdapterCache.ParseSize(Orleans.Providers.IProviderConfiguration,System.Int32)">
            <summary>
            Parce the size property from configuration
            </summary>
            <param name="config"></param>
            <param name="defaultSize"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.EventSequenceToken">
            <summary>
            Stream sequcen token that tracks sequence nubmer and event index
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.EventSequenceToken.SequenceNumber">
            <summary>
            Number of event batches in stream prior to this event batch
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Common.EventSequenceToken.EventIndex">
            <summary>
            Number of events in batch prior to this event
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceToken.#ctor(System.Int64)">
            <summary>
            Sequence token constructor
            </summary>
            <param name="seqNumber"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceToken.#ctor(System.Int64,System.Int32)">
            <summary>
            Sequence token constructor
            </summary>
            <param name="seqNumber"></param>
            <param name="eventInd"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceToken.CreateSequenceTokenForEvent(System.Int32)">
            <summary>
            Creates a sequence token for a specific event in the current batch
            </summary>
            <param name="eventInd"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceToken.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceToken.Equals(Orleans.Streams.StreamSequenceToken)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceToken.CompareTo(Orleans.Streams.StreamSequenceToken)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceToken.GetHashCode">
            <summary>
            GetHashCode method for current EventSequenceToken
            </summary>
            <returns> Hash code for current EventSequenceToken object </returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Common.EventSequenceToken.ToString">
            <summary>
            ToString method
            </summary>
            <returns> A string which represent current EventSequenceToken object </returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.GeneratorAdapterConfig">
            <summary>
            This configuration class is used to configure the GeneratorStreamProvider.
            It tells the stream provider how many queues to create, and which generator to use to generate event streams.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Generator.GeneratorAdapterConfig.GeneratorConfigTypeName">
            <summary>
            Configuration property name for generator configuration type
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.GeneratorAdapterConfig.GeneratorConfigType">
            <summary>
            Generator configuration type
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.GeneratorAdapterConfig.StreamProviderName">
            <summary>
            Stream provider name
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.GeneratorAdapterConfig.TotalQueueCount">
            <summary>
            Total number of queues
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterConfig.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="streamProviderName"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterConfig.WriteProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Utility function to convert config to property bag for use in stream provider configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterConfig.PopulateFromProviderConfig(Orleans.Providers.IProviderConfiguration)">
            <summary>
            Utility function to populate config from provider config
            </summary>
            <param name="providerConfiguration"></param>
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.StreamGeneratorCommand">
            <summary>
            Stream generator commands
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Generator.StreamGeneratorCommand.Configure">
            <summary>
            Command to configure the generator
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory">
            <summary>
            Adapter factory for stream generator stream provider.
            This factory acts as the adapter and the adapter factory.  It creates receivers that use configurable generator
              to generate event streams, rather than reading them from storage.
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.GeneratorConfigTypeName">
            <summary>
            Configuration property name for generator configuration type
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.IsRewindable">
            <summary>
            Determines whether this is a rewindable stream adapter - supports subscribing from previous point in time.
            </summary>
            <returns>True if this is a rewindable stream adapter, false otherwise.</returns>
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.Direction">
            <summary>
            Direction of this queue adapter: Read, Write or ReadWrite.
            </summary>
            <returns>The direction in which this adapter provides data.</returns>
        </member>
        <member name="F:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.CacheMonitorFactory">
            <summary>
            Create a cache monitor to report cache related metrics
            Return a ICacheMonitor
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.BlockPoolMonitorFactory">
            <summary>
            Create a block pool monitor to monitor block pool related metrics
            Return a IBlockPoolMonitor
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.ReceiverMonitorFactory">
            <summary>
            Create a monitor to monitor QueueAdapterReceiver related metrics
            Return a IQueueAdapterReceiverMonitor
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.Init(Orleans.Providers.IProviderConfiguration,System.String,Orleans.Runtime.Logger,System.IServiceProvider)">
            <summary>
            Initialize the factory
            </summary>
            <param name="providerConfig"></param>
            <param name="providerName"></param>
            <param name="log"></param>
            <param name="svcProvider"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.CreateAdapter">
            <summary>
            Create an adapter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.GetQueueAdapterCache">
            <summary>
            Get the cache adapter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.GetStreamQueueMapper">
            <summary>
            Get the stream queue mapper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.GetDeliveryFailureHandler(Orleans.Streams.QueueId)">
            <summary>
            Get the delivery failure handler
            </summary>
            <param name="queueId"></param>
            <returns></returns>
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.Name">
            <summary>
            Name of the adapter. Primarily for logging purposes
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.QueueMessageBatchAsync``1(System.Guid,System.String,System.Collections.Generic.IEnumerable{``0},Orleans.Streams.StreamSequenceToken,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Stores a batch of messages
            </summary>
            <typeparam name="T"></typeparam>
            <param name="streamGuid"></param>
            <param name="streamNamespace"></param>
            <param name="events"></param>
            <param name="token"></param>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.CreateReceiver(Orleans.Streams.QueueId)">
            <summary>
            Creates a quere receiver for the specificed queueId
            </summary>
            <param name="queueId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.ExecuteCommand(System.Int32,System.Object)">
            <summary>
            A function to execute a control command.
            </summary>
            <param name="command">A serial number of the command.</param>
            <param name="arg">An opaque command argument</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorAdapterFactory.CreateQueueCache(Orleans.Streams.QueueId)">
            <summary>
            Create a cache for a given queue id
            </summary>
            <param name="queueId"></param>
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.GeneratorPooledCache">
            <summary>
            Pooled cache for generator stream provider
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorPooledCache.#ctor(Orleans.Providers.Streams.Common.IObjectPool{Orleans.Providers.Streams.Common.FixedSizeBuffer},Orleans.Runtime.Logger,Orleans.Serialization.SerializationManager,Orleans.Providers.Streams.Common.ICacheMonitor,System.Nullable{System.TimeSpan})">
            <summary>
            Pooled cache for generator stream provider
            </summary>
            <param name="bufferPool"></param>
            <param name="logger"></param>
            <param name="serializationManager"></param>
            <param name="cacheMonitor"></param>
            <param name="monitorWriteInterval">monitor write interval.  Only triggered for active caches.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorPooledCache.GetMaxAddCount">
            <summary>
            The limit of the maximum number of items that can be added
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorPooledCache.AddToCache(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer})">
            <summary>
            Add messages to the cache
            </summary>
            <param name="messages"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorPooledCache.TryPurgeFromCache(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer}@)">
            <summary>
            Ask the cache if it has items that can be purged from the cache 
            (so that they can be subsequently released them the underlying queue).
            </summary>
            <param name="purgedItems"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorPooledCache.GetCacheCursor(Orleans.Streams.IStreamIdentity,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Acquire a stream message cursor.  This can be used to retreave messages from the
              cache starting at the location indicated by the provided token.
            </summary>
            <param name="streamIdentity"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.GeneratorPooledCache.IsUnderPressure">
            <summary>
            Returns true if this cache is under pressure.
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.GeneratorStreamProvider">
            <summary>
            This is a persistent stream provider that generates it's own events rather than reading them from storage.
            This is primarily for test purposes.
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.GeneratedEvent">
            <summary>
            Event use in generated streams
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.GeneratedEvent.GeneratedEventType">
            <summary>
            Generated event type
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Generator.GeneratedEvent.GeneratedEventType.Fill">
            <summary>
            filler event
            </summary>
        </member>
        <member name="F:Orleans.Providers.Streams.Generator.GeneratedEvent.GeneratedEventType.Report">
            <summary>
            Event that should trigger reporting
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.GeneratedEvent.EventType">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.GeneratedEvent.Payload">
            <summary>
            Event payload
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.SimpleGenerator">
            <summary>
            Simple Generator
            Generates a single stream of a configurable number of events.  One event per poll.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.SimpleGenerator.TryReadEvents(System.DateTime,System.Collections.Generic.List{Orleans.Streams.IBatchContainer}@)">
            <summary>
            Untill we've generated the configured number of events, return a single generated event
            </summary>
            <param name="utcNow"></param>
            <param name="events"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.SimpleGeneratorConfig">
            <summary>
            Simple generator configuration class.
            This class is used to configure a generator stream provider to generate streams using the SimpleGenerator
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.SimpleGeneratorConfig.StreamNamespace">
            <summary>
            Stream namespace
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.SimpleGeneratorConfig.StreamGeneratorType">
            <summary>
            Stream generator type
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.SimpleGeneratorConfig.EventsInStream">
            <summary>
            Nuber of events to generate on this stream
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.SimpleGeneratorConfig.#ctor">
            <summary>
            Configuration for simple stream generator
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.SimpleGeneratorConfig.WriteProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Utility function to convert config to property bag for use in stream provider configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.SimpleGeneratorConfig.PopulateFromProviderConfig(Orleans.Providers.IProviderConfiguration)">
            <summary>
            Utility function to populate config from provider config
            </summary>
            <param name="providerConfiguration"></param>
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.IStreamGenerator">
            <summary>
            Interface of generators used by the GeneratorStreamProvider.  Any method of generating events
             must conform to this interface to be used by the GeneratorStreamProvider.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.IStreamGenerator.TryReadEvents(System.DateTime,System.Collections.Generic.List{Orleans.Streams.IBatchContainer}@)">
            <summary>
            Tries to get an evente, if the generator is configured to generate any at this time
            </summary>
            <param name="utcNow"></param>
            <param name="events"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.IStreamGenerator.Configure(System.IServiceProvider,Orleans.Providers.Streams.Generator.IStreamGeneratorConfig)">
            <summary>
            Configures the generator
            </summary>
            <param name="serviceProvider"></param>
            <param name="generatorConfig"></param>
        </member>
        <member name="T:Orleans.Providers.Streams.Generator.IStreamGeneratorConfig">
            <summary>
            Interface of configuration for generators used by the GeneratorStreamProvider.  This interface covers
              the minimal set of information the stream provider needs to configure a generator to generate data.  Generators should
              add any additional configuration information needed to it's implementation of this interface.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.Generator.IStreamGeneratorConfig.StreamGeneratorType">
            <summary>
            Stream generator type
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.Generator.IStreamGeneratorConfig.PopulateFromProviderConfig(Orleans.Providers.IProviderConfiguration)">
            <summary>
            Populates generator configuration from provider configuration
            </summary>
            <param name="providerConfiguration"></param>
        </member>
        <member name="T:Orleans.Providers.IMemoryStreamQueueGrain">
            <summary>
            Interface for In-memory stream queue grain.
            </summary>
        </member>
        <member name="M:Orleans.Providers.IMemoryStreamQueueGrain.Enqueue(Orleans.Providers.MemoryMessageData)">
            <summary>
            Enqueue an event.
            </summary>
        </member>
        <member name="M:Orleans.Providers.IMemoryStreamQueueGrain.Dequeue(System.Int32)">
            <summary>
            Dequeue up to maxCount events.
            </summary>
        </member>
        <member name="T:Orleans.Providers.MemoryAdapterConfig">
            <summary>
            This configuration class is used to configure the MemoryStreamProvider.
            It tells the stream provider how many queues to create.
            </summary>
        </member>
        <member name="P:Orleans.Providers.MemoryAdapterConfig.StreamProviderName">
            <summary>
            Stream provider name.
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryAdapterConfig.TotalQueueCountName">
            <summary>
            Total queue count name. Indicates the name of the property in provider config.
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryAdapterConfig.TotalQueueCountDefault">
            <summary>
            Total queue count default value.
            </summary>
        </member>
        <member name="P:Orleans.Providers.MemoryAdapterConfig.TotalQueueCount">
            <summary>
            Actual total queue count.
            </summary>
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterConfig.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="streamProviderName"></param>
            <param name="totalQueueCount"></param>
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterConfig.WriteProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Utility function to convert config to property bag for use in stream provider configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterConfig.PopulateFromProviderConfig(Orleans.Providers.IProviderConfiguration)">
            <summary>
            Utility function to populate config from provider config
            </summary>
            <param name="providerConfiguration"></param>
        </member>
        <member name="T:Orleans.Providers.MemoryAdapterFactory`1">
            <summary>
            Adapter factory for in memory stream provider.
            This factory acts as the adapter and the adapter factory.  The events are stored in an in-memory grain that 
            behaves as an event queue, this provider adapter is primarily used for testing
            </summary>
        </member>
        <member name="P:Orleans.Providers.MemoryAdapterFactory`1.Name">
            <summary>
            Name of the adapter. Primarily for logging purposes
            </summary>
        </member>
        <member name="P:Orleans.Providers.MemoryAdapterFactory`1.IsRewindable">
            <summary>
            Determines whether this is a rewindable stream adapter - supports subscribing from previous point in time.
            </summary>
            <returns>True if this is a rewindable stream adapter, false otherwise.</returns>
        </member>
        <member name="P:Orleans.Providers.MemoryAdapterFactory`1.Direction">
            <summary>
            Direction of this queue adapter: Read, Write or ReadWrite.
            </summary>
            <returns>The direction in which this adapter provides data.</returns>
        </member>
        <member name="P:Orleans.Providers.MemoryAdapterFactory`1.StreamFailureHandlerFactory">
            <summary>
            Creates a failure handler for a partition.
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryAdapterFactory`1.CacheMonitorFactory">
            <summary>
            Create a cache monitor to report cache related metrics
            Return a ICacheMonitor
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryAdapterFactory`1.BlockPoolMonitorFactory">
            <summary>
            Create a block pool monitor to monitor block pool related metrics
            Return a IBlockPoolMonitor
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryAdapterFactory`1.ReceiverMonitorFactory">
            <summary>
            Create a monitor to monitor QueueAdapterReceiver related metrics
            Return a IQueueAdapterReceiverMonitor
            </summary>
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.Init(Orleans.Providers.IProviderConfiguration,System.String,Orleans.Runtime.Logger,System.IServiceProvider)">
            <summary>
            Factory initialization.
            </summary>
            <param name="providerConfig"></param>
            <param name="name"></param>
            <param name="log"></param>
            <param name="svcProvider"></param>
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.CreateAdapter">
            <summary>
            Create queue adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.GetQueueAdapterCache">
            <summary>
            Create queue message cache adapter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.GetStreamQueueMapper">
            <summary>
            Create queue mapper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.CreateReceiver(Orleans.Streams.QueueId)">
            <summary>
            Creates a quere receiver for the specificed queueId
            </summary>
            <param name="queueId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.QueueMessageBatchAsync``1(System.Guid,System.String,System.Collections.Generic.IEnumerable{``0},Orleans.Streams.StreamSequenceToken,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Writes a set of events to the queue as a single batch associated with the provided streamId.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="streamGuid"></param>
            <param name="streamNamespace"></param>
            <param name="events"></param>
            <param name="token"></param>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.CreateQueueCache(Orleans.Streams.QueueId)">
            <summary>
            Create a cache for a given queue id
            </summary>
            <param name="queueId"></param>
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.GetDeliveryFailureHandler(Orleans.Streams.QueueId)">
            <summary>
            Acquire delivery failure handler for a queue
            </summary>
            <param name="queueId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.GenerateDeterministicGuid(Orleans.Streams.QueueId)">
            <summary>
            Generate a deterministic Guid from a queue Id. 
            </summary>
            <param name="queueId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.MemoryAdapterFactory`1.GetQueueGrain(Orleans.Streams.QueueId)">
            <summary>
            Get a MemoryStreamQueueGrain instance by queue Id. 
            </summary>
            <param name="queueId"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Providers.IMemoryMessageBodySerializer">
            <summary>
            Implementations of this interface are responsible for serializing MemoryMessageBody objects
            </summary>
        </member>
        <member name="M:Orleans.Providers.IMemoryMessageBodySerializer.Serialize(Orleans.Providers.MemoryMessageBody)">
            <summary>
            Serialize MemoryMessageBody to an array segment of bytes.
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.IMemoryMessageBodySerializer.Deserialize(System.ArraySegment{System.Byte})">
            <summary>
            Deserialize an array segment into a MemoryMessageBody
            </summary>
            <param name="bodyBytes"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Providers.DefaultMemoryMessageBodySerializer">
            <summary>
            Default IMemoryMessageBodySerializer
            </summary>
        </member>
        <member name="M:Orleans.Providers.DefaultMemoryMessageBodySerializer.#ctor(Orleans.Serialization.SerializationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.DefaultMemoryMessageBodySerializer"/> class.
            </summary>
            <param name="serializationManager"></param>
        </member>
        <member name="M:Orleans.Providers.DefaultMemoryMessageBodySerializer.Serialize(Orleans.Providers.MemoryMessageBody)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Providers.DefaultMemoryMessageBodySerializer.Deserialize(System.ArraySegment{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Providers.MemoryMessageBody">
            <summary>
            Body of message sent over MemoryStreamProvider
            </summary>
        </member>
        <member name="M:Orleans.Providers.MemoryMessageBody.#ctor(System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="events">Events that are part of this message</param>
            <param name="contex">Context in which this messsage was sent</param>
        </member>
        <member name="P:Orleans.Providers.MemoryMessageBody.Events">
            <summary>
            Events in message
            </summary>
        </member>
        <member name="P:Orleans.Providers.MemoryMessageBody.RequestContext">
            <summary>
            Message context
            </summary>
        </member>
        <member name="T:Orleans.Providers.MemoryMessageData">
            <summary>
            Represents the event sent and received from an In-Memory queue grain. 
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryMessageData.StreamGuid">
            <summary>
            Stream Guid of the event data.
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryMessageData.StreamNamespace">
            <summary>
            Stream namespace.
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryMessageData.SequenceNumber">
            <summary>
            Position of even in stream.
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryMessageData.DequeueTimeUtc">
            <summary>
            Time message was read from message queue
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryMessageData.EnqueueTimeUtc">
            <summary>
            Time message was written to message queue
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryMessageData.Payload">
            <summary>
            Serialized event data.
            </summary>
        </member>
        <member name="T:Orleans.Providers.MemoryPooledCache`1">
            <summary>
            Pooled cache for memory stream provider
            </summary>
        </member>
        <member name="M:Orleans.Providers.MemoryPooledCache`1.#ctor(Orleans.Providers.Streams.Common.IObjectPool{Orleans.Providers.Streams.Common.FixedSizeBuffer},Orleans.Providers.Streams.Common.TimePurgePredicate,Orleans.Runtime.Logger,`0,Orleans.Providers.Streams.Common.ICacheMonitor,System.Nullable{System.TimeSpan})">
            <summary>
            Pooled cache for memory stream provider
            </summary>
            <param name="bufferPool"></param>
            <param name="purgePredicate"></param>
            <param name="logger"></param>
            <param name="serializer"></param>
            <param name="cacheMonitor"></param>
            <param name="monitorWriteInterval">monitor write interval.  Only triggered for active caches.</param>
        </member>
        <member name="M:Orleans.Providers.MemoryPooledCache`1.GetMaxAddCount">
            <summary>
            The limit of the maximum number of items that can be added
            </summary>
        </member>
        <member name="M:Orleans.Providers.MemoryPooledCache`1.AddToCache(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer})">
            <summary>
            Add messages to the cache
            </summary>
            <param name="messages"></param>
        </member>
        <member name="M:Orleans.Providers.MemoryPooledCache`1.TryPurgeFromCache(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer}@)">
            <summary>
            Ask the cache if it has items that can be purged from the cache 
            (so that they can be subsequently released them the underlying queue).
            </summary>
            <param name="purgedItems"></param>
        </member>
        <member name="M:Orleans.Providers.MemoryPooledCache`1.GetCacheCursor(Orleans.Streams.IStreamIdentity,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Acquire a stream message cursor.  This can be used to retrieve messages from the
              cache starting at the location indicated by the provided token.
            </summary>
            <param name="streamIdentity"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.MemoryPooledCache`1.IsUnderPressure">
            <summary>
            Returns true if this cache is under pressure.
            </summary>
        </member>
        <member name="T:Orleans.Providers.MemoryStreamProvider">
            <summary>
            This is a persistent stream provider that uses in-memory grain to queue the events.
            This is primarily for test purposes.
            </summary> 
        </member>
        <member name="T:Orleans.Providers.MemoryStreamProvider`1">
            <summary>
            This is a persistent stream provider that uses in-memory grain to queue the events.
            This is primarily for test purposes.
            </summary> 
        </member>
        <member name="T:Orleans.Providers.MemoryStreamQueueGrain">
            <summary>
            Memory stream queue grain. This grain works as a storage queue of event data. Enqueue and Dequeue operations are supported.
            the max event count sets the max storage limit to the queue.
            </summary>
        </member>
        <member name="F:Orleans.Providers.MemoryStreamQueueGrain.maxEventCount">
            <summary>
            max event count. 
            </summary>
        </member>
        <member name="M:Orleans.Providers.MemoryStreamQueueGrain.Enqueue(Orleans.Providers.MemoryMessageData)">
            <summary>
            Enqueues an event data. If the current total count reaches the max limit. throws an exception.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.MemoryStreamQueueGrain.Dequeue(System.Int32)">
            <summary>
            Dequeues up to a max amount of maxCount event data from the queue.
            </summary>
            <param name="maxCount"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Storage.MemoryStorage">
            <summary>
            This is a simple in-memory grain implementation of a storage provider.
            </summary>
            <remarks>
            This storage provider is ONLY intended for simple in-memory Development / Unit Test scenarios.
            This class should NOT be used in Production environment, 
             because [by-design] it does not provide any resilience 
             or long-term persistence capabilities.
            </remarks>
            <example>
            Example configuration for this storage provider in OrleansConfiguration.xml file:
            <code>
            &lt;OrleansConfiguration xmlns="urn:orleans">
              &lt;Globals>
                &lt;StorageProviders>
                  &lt;Provider Type="Orleans.Storage.MemoryStorage" Name="MemoryStore" />
              &lt;/StorageProviders>
            </code>
            </example>
        </member>
        <member name="F:Orleans.Storage.MemoryStorage.NumStorageGrainsDefaultValue">
            <summary>
            Default number of queue storage grains.
            </summary>
        </member>
        <member name="F:Orleans.Storage.MemoryStorage.NumStorageGrainsPropertyName">
            <summary>
            Config string name for number of queue storage grains.
            </summary>
        </member>
        <member name="P:Orleans.Storage.MemoryStorage.Name">
            <summary> Name of this storage provider instance. </summary>
            <see cref="P:Orleans.Providers.IProvider.Name"/>
        </member>
        <member name="P:Orleans.Storage.MemoryStorage.Log">
            <summary> Logger used by this storage provider instance. </summary>
            <see cref="P:Orleans.Storage.IStorageProvider.Log"/>
        </member>
        <member name="M:Orleans.Storage.MemoryStorage.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Orleans.Storage.MemoryStorage.#ctor(System.Int32)">
            <summary> Constructor - use the specificed number of store grains. </summary>
            <param name="numStoreGrains">Number of store grains to use.</param>
        </member>
        <member name="M:Orleans.Storage.MemoryStorage.Init(System.String,Orleans.Providers.IProviderRuntime,Orleans.Providers.IProviderConfiguration)">
            <summary> Initialization function for this storage provider. </summary>
            <see cref="M:Orleans.Providers.IProvider.Init(System.String,Orleans.Providers.IProviderRuntime,Orleans.Providers.IProviderConfiguration)"/>
        </member>
        <member name="M:Orleans.Storage.MemoryStorage.Close">
            <summary> Shutdown function for this storage provider. </summary>
        </member>
        <member name="M:Orleans.Storage.MemoryStorage.ReadStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary> Read state data function for this storage provider. </summary>
            <see cref="M:Orleans.Storage.IStorageProvider.ReadStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)"/>
        </member>
        <member name="M:Orleans.Storage.MemoryStorage.WriteStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary> Write state data function for this storage provider. </summary>
            <see cref="M:Orleans.Storage.IStorageProvider.WriteStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)"/>
        </member>
        <member name="M:Orleans.Storage.MemoryStorage.ClearStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary> Delete / Clear state data function for this storage provider. </summary>
            <see cref="M:Orleans.Storage.IStorageProvider.ClearStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)"/>
        </member>
        <member name="T:Orleans.Storage.MemoryStorageWithLatency">
            <summary>
            This is a simple in-memory implementation of a storage provider which presents fixed latency of storage calls.
            This class is useful for system testing and investigation of the effects of storage latency.
            </summary>
            <remarks>
            This storage provider is ONLY intended for simple in-memory Test scenarios.
            This class should NOT be used in Production environment, 
             because [by-design] it does not provide any resilience 
             or long-term persistence capabilities.
            </remarks>
            <example>
            Example configuration for this storage provider in OrleansConfiguration.xml file:
            <code>
            &lt;OrleansConfiguration xmlns="urn:orleans">
              &lt;Globals>
                &lt;StorageProviders>
                  &lt;Provider Type="Orleans.Storage.MemoryStorageWithLatency" Name="MemoryStoreWithLatency" Latency="00:00:00.500"/>
              &lt;/StorageProviders>
            </code>
            </example>
        </member>
        <member name="M:Orleans.Storage.MemoryStorageWithLatency.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Orleans.Storage.MemoryStorageWithLatency.Init(System.String,Orleans.Providers.IProviderRuntime,Orleans.Providers.IProviderConfiguration)">
            <summary> Initialization function for this storage provider. </summary>
            <see cref="M:Orleans.Providers.IProvider.Init(System.String,Orleans.Providers.IProviderRuntime,Orleans.Providers.IProviderConfiguration)"/>
        </member>
        <member name="M:Orleans.Storage.MemoryStorageWithLatency.Close">
            <summary> Shutdown function for this storage provider. </summary>
        </member>
        <member name="M:Orleans.Storage.MemoryStorageWithLatency.ReadStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary> Read state data function for this storage provider. </summary>
            <see cref="M:Orleans.Storage.IStorageProvider.ReadStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)"/>
        </member>
        <member name="M:Orleans.Storage.MemoryStorageWithLatency.WriteStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary> Write state data function for this storage provider. </summary>
            <see cref="M:Orleans.Storage.IStorageProvider.WriteStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)"/>
        </member>
        <member name="M:Orleans.Storage.MemoryStorageWithLatency.ClearStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary> Delete / Clear state data function for this storage provider. </summary>
            <see cref="M:Orleans.Storage.IStorageProvider.ClearStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)"/>
        </member>
        <member name="T:Orleans.Storage.ShardedStorageProvider">
            <summary>
            Simple storage provider for writing grain state data shared across a number of other storage providers.
            </summary>
            <remarks>
            <para>
            Required nested configuration elements: 
            <c>Provider</c> -- References by-name to other provider instances defined elsewheer in thios configuration file.
            </para>
            <para>
            A consistent hash functions (default is Jenkins Hash) is used to decide which
            shard (in the order they are defined in the config file) is responsible for storing 
            state data for a specified grain, then the Read / Write / Clear request 
            is bridged over to the appropriate underlying provider for execution.
            </para>
            <para>
            See http://en.wikipedia.org/wiki/Jenkins_hash for more information about the Jenkins Hash function.
            </para>
            </remarks>
            <example>
            Example configuration for this storage provider in OrleansConfiguration.xml file:
            <code>
            &lt;OrleansConfiguration xmlns="urn:orleans">
              &lt;Globals>
                &lt;StorageProviders>
                  &lt;Provider Type="Orleans.Storage.AzureTableStorage" Name="AzureStore1" DataConnectionString="..." />
                  &lt;Provider Type="Orleans.Storage.AzureTableStorage" Name="AzureStore2" DataConnectionString="..." />
                  &lt;Provider Type="Orleans.Storage.ShardedStorageProvider" Name="ShardedAzureStore">
                    &lt;Provider Name="AzureStore1"/>
                    &lt;Provider Name="AzureStore2"/>
                  &lt;/Provider>
                &lt;/StorageProviders>
            </code>
            </example>
        </member>
        <member name="M:Orleans.Storage.ShardedStorageProvider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Orleans.Storage.ShardedStorageProvider.Name">
            <summary> Name of this storage provider instance. </summary>
            <see cref="P:Orleans.Providers.IProvider.Name"/>
        </member>
        <member name="P:Orleans.Storage.ShardedStorageProvider.Log">
            <summary> Logger used by this storage provider instance. </summary>
            <see cref="P:Orleans.Storage.IStorageProvider.Log"/>
        </member>
        <member name="M:Orleans.Storage.ShardedStorageProvider.HashFunction(System.String,Orleans.Runtime.GrainReference)">
            <summary>
            Return a hash value derived from the input grain type and id values.
            </summary>
            <param name="grainType">Fully qualified class type name for this grain</param>
            <param name="grainReference">GrainI reference for this grain</param>
            <returns>Stable hash value for this grain</returns>
        </member>
        <member name="M:Orleans.Storage.ShardedStorageProvider.Init(System.String,Orleans.Providers.IProviderRuntime,Orleans.Providers.IProviderConfiguration)">
            <summary> Initialization function for this storage provider. </summary>
            <see cref="M:Orleans.Providers.IProvider.Init(System.String,Orleans.Providers.IProviderRuntime,Orleans.Providers.IProviderConfiguration)"/>
        </member>
        <member name="M:Orleans.Storage.ShardedStorageProvider.Close">
            <summary> Shutdown function for this storage provider. </summary>
        </member>
        <member name="M:Orleans.Storage.ShardedStorageProvider.ReadStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary> Read state data function for this storage provider. </summary>
            <see cref="M:Orleans.Storage.IStorageProvider.ReadStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)"/>
        </member>
        <member name="M:Orleans.Storage.ShardedStorageProvider.WriteStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary> Write state data function for this storage provider. </summary>
            <see cref="M:Orleans.Storage.IStorageProvider.WriteStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)"/>
        </member>
        <member name="M:Orleans.Storage.ShardedStorageProvider.ClearStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary> Deleet / Clear state data function for this storage provider. </summary>
            <see cref="M:Orleans.Storage.IStorageProvider.ClearStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)"/>
        </member>
    </members>
</doc>
